{
    "sourceFile": "docs/data-sources/mongodb.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1656582811807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1656582811807,
            "name": "Commit-0",
            "content": "---\nid: mongodb\ntitle: MongoDB\n---\n\n# MongoDB\n\nInsight can connect to MongoDB to read and write data.\n\n## Connection\n\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted Insight. If you are using Insight cloud, please whitelist our IP.\n\nTo add a new MongoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select MongoDB from the modal that pops up.\n\nInsight requires the following to connect to your MongoDB.\n\n- **Host**\n- **Port**\n- **Username**\n- **Password**\n\nIt is recommended to create a new MongoDB user so that you can control the access levels of Insight.\n\n<img src=\"/img/datasource-reference/mo-connect.png\" alt=\"Insight - Mongo connection\" height=\"250\"/>\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to Insight server. Click on 'Save' button to save the data source.\n\n## Querying MongoDB\n\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\n<img src=\"/img/datasource-reference/mo-query.png\" alt=\"Insight - Mongo query\" height=\"250\"/>\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: [link](/docs/tutorial/transformations)\n:::\n\n### Supported operations\n- [List Collections](#list-collections)\n- [Find One](#find-one)\n- [Find Many](#find-many)\n- [Total Count](#total-count)\n- [Count](#count)\n- [Distinct](#distinct)\n- [Insert One](#insert-one)\n- [Insert Many](#insert-many)\n- [Update One](#update-one)\n- [Update Many](#update-many)\n- [Replace One](#replace-one)\n- [Find One and Update](#find-one-and-update)\n- [Find One and Replace](#find-one-and-replace)\n- [Find One and Delete](#find-one-and-delete)\n- [Aggregate](#aggregate)\n- [Delete One](#delete-one)\n- [Delete Many](#delete-many)\n- [Bulk Operations](#bulk-operations)\n#### List Collections\nRetruns list of collections\n#### Fine One\nReturn a document which satisfy the given filter and options. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/findOne)\n#### Fine Many\nReturn list of documents which satisfy the given filter and options. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/find/)\n#### Total Count\nReturns an estimation of the number of documents in the collection based on collection metadata. [Reference](https://mongodb.github.io/node-mongodb-native/4.0/classes/collection.html#estimateddocumentcount)\n#### Count\nReturns the number of documents based on the filter. [Reference](https://mongodb.github.io/node-mongodb-native/4.0/classes/collection.html#countdocuments)\n#### Distinct\nRetrieve a list of distinct values for a field based on the filter. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/distinct/)\n#### Insert One\nInsert a document. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/insertOne/)\n#### Insert Many\nInsert list of documents. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/insertMany/)\n#### Update One\nUpdate a document based on the filter. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/updateOne/)\n#### Update Many\nUpdate many documents based on the filter. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/updateMany/)\n#### Replace One\nReplace a document based on filter. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/replaceOne/)\n#### Find One and Update\nIf your application requires the document after updating, use this instead of `Update One`. [Reference](https://mongodb.github.io/node-mongodb-native/4.0/classes/collection.html#findoneandupdate)\n#### Find One and Replace\nIf your application requires the document after updating, use this instead of `Replace One`. [Reference](https://mongodb.github.io/node-mongodb-native/4.0/classes/collection.html#findoneandreplace)\n#### Find One and Delete\nIf your application requires the document after deleting, use this instead of `Delete One`. [Reference](https://mongodb.github.io/node-mongodb-native/4.0/classes/collection.html#findoneanddelete)\n#### Aggregate\nAggregation operations are expressions you can use to produce reduced and summarized results. [Reference](https://docs.mongodb.com/drivers/node/v4.0/fundamentals/aggregation/)\n#### Delete One\nDelete a record based on the filter. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/deleteOne/)\n#### Delete Many\nDelete many records based on the filter. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/deleteMany/)\n#### Bulk Operations\nPerform bulk operations. [Reference](https://docs.mongodb.com/drivers/node/v4.0/usage-examples/bulkWrite/)\n\n### Dynamic Quries\n```javascript\n{ amount: { $lt: '{{ components.textinput1.value }}' }}\n\n// Dates \n// supported: Extended JSON syntax\n{ createdAt: { $date: '{{ new Date('01/10/2020') }}'} }\n// not supported: MongoDB classic syntax\n{ createdAt: new Date('01/10/2020') }\n```\nReference on [mongodb extended JSON](https://docs.mongodb.com/manual/reference/mongodb-extended-json/) supported data types\n"
        }
    ]
}