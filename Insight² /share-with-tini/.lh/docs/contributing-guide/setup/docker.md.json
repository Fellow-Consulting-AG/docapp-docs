{
    "sourceFile": "docs/contributing-guide/setup/docker.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1656582811806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1656582811806,
            "name": "Commit-0",
            "content": "---\nid: docker\ntitle: Docker\n---\n\n# Docker\n\nDocker compose is the easiest way to setup Insight server and client locally.\n\n:::info\nIf you rather want to try out Insight locally with docker, you can follow the steps [here](https://docs.tooljet.com/docs/setup/docker-local).\n:::\n\n## Prerequisites\n\nMake sure you have the latest version of `docker` and `docker-compose` installed.\n\n[Official docker installation guide](https://docs.docker.com/desktop/)\n\n[Official docker-compose installation guide](https://docs.docker.com/compose/install/)\n\nWe recommend:\n\n```bash\ndocker --version\nDocker version 19.03.12, build 48a66213fe\n\ndocker-compose --version\ndocker-compose version 1.26.2, build eefe0d31\n```\n\n## Setting up\n\n:::tip\nIf you are setting up on a Windows machine, we advise you to setup Docker desktop with WSL2.\nPlease find more information [here](https://docs.docker.com/desktop/windows/wsl/).\n:::\n\n1. Clone the repository\n   ```bash\n   git clone https://github.com/tooljet/tooljet.git\n   ```\n\n2. Create a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the [environment variables reference](/docs/setup/env-vars)\n   ```bash\n   cp .env.example .env\n   cp .env.example .env.test\n   ```\n\n3. Populate the keys in the `.env` and `.env.test` file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure random key)\n\n   `LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\n\n   Example:\n\n   ```bash\n    cat .env\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=development\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_development\n    ORM_LOGGING=all\n   ```\n\n   ```bash\n    cat .env.test\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=test\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_test\n    ORM_LOGGING=error\n   ```\n\n4. Build docker images\n\n   ```bash\n   docker-compose build\n   docker-compose run --rm  plugins npm run build:plugins\n   ```\n\n5. Run Insight\n\n   ```bash\n   docker-compose up\n   ```\n\n6. Insight server is built using NestJS and the data such as application definitions are persisted on a postgres database. You can run the below command to seed the database.\n\n   ```bash\n   docker-compose exec server npm run db:seed\n   ```\n\n7. Insight should now be served locally at `http://localhost:8082`. You can login using the default user created.\n   ```\n   email: dev@tooljet.io\n   password: password\n   ```\n\n8. To shut down the containers,\n   ```bash\n   docker-compose stop\n   ```\n\n## Making changes to the codebase\n\nIf you make any changes to the codebase/pull the latest changes from upstream, the tooljet server container would hot reload the application without you doing anything.\n\nCaveat:\n\n1. If the changes include database migrations or new npm package additions in the package.json, you would need to restart the Insight server container by running `docker-compose restart server`.\n\n2. If you need to add a new binary or system library to the container itself, you would need to add those dependencies in `docker/server.Dockerfile.dev` and then rebuild the Insight server image. You can do that by running `docker-compose build server`. Once that completes you can start everything normally with `docker-compose up`.\n\nExample:\nLet's say you need to install the `imagemagick` binary in your Insight server's container. You'd then need to make sure that `apt` installs `imagemagick` while building the image. The Dockerfile at `docker/server.Dockerfile.dev` for the server would then look something like this:\n\n```\nFROM node:14.17.0-buster\n\nRUN apt update && apt install -y \\\n  build-essential  \\\n  postgresql \\\n  freetds-dev \\\n  imagemagick\n\nRUN mkdir -p /app\nWORKDIR /app\n\nCOPY ./server/package.json ./server/package-lock.json ./\nRUN npm install\n\nENV NODE_ENV=development\n\nCOPY ./server/ ./\n\nCOPY ./docker/ ./docker/\n\nCOPY ./.env ../.env\n\nRUN [\"chmod\", \"755\", \"entrypoint.sh\"]\n\n```\n\nOnce you've updated the Dockerfile, rebuild the image by running `docker-compose build server`. After building the new image, start the services by running `docker-compose up`.\n\n## Running tests\n\nTest config picks up config from `.env.test` file at the root of the project.\n\nRun the following command to create and migrate data for test db\n\n```bash\ndocker-compose run --rm -e NODE_ENV=test server npm run db:create\ndocker-compose run --rm -e NODE_ENV=test server npm run db:migrate\n```\n\nTo run the unit tests\n```bash\ndocker-compose --rm run server npm run test\n```\n\nTo run e2e tests\n```bash\ndocker-compose run --rm server npm run test:e2e\n```\n\nTo run a specific unit test\n\n```bash\ndocker-compose run --rm server npm run test <path-to-file>\n```\n\n## Troubleshooting\n\nPlease open a new issue at https://github.com/Insight/Insight/issues or join our Slack channel (https://join.slack.com/t/tooljet/shared_invite/zt-r2neyfcw-KD1COL6t2kgVTlTtAV5rtg) if you encounter any issues when trying to run Insight locally.\n"
        }
    ]
}