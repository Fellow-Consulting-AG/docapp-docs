{
    "sourceFile": "docs/contributing-guide/setup/macos.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1656582811801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1656582811801,
            "name": "Commit-0",
            "content": "---\nid: macos \ntitle: Mac OS\n---\n\n# Mac OS\nFollow these steps to setup and run Insight on macOS for development purposes. Open terminal and run the commands below. We recommend reading our guide on [architecture](/docs/contributing-guide/setup/architecture) of Insight before proceeding.\n\n## Setting up\n\n1. Set up the environment\n\n    1.1 Install Homebrew\n    ```bash\n    /bin/bash -c \"(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n    ```\n    1.2 Install Node.js ( version: v14.17.3 ) and npm (version: v7.20.0)\n    ```bash\n    brew install nvm\n    export NVM_DIR=~/.nvm\n    source $(brew --prefix nvm)/nvm.sh\n    nvm install 14.17.3\n    nvm use 14.17.3\n    npm install -g npm@7.20.0\n    ```\n\n    1.3 Install Postgres\n    :::tip\n    Insight uses a postgres database as the persistent storage for storing data related to users and apps. We do not plan to support other databases such as MySQL.\n    :::\n\n    ```bash\n    brew install postgresql\n    ```\n\n    1.4 Clone the repository\n    ```bash\n    git clone https://github.com/tooljet/tooljet.git\n    ```\n\n2. Set up environment variables\n\n    Create a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the [environment variables reference](/docs/setup/env-vars)\n    ```bash\n    cp .env.example .env\n    ```\n\n3. Populate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n   `LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\n\n   Example:\n   ```bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041\n   NODE_ENV=development\n   # DATABASE CONFIG\n   PG_HOST=postgres\n   PG_PORT=5432\n   PG_USER=postgres\n   PG_PASS=postgres\n   PG_DB=tooljet_development\n   ORM_LOGGING=all\n   ```\n\n4. Install and build dependencies\n    ```bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins\n    ```\n\n5. Set up database\n    ```bash\n    npm run --prefix server db:reset\n    ```\n\n6. Run plugins compilation in watch mode\n    ```bash\n    cd ./plugins && npm start\n    ```\n\n7. Run the server\n    ```bash\n    cd ./server && npm run start:dev\n    ```\n\n8. Run the client\n    ```bash\n    cd ./frontend && npm start\n    ```\n\n    The client will start on the port 8082, you can access the client by visiting:  [https://localhost:8082](https://localhost:8082)\n\n9. Create login credentials\n\n    Visiting [https://localhost:8082](https://localhost:8082) should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n## Running tests\n\nTest config requires the presence of `.env.test` file at the root of the project.\n\nTo run the unit tests\n```bash\nnpm run --prefix server test\n```\n\nTo run e2e tests\n```bash\nnpm run --prefix server test:e2e\n```\n\nTo run a specific unit test\n```bash\nnpm run --prefix server test <path-to-file>\n```\n"
        }
    ]
}