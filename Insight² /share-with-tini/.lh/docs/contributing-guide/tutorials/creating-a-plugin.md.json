{
    "sourceFile": "docs/contributing-guide/tutorials/creating-a-plugin.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1656582811748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1656582811748,
            "name": "Commit-0",
            "content": "---\nid: creating-a-plugin\ntitle: Creating Plugins\n---\n\n# Creating plugins for Insight \n\n## What are plugins\n\nInsight is built with extensibility in mind. Plugins allows developers to extend the functionalities of Insight using JavaScript. Plugins can only be connectors at this moment. For example, the data source connectors such as PostgreSQL, MySQL, Twilio, Stripe, etc are built as plugins. \n\nIn this guide, we will walk you through building plugins for Insight with the help of `tooljet` cli.\n\n`tooljet` cli is a commandline tool built for building plugins easily. We will build a simple plugin for BigQuery in this guide. \n\n### What does a plugin look like?\n\nAll the plugins live under the `/plugins` directory. The structure of a plugin looks like this:\n\n```\n  my-awesome-plugin/\n    package.json\n    lib/\n      icon.svg\n      index.ts\n      operations.json\n      manifest.json\n```\n\n- manifest.json should include information such as the name of plugin, description, etc. \n- operations.json should include the metadata of all the operations supported by the plugin.\n- index.ts is the main file. It defines a `QueryService` for the plugin. The `QueryService` handles running of queries, testing connections, caching connectios, etc.\n- icon.svg is the icon for the plugin.\n- package.json is auto generated by the cli. \n\n## Getting Started\n\n1. Install [tooljet-cli](https://www.npmjs.com/package/@tooljet/cli):\n  ```bash\n  $ npm i -g @tooljet/cli\n  ```\n\n2. Bootstrap a new plugin using cli\n  ```bash\n  $ tooljet plugin create bigquery\n  ```\n\n  ```bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  └─ plugins\n    └─ packages\n        └─ bigquery\n  ```\n\n3. Add the npm package of BigQuery to the plugin dependencies\n  ```bash\n  $ tooljet plugin install @google-cloud/bigquery --plugin bigquery\n  ```\n\n4. Now the directory for our new plugin should looks something like below: \n\n  ```bash\n  plugins/\n    package.json\n    packages/\n      bigquery/\n        __tests__\n          bigquery.test.js\n        package.json\n        lib/\n          icon.svg\n          index.ts\n          operations.json\n          manifest.json\n  ```\n\n5. Add data source config paramets to manifest.json\n\n  Our BigQuery plugin needs private key of a GCP service account to connect to BigQuery. Let's add `private_key` as a property for the data source. \n\n  ```json\n  {\n    \"$schema\": \"https://json-schema.org/\",\n    \"$id\": \"https://tooljet.io/BigQuery.schema.json\",\n    \"title\": \"BigQuery datasource\",\n    \"description\": \"A schema defining BigQuery datasource\",\n    \"type\": \"api\",\n    \"source\": {\n      \"name\": \"BigQuery\",\n      \"kind\": \"bigquery\",\n      \"exposedVariables\": {\n        \"isLoading\": false,\n        \"data\": {},\n        \"rawData\": {}\n      },\n      \"options\": {\n        \"private_key\": { \"encrypted\": true }\n      }\n    },\n    \"defaults\": {\n      \"private_key\": { \"value\": \"\" }\n    },\n    \"properties\": {\n      \"private_key\": {\n        \"label\": \"Private key\",\n        \"key\": \"private_key\",\n        \"type\": \"textarea\",\n        \"description\": \"Enter JSON private key for service account\"\n      }\n    },\n    \"required\": [\"private_key\"]\n  }\n\n  ```\n\n6. Import npm package BigQuery to index.ts\n  ```javascript\n  const { BigQuery } = require('@google-cloud/bigquery');\n  ```\n\n6. Edit index.ts to include the logic for creating a connection.    \n  ```javascript\n  async getConnection(sourceOptions: any, _options?: object): Promise<any> {\n    const privateKey = JSON.parse(sourceOptions['private_key']);\n    const client = new BigQuery({\n      projectId: privateKey['project_id'],\n      credentials: {\n        client_email: privateKey['client_email'],\n        private_key: privateKey['private_key'],\n      },\n    });\n\n    return client;\n  }\n  ```\n\n7. Edit index.ts to include the logic for testing connection.    \n  When a new data source is being added to a Insight application, the connection can be tested. \n\n  :::info\n  NOTE: Every data source might not have a way to test connection. If not applicable for your data source, you can disable the test connection feature by adding `\"customTesting\": true,` to the `manifest.json` of your plugin.\n  :::\n\n8. Add manifest entry for operations   \n\n    In this example, let's add two operations for our BigQuery plugin.   \n    - *List databases* - Lists all the databases.\n    - *Query database*   - Query a specific database.\n\n    We need to make the entries to `operations.json`. The `operations.json` should look like this now:\n    ```json\n    {\n      \"$schema\": \"https://json-schema.org/\",\n      \"$id\": \"https://tooljet.io/dataqueries/Bigquery.schema.json\",\n      \"title\": \"Dynamodb datasource\",\n      \"description\": \"Operations for BigQuery plugin\",\n      \"type\": \"object\",\n      \"defaults\": {},\n      \"properties\": {\n          \"operation\": {\n              \"label\": \"Operation\",\n              \"key\": \"operation\",\n              \"type\": \"dropdown-component-flip\",\n              \"description\": \"Single select dropdown for operation\",\n              \"list\": [\n                  {\n                      \"value\": \"list_datasets\",\n                      \"name\": \"List Datasets\"\n                  },\n                  {\n                      \"value\": \"query\",\n                      \"name\": \"Query\"\n                  }\n              ]\n          },\n          \"query\": {\n              \"query\": {\n                  \"label\": \"Query\",\n                  \"key\": \"query\",\n                  \"type\": \"codehinter\",\n                  \"description\": \"\",\n                  \"height\": \"150px\"\n              }\n          }\n      }\n    }\n\n    ```\n\n8. Handle the logic for running queries in `index.ts`   \n\n  `QueryService` receives the metadata of the data source including the credentials and configs for connecting and parameters for the query that was run. In our example, `sourceOptions` will have the `private_key` of BigQuery datasource associated with the query. `queryOptions` will have the configs and parameters for the specific query. For example, `queryOption.operation` will give the id of current operation. \n  \n  ```javascript\n    export default class BigQueryQueryService implements QueryService {\n      async run(sourceOptions: any, queryOptions: any, _dataSourceId: string): Promise<QueryResult> {\n        const operation = queryOptions.operation;\n        const client = await this.getConnection(sourceOptions);\n        let result = {};\n\n        try {\n          switch (operation) {\n            case 'list_datasets':\n                result = await client.getDatasets();\n                break;\n          }\n        } catch (error) {\n          throw new QueryError('Query could not be completed', error.message, {});\n        }\n\n        return {\n          status: 'ok',\n          data: result,\n        };\n      }\n    }\n  ```\n\n9. Since it is a smiliar step for adding the logic for handling `query` operationg, skipping it. \n\n10. Tests\n  Test files are generated by the cli when a plugin is created. You can use `jest` for writing the tests.\n\n  Tests for a specific plugin can be run using the command `tooljet plugin test --bigquery`\n\n13. The plugin is now ready! \n"
        }
    ]
}