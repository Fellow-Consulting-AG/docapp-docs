{
    "sourceFile": "docs/widgets/chart.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1656582811777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1656582811777,
            "name": "Commit-0",
            "content": "---\nid: chart\ntitle: Chart\n---\n# Chart\n\nChart widget takes the chart type, data and styles to draw charts using Plotly.js.\n\n## How To Use Chart Widget\n\n<iframe height=\"500\" src=\"https://www.youtube.com/embed/F3OALU_B5PE\" title=\"Chart Widget\" frameborder=\"0\" allowfullscreen width=\"100%\"></iframe>\n\n## Chart types\n### Line charts\n\n**Data requirements:** The data needs to be an array of objects and each object should have `x` and `y` keys.\n\n**Example:**\n```json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]\n```\n\nThe chart will look like this:\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Chart](/img/widgets/chart/linec.png)\n\n</div>\n\n### Bar charts\n\n**Data requirements:** The data needs to be an array of objects and each object should have `x` and `y` keys.\n\n**Example:**\n\n```json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40},\n  { \"x\": \"Jul\", \"y\": 100},\n  { \"x\": \"Aug\", \"y\": 80},\n  { \"x\": \"Sep\", \"y\": 40}\n]\n```\n\nThe chart will look like this:\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Chart](/img/widgets/chart/barc.png)\n\n</div>\n\n### Pie charts\n\n**Data requirements:** The data needs to be an array of objects and each object should have `label` and `value` keys.\n\n**Example:**\n\n```json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]\n```\n\nThe chart will look like this:\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Chart](/img/widgets/chart/piec.png)\n\n</div>\n\n## Properties\n\n:::info\nAny property having `Fx` button next to its field can be **programmatically configured**.\n:::\n\n### Title\n\nThis field is used to add a title to your selected chart.\n\n### Plotly JSON chart schema\n\nIn the chart widget, you can also plot a chart with JSON data. So the JSON will contain the information about the chart type, chart data, etc. You can learn more about the JSON properties from [here](https://plotly.com/javascript/reference/). \n\nAnyway, to work with the JSON you need to enable the `Use Plotly JSON schema` toggle from the properties section.\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Chart](/img/widgets/chart/pfjson.png)\n\n</div>\n\nIt will show the [JSON description](https://plotly.com/chart-studio-help/json-chart-schema/) field to put the JSON data.\n\nThe end result will be like this:\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Chart](/img/widgets/chart/jsonschema.png)\n\n</div>\n\n### Loading state\n\nToggle `on` the switch to display a loader on the widget. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\n\n### Marker color\n\nModify the color of marker using the color picker or by providing a `HEX color code`.\n\n### Show Axes\n\nEnable or disable the `x` and `y` axes on the chart through this property. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\n\n### Show grid lines\n\nToggle `on` or `off` to show or hide the grid lines on the chart. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\n\n## Layout\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Chart](/img/widgets/chart/layout.png)\n\n</div>\n\n### Show on desktop\n\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\n### Show on mobile\n\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\n\n## Styles\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Chart](/img/widgets/chart/styles.png)\n\n</div>\n\n### Padding\n\nDefine a space between the widget element and the widget border using `Padding` property. Use any numerical value between `1` to `100`.\n\n### Visibility\n\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n\n### Disable\n\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n"
        }
    ]
}