{
    "sourceFile": "docs/widgets/custom-component.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1656582811745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1656583010746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n ### Code\n \n This field is used to add a React code for your custom component. The packages for the custom component can be imported from [Skypack](https://www.skypack.dev/). For example, to import `React` package into the custom component it can be imported as `import React from 'https://cdn.skypack.dev/react'`.\n \n-Tooljet provides 3 props to interact with the app: `data`, `updateData` and `runQuery`.\n+Insight provides 3 props to interact with the app: `data`, `updateData` and `runQuery`.\n \n-- `data` is a shared object between custom component and Tooljet app.\n+- `data` is a shared object between custom component and Insight app.\n - `updateData` is a function which accepts a single object used to update the data passed to the custom component.\n - `runQuery` is a function which accepts a query name as a string used to run the query from the custom component.\n \n **Example:**\n"
                }
            ],
            "date": 1656582811745,
            "name": "Commit-0",
            "content": "---\nid: custom-component\ntitle: Custom Component\n---\n\n# Custom Component\n\nCustom Component can be used to do create your own React component when the needed functionality isn't available in other components.\n\n<div style={{textAlign: 'center'}}>\n\n![Insight - Widget Reference - Timeline](/img/widgets/custom-component/custom-component.png)\n\n</div>\n\n## Properties\n\n### Data\n\nThe data needs to be an objects which needs to be passed as `data` props to the custom component\n\n**Example:**\n\n```json\n{{{\n    title: \"Hi! There\",\n    buttonText: \"Updated Text\",\n    queryName: \"runjs1\"\n}}}\n```\n\n### Code\n\nThis field is used to add a React code for your custom component. The packages for the custom component can be imported from [Skypack](https://www.skypack.dev/). For example, to import `React` package into the custom component it can be imported as `import React from 'https://cdn.skypack.dev/react'`.\n\nTooljet provides 3 props to interact with the app: `data`, `updateData` and `runQuery`.\n\n- `data` is a shared object between custom component and Tooljet app.\n- `updateData` is a function which accepts a single object used to update the data passed to the custom component.\n- `runQuery` is a function which accepts a query name as a string used to run the query from the custom component.\n\n**Example:**\n\n```json\nimport React from \"https://cdn.skypack.dev/react\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom\";\nimport { Button, Container, Link } from \"https://cdn.skypack.dev/@material-ui/core\";\n\nconst MyCustomComponent = ({data, updateData, runQuery}) => (\n    <Container>\n        <h1>{data.title}</h1>\n        <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={() => {updateData({title: 'Hello World!!'})}}>\n            {data.buttonText}\n        </Button>\n        <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={() => {runQuery(data.queryName)}}\n        >\n            Run Query\n        </Button>\n    </Container>\n);\n\nconst ConnectedComponent = Tooljet.connectComponent(MyCustomComponent);\n\nReactDOM.render(<ConnectedComponent />, document.body);\n```\n\n:::info\n`Tooljet.connectComponent` acts as a HOC and it is required to get access to the data passed into the custom component and run the query\n:::\n\n## Layout\n\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n\n## Styles\n\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n\n:::info\nAny property having `Fx` button next to its field can be **programmatically configured**.\n:::\n"
        }
    ]
}