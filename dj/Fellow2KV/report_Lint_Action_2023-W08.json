{
    "author": "Lint Action",
    "week": "2023-W08",
    "total_commits": 7,
    "author_image": "https://avatars.githubusercontent.com/u/59283862?v=4",
    "commits": [
        {
            "sha": "35af7715acd0a9b6b9805b5d05a83eb42aa8d1e4",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -8,8 +8,10 @@\n import pandas as pd\n \n from fellow2kv.extension import storage_manager_doc2\n-from helper.form_extractor.proximity import (get_proximity_keywords,\n-                                             get_proximity_keywords_for_image)\n+from helper.form_extractor.proximity import (\n+    get_proximity_keywords,\n+    get_proximity_keywords_for_image,\n+)\n from helper.util import transform_from_normalized_coords_object\n \n \n@@ -492,16 +494,15 @@ def get_closest_references(\n             height = round(ref.get(\"y0\") / ref.get(\"normalizedY0\"))\n             new_from_point = (width * from_point[0], height * from_point[1])\n \n-            if (\n-                token_extremes\n-                and (abs(new_from_point[0] - ref_point[0])\n+            if token_extremes and (\n+                abs(new_from_point[0] - ref_point[0])\n                 > (token_extremes[\"right\"] - token_extremes[\"left\"])\n                 * width\n                 / dimensions_divisor\n                 or abs(new_from_point[1] - ref_point[1])\n                 > (token_extremes[\"bottom\"] - token_extremes[\"top\"])\n                 * height\n-                / dimensions_divisor)\n+                / dimensions_divisor\n             ):\n                 continue\n             distance = calculate_distance("
        },
        {
            "sha": "6592eaa2a80b01cf4f1779b77c2bb519b16fcef0",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -15,8 +15,7 @@\n import constants\n import helper.ocr as ocr_helper\n from authenticator import UserAuthentication\n-from fellow2kv.extension import (api, db, multi_auth, storagemanager,\n-                                 storagemanager_doc2)\n+from fellow2kv.extension import api, db, multi_auth, storagemanager, storagemanager_doc2\n from helper import doc_type_helper as dth\n from helper import generic_data_vault_helper as gdvh\n from helper import pdf as pdf_helper\n@@ -25,8 +24,11 @@\n from helper.document_classifier import document_classifier\n from helper.document_extraction import document_extraction_helper as deh\n from helper.extract_util import Extractor\n-from helper.util import (str_to_bool, transform_from_normalized_coords_object,\n-                         transform_to_normalized)\n+from helper.util import (\n+    str_to_bool,\n+    transform_from_normalized_coords_object,\n+    transform_to_normalized,\n+)\n from logger import get_logger\n from util import sync_wrapper\n "
        },
        {
            "sha": "756c257c44e41c3d90d943aebadbcb9e249d902c",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -44,7 +44,9 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n     populate_tr_ocr_info(document, text_fields_result)\n     populate_tr_ocr_info(document, checkbox_fields_result)\n     # check_for_trocr(user, document, text_fields_result)\n-    fields_result = checkbox_fields_result + text_fields_result + non_coords_fields_result\n+    fields_result = (\n+        checkbox_fields_result + text_fields_result + non_coords_fields_result\n+    )\n \n     # TODO: Remove overlapping text fields\n     return fields_result"
        },
        {
            "sha": "8079e3ca281b99d1dfff823aa103dad440805067",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -12,8 +12,11 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (common_table_helper, doc2_table_helper,\n-                                     table_draft_helper)\n+from helper.table_extractors import (\n+    common_table_helper,\n+    doc2_table_helper,\n+    table_draft_helper,\n+)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -96,9 +99,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                     \"is_table_field\": True,\n                     \"table_field_name\": layout_field.get(\"table_field_name\", None),\n                     \"table_field_index\": layout_field.get(\"table_field_index\", None),\n-                    \"list_of_values\": layout_field.get(\n-                        \"list_of_values\", None\n-                    ),\n+                    \"list_of_values\": layout_field.get(\"list_of_values\", None),\n                 }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n             if not doc_field and not layout_field.get(\"is_table_field\", False):"
        },
        {
            "sha": "672b77324b9cbf96c2f85ca624d8e323e1bafa27",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -12,8 +12,11 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (common_table_helper, doc2_table_helper,\n-                                     table_draft_helper)\n+from helper.table_extractors import (\n+    common_table_helper,\n+    doc2_table_helper,\n+    table_draft_helper,\n+)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -96,9 +99,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                     \"is_table_field\": True,\n                     \"table_field_name\": layout_field.get(\"table_field_name\", None),\n                     \"table_field_index\": layout_field.get(\"table_field_index\", None),\n-                    \"list_of_values\": layout_field.get(\n-                        \"list_of_values\", None\n-                    ),\n+                    \"list_of_values\": layout_field.get(\"list_of_values\", None),\n                 }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n             if not doc_field and not layout_field.get(\"is_table_field\", False):"
        },
        {
            "sha": "ff7853b583b9c29cfcd854bb63d54c2666c482fd",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -9,14 +9,23 @@\n from fellow2kv.extension import db, storagemanager\n from helpdesk import create_new_customer, create_ticket\n from helper import doc2_util\n-from helper.ai.ai_ocr import (generate_hard_regex_from_string,\n-                              generate_regex_from_string)\n-from helper.util import (get_page, transform_from_normalized,\n-                         transform_from_normalized_coords_object)\n+from helper.ai.ai_ocr import generate_hard_regex_from_string, generate_regex_from_string\n+from helper.util import (\n+    get_page,\n+    transform_from_normalized,\n+    transform_from_normalized_coords_object,\n+)\n from logger import get_logger\n-from models import (DocOriginRules, FellowKVRule, FellowKVRuleUser,\n-                    FellowKVSourceFile, FellowKVTableColumnRule,\n-                    FellowKVTableRule, TableFormattingRules, TfidfDocs)\n+from models import (\n+    DocOriginRules,\n+    FellowKVRule,\n+    FellowKVRuleUser,\n+    FellowKVSourceFile,\n+    FellowKVTableColumnRule,\n+    FellowKVTableRule,\n+    TableFormattingRules,\n+    TfidfDocs,\n+)\n \n logger = get_logger(\"plugin-export-util\")\n \n@@ -1091,7 +1100,11 @@ def transform_to_rules(extractor, item):\n                 rule_increase.append({\"ruleID\": field.get(\"rule\"), \"weight\": 1})\n \n         create_new_rule = False\n-        if not field.get(\"rule\", None) or field_updated or (field.get(\"score\", 40) < 40):\n+        if (\n+            not field.get(\"rule\", None)\n+            or field_updated\n+            or (field.get(\"score\", 40) < 40)\n+        ):\n             create_new_rule = True\n \n         if create_new_rule:"
        },
        {
            "sha": "a024a6070df3cb2716e86746478f283de15e09c2",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -12,8 +12,11 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (common_table_helper, doc2_table_helper,\n-                                     table_draft_helper)\n+from helper.table_extractors import (\n+    common_table_helper,\n+    doc2_table_helper,\n+    table_draft_helper,\n+)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -96,7 +99,6 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                     \"is_table_field\": True,\n                     \"table_field_name\": layout_field.get(\"table_field_name\", None),\n                     \"table_field_index\": layout_field.get(\"table_field_index\", None),\n-\n                 }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n             if not doc_field and not layout_field.get(\"is_table_field\", False):\n@@ -286,18 +288,22 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n             if field_type == \"ExtractedTable\":\n                 table_columns = layout_row[\"columns\"]\n                 for table_column in table_columns:\n-                    columns_coords_array = table_column['coords']\n+                    columns_coords_array = table_column[\"coords\"]\n                     for index, column_coords in enumerate(columns_coords_array):\n-                        if column_coords['coord']:\n+                        if column_coords[\"coord\"]:\n                             filtered_layout_fields.append(\n                                 {\n                                     \"name\": f\"{table_column['name']}_{index}\",\n-                                    \"coords\": [column_coords['coord']],\n+                                    \"coords\": [column_coords[\"coord\"]],\n                                     \"tr_ocr_model_id\": table_column[\"tr_ocr_model_id\"],\n-                                    \"field_type\": table_column.get(\"fieldType\", \"STRING\"),\n-                                    \"list_of_values\": table_column.get(\"list_of_values\", None),\n+                                    \"field_type\": table_column.get(\n+                                        \"fieldType\", \"STRING\"\n+                                    ),\n+                                    \"list_of_values\": table_column.get(\n+                                        \"list_of_values\", None\n+                                    ),\n                                     \"is_table_field\": True,\n-                                    \"table_field_name\": table_column['name'],\n+                                    \"table_field_name\": table_column[\"name\"],\n                                     \"table_field_index\": index,\n                                 }\n                             )"
        }
    ]
}