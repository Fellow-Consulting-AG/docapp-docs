{
    "author": "Lint Action",
    "week": "2023-W15",
    "total_commits": 6,
    "author_image": "https://avatars.githubusercontent.com/u/59283862?v=4",
    "commits": [
        {
            "sha": "8cb12466c674e0c0ab77874504d5f9b018a5dda4",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -14,21 +14,29 @@\n from sqlalchemy.sql.expression import text\n \n import constants\n+\n # from fellow2kv.extension import db, storagemanager\n-from constants import (AMOUNT_STANDARD_FIELDS, INVOICE_MAPPING,\n-                       MAX_FULL_TAX_RATE, MIN_FULL_TAX_RATE,\n-                       REVERSE_INVOICE_MAPPING)\n+from constants import (\n+    AMOUNT_STANDARD_FIELDS,\n+    INVOICE_MAPPING,\n+    MAX_FULL_TAX_RATE,\n+    MIN_FULL_TAX_RATE,\n+    REVERSE_INVOICE_MAPPING,\n+)\n from fellow2kv.extension import db, storagemanager\n from helper import db_helper as dbh\n from helper import generic_data_vault_helper as gdvh\n from helper import util as hutil\n-from helper.ai.ai_invoice import (transform_dict_to_array,\n-                                  transform_fields_to_dict)\n+from helper.ai.ai_invoice import transform_dict_to_array, transform_fields_to_dict\n+\n # from helper.document_extraction import model_extraction_helper as meh\n from helper.extract_util import Extractor\n from helper.tfidf_helper import get_all_similar_docs_above_threshold\n-from helper.util import (get_page, transform_from_normalized_coords_object,\n-                         transform_to_normalized)\n+from helper.util import (\n+    get_page,\n+    transform_from_normalized_coords_object,\n+    transform_to_normalized,\n+)\n from logger import get_logger\n from models import FellowKVRegexes, FellowKVSourceFile\n "
        },
        {
            "sha": "afbb70799e1d9e813f2aec2670b332560a92935e",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -9,20 +9,28 @@\n from helper.ai.ai_invoice import transform_fields_to_dict\n from helper.ai.ocr_process_util import generate_hard_regex_from_string\n from helper.extract_util import Extractor\n-from helper.plugin_export_util import (create_pending_tickets,\n-                                       create_rules_in_db,\n-                                       create_table_column_rules_in_db,\n-                                       create_table_rules_in_db,\n-                                       transform_to_rules,\n-                                       transform_to_table_rules,\n-                                       update_table_column_rule_patterns)\n+from helper.plugin_export_util import (\n+    create_pending_tickets,\n+    create_rules_in_db,\n+    create_table_column_rules_in_db,\n+    create_table_rules_in_db,\n+    transform_to_rules,\n+    transform_to_table_rules,\n+    update_table_column_rule_patterns,\n+)\n from helper.plugin_extraction_util import delete_table_rules_from_db\n from helper.rule_weight.rule_weight import update_weights\n from helper.table_extractors.table_draft_helper import get_table_draft\n from helper.tfidf_helper import handle_tfidf_v4_simple\n from logger import get_logger\n-from models import (FellowKVRegexes, FellowKVRule, FellowKVTableColumnRule,\n-                    FellowKVTableRule, TableFormattingRules, TfidfDocs)\n+from models import (\n+    FellowKVRegexes,\n+    FellowKVRule,\n+    FellowKVTableColumnRule,\n+    FellowKVTableRule,\n+    TableFormattingRules,\n+    TfidfDocs,\n+)\n \n logger = get_logger(\"fellowkv-export\")\n "
        },
        {
            "sha": "3303688289d41a57d024c155b8b8da46b6ab9aad",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -168,7 +168,9 @@ def get_similar_documents(threshold, record: TfidfDocs):  # , auto_types=[]\n \n     tfidf_query = tfidf_query.replace(\"\\n\", \"\")\n \n-    df1 = get_dataframe_from_query(os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query)  # , index_col='id')\n+    df1 = get_dataframe_from_query(\n+        os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query\n+    )  # , index_col='id')\n     logger.info(f\"Total TFIDF records found = {len(df1)}\")\n     # getting text and cleaning it\n     df1[\"clean_text\"] = df1[\"doc_text\"].pipe(hero.clean)\n@@ -279,7 +281,9 @@ def get_similar_documents_simple(document, threshold, source_record_id):\n         + where_clause\n         + \") order by sort_order asc, created_on desc\"\n     )\n-    df1 = get_dataframe_from_query(os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query)  # , index_col='id')\n+    df1 = get_dataframe_from_query(\n+        os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query\n+    )  # , index_col='id')\n \n     # getting text and cleaning it\n     df1[\"clean_text\"] = df1[\"doc_text\"].pipe(hero.clean)\n@@ -593,9 +597,9 @@ def handle_tfidf_v4_simple(document):\n     # document[\"filter_values\"] = [document[\"tfidf_id\"]]\n     return document\n \n+\n def get_dataframe_from_query(connection_string, query):\n     connection = create_engine(connection_string)\n     # df1 = pd.read_sql(sql=tfidf_query, con=os.getenv(\"SQLALCHEMY_DATABASE_AURI\"))\n-    df = pd.read_sql_query(con=connection.connect(), \n-                                  sql=sql_text(query))\n-    return df\n\\ No newline at end of file\n+    df = pd.read_sql_query(con=connection.connect(), sql=sql_text(query))\n+    return df"
        },
        {
            "sha": "d3b03b74e7776d49ea51b1fea0d0b5b3d5f992f6",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -168,7 +168,9 @@ def get_similar_documents(threshold, record: TfidfDocs):  # , auto_types=[]\n \n     tfidf_query = tfidf_query.replace(\"\\n\", \"\")\n \n-    df1 = get_dataframe_from_query(os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query)  # , index_col='id')\n+    df1 = get_dataframe_from_query(\n+        os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query\n+    )  # , index_col='id')\n     logger.info(f\"Total TFIDF records found = {len(df1)}\")\n     # getting text and cleaning it\n     df1[\"clean_text\"] = df1[\"doc_text\"].pipe(hero.clean)\n@@ -279,7 +281,9 @@ def get_similar_documents_simple(document, threshold, source_record_id):\n         + where_clause\n         + \") order by sort_order asc, created_on desc\"\n     )\n-    df1 = get_dataframe_from_query(os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query)  # , index_col='id')\n+    df1 = get_dataframe_from_query(\n+        os.getenv(\"SQLALCHEMY_DATABASE_AURI\"), tfidf_query\n+    )  # , index_col='id')\n \n     # getting text and cleaning it\n     df1[\"clean_text\"] = df1[\"doc_text\"].pipe(hero.clean)\n@@ -593,9 +597,9 @@ def handle_tfidf_v4_simple(document):\n     # document[\"filter_values\"] = [document[\"tfidf_id\"]]\n     return document\n \n+\n def get_dataframe_from_query(connection_string, query):\n     connection = create_engine(connection_string)\n     # df1 = pd.read_sql(sql=tfidf_query, con=os.getenv(\"SQLALCHEMY_DATABASE_AURI\"))\n-    df = pd.read_sql_query(con=connection.connect(), \n-                                  sql=sql_text(query))\n-    return df\n\\ No newline at end of file\n+    df = pd.read_sql_query(con=connection.connect(), sql=sql_text(query))\n+    return df"
        },
        {
            "sha": "7d4ec65e29f34c365249f8317fe6848c19fb8e13",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -14,21 +14,29 @@\n from sqlalchemy.sql.expression import text\n \n import constants\n+\n # from fellow2kv.extension import db, storagemanager\n-from constants import (AMOUNT_STANDARD_FIELDS, INVOICE_MAPPING,\n-                       MAX_FULL_TAX_RATE, MIN_FULL_TAX_RATE,\n-                       REVERSE_INVOICE_MAPPING)\n+from constants import (\n+    AMOUNT_STANDARD_FIELDS,\n+    INVOICE_MAPPING,\n+    MAX_FULL_TAX_RATE,\n+    MIN_FULL_TAX_RATE,\n+    REVERSE_INVOICE_MAPPING,\n+)\n from fellow2kv.extension import db, storagemanager\n from helper import db_helper as dbh\n from helper import generic_data_vault_helper as gdvh\n from helper import util as hutil\n-from helper.ai.ai_invoice import (transform_dict_to_array,\n-                                  transform_fields_to_dict)\n+from helper.ai.ai_invoice import transform_dict_to_array, transform_fields_to_dict\n+\n # from helper.document_extraction import model_extraction_helper as meh\n from helper.extract_util import Extractor\n from helper.tfidf_helper import get_all_similar_docs_above_threshold\n-from helper.util import (get_page, transform_from_normalized_coords_object,\n-                         transform_to_normalized)\n+from helper.util import (\n+    get_page,\n+    transform_from_normalized_coords_object,\n+    transform_to_normalized,\n+)\n from logger import get_logger\n from models import FellowKVRegexes, FellowKVSourceFile\n "
        },
        {
            "sha": "d6779780bc6cfe3d147be2856742976a17e337d9",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -9,18 +9,22 @@\n import pytz\n import requests\n from flask_dance.consumer.storage.sqla import OAuthConsumerMixin\n-#from itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n+\n+# from itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n from itsdangerous import BadSignature, SignatureExpired\n from itsdangerous import URLSafeTimedSerializer as Serializer\n+\n # import URLSafeTimedSerializer as Serializer\n from sqlalchemy.sql import func\n from sqlalchemy.sql.functions import current_user\n from werkzeug.security import check_password_hash, generate_password_hash\n \n import fellow2kv.config as app_config\n from fellow2kv.config import AUTH_SERVICE_URL\n+\n # from fellow2kv.app_initializer import db, ma\n from fellow2kv.extension import db\n+\n # from fellow2kv.extension import db, ma\n from logger import get_logger\n "
        }
    ]
}