{
    "author": "Muhammad Asad Usman Khan",
    "week": "2023-W07",
    "total_commits": 21,
    "author_image": "https://avatars.githubusercontent.com/u/83513548?v=4",
    "commits": [
        {
            "sha": "a67daeaa6ef3a979ca6192e1dd85854e9f244263",
            "message": "Merge pull request #765 from Fellow-Consulting-AG/sandbox\n\nSandbox",
            "code_changes": "@@ -37,7 +37,6 @@ def __init__(self, *args: object) -> None:\n \n class VerisonHandler:\n     def __init__(self, path, hotfix: bool = False) -> None:\n-\n         self.path = path\n         self.hotfix_enabled = hotfix\n "
        },
        {
            "sha": "d0d03868c2914c67c0e98c02f94344778df076fc",
            "message": "Merge branch 'prod' into sandbox",
            "code_changes": "@@ -111,3 +111,4 @@ jobs:\n           GHA_Meta: ${{ steps.output.outputs.new-version }}\n         env:\n           CCI_TOKEN: ${{ secrets.CCI_TOKEN }}\n+"
        },
        {
            "sha": "9c1a6d203299f401307779b4c18ace157d4e4d7e",
            "message": "Merge pull request #762 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -10,9 +10,11 @@\n from helper.extract_util import Extractor\n from helper.field_extractors.adjusted_coordinates import get_adjusted_coords\n from helper.form_extractor.fill_ratio import (\n-    get_fill_percentage_from_image_url, strip_box, strip_box_special)\n-from helper.util import (transform_from_normalized_coords_object,\n-                         transform_to_normalized)\n+    get_fill_percentage_from_image_url,\n+    strip_box,\n+    strip_box_special,\n+)\n+from helper.util import transform_from_normalized_coords_object, transform_to_normalized\n from logger.logger import get_logger\n \n logger = get_logger(\"fellowkv-deh\")\n@@ -28,7 +30,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n     fields_result = extract_checkbox_fields(\n-       user, document, layout, checkbox_fields, document_first_page\n+        user, document, layout, checkbox_fields, document_first_page\n     )\n \n     text_fields = [df for df in fields_to_extract if not df[\"field_type\"] == \"BOOLEAN\"]\n@@ -127,8 +129,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n     for index, checkbox_field in enumerate(checkbox_fields):\n         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]\n         field_type = checkbox_field[\"field_type\"]\n-        if not checkbox_field.get(\"tr_ocr_model_id\",None):\n-            checkbox_field[\"tr_ocr_model_id\"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'\n+        if not checkbox_field.get(\"tr_ocr_model_id\", None):\n+            checkbox_field[\"tr_ocr_model_id\"] = \"5a3e526f-371a-470b-aacd-75460c0b8a16\"\n         field_name = checkbox_field[\"field_name\"]\n         adjusted_coords = checkbox_field[\"adjusted_coords\"]\n         coords = transform_to_normalized(\n@@ -155,7 +157,7 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n             \"validation_message\": \"\",\n             \"threshold\": threshold,\n             \"type\": field_type,\n-            \"tr_ocr_model_id\": checkbox_field[\"tr_ocr_model_id\"]\n+            \"tr_ocr_model_id\": checkbox_field[\"tr_ocr_model_id\"],\n         }\n         fields.append(field)\n     return fields\n@@ -349,8 +351,10 @@ def populate_tr_ocr_info(document, field_results):\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n \n-            is_checkbox_field = (field.get(\"field_type\",None) == \"BOOLEAN\")\n-            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)\n+            is_checkbox_field = field.get(\"field_type\", None) == \"BOOLEAN\"\n+            adjusted_coords = get_trocr_adjusted_coords(\n+                field, page_image, is_checkbox_field\n+            )\n             if not adjusted_coords:\n                 field[\"adjusted_coords\"] = None\n                 field.pop(\"confidence\", None)\n@@ -377,9 +381,13 @@ def populate_tr_ocr_info(document, field_results):\n \n def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):\n     if is_checkbox_field:\n-        strip_dim = 0,0,0,0\n+        strip_dim = 0, 0, 0, 0\n         return trocr_common.readjust_coordinates(\n-            page_image, field_data[\"adjusted_coords\"], strip_dim, v_padding=5, h_padding=5\n+            page_image,\n+            field_data[\"adjusted_coords\"],\n+            strip_dim,\n+            v_padding=5,\n+            h_padding=5,\n         )\n \n     field_cropped_image = trocr_common.get_image_from_coords("
        },
        {
            "sha": "9c97353ffbda350e7b736cd4d94e08e49f75fa11",
            "message": "Merge pull request #761 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -1,17 +1,25 @@\n+import datetime\n import json\n+import shutil\n+import tempfile\n+import time\n import urllib\n+from datetime import datetime\n from shutil import copyfile\n \n import fitz\n import requests\n+from flask_sqlalchemy import SQLAlchemy\n+from PIL import ImageFont\n \n # from fellow2kv.extension import db, storagemanager\n from authenticator import UserAuthentication\n from fellow2kv.config import OCR_SERVER_URL\n-from flask_sqlalchemy import SQLAlchemy\n+from fellow2kv.extension import db, storagemanager_doc2\n+from helper import generic_data_vault_helper as gdvh\n+from helper import pdf as pdf_helper\n+from logger import get_logger\n from logger.logger import get_logger\n-from PIL import ImageFont\n-\n from util import sync_wrapper\n \n # from cloudintegration.core.users.models import Users\n@@ -255,3 +263,70 @@ def page_digitally_created(page):\n         page_type = \"Digitally created\"\n         return True\n     return page_type\n+\n+@sync_wrapper(module=\"ocr\")\n+def ocr_document(\n+    user, doc_path_pre_ocr, output_path, force_ocr, improve_quality, resp_json\n+):\n+    # removed extract_tables condition\n+    # copy the pre ocr file as active file\n+\n+    # no use force ocr if doc is already ocred by doc2\n+    try:\n+        with tempfile.NamedTemporaryFile(suffix=\".pdf\") as of:\n+            storagemanager_doc2.download_file_on_stream(of, doc_path_pre_ocr)\n+            shutil.copy(of.name, output_path)\n+    except Exception as ex:\n+        # pre ocr file is missing. copying current file as pre ocr file\n+        storagemanager_doc2.save_file(output_path, doc_path_pre_ocr, None)\n+        pass\n+\n+    preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json)\n+\n+    # storagemanager_doc2.save_file(output_path, doc_path, None)\n+\n+@sync_wrapper(module=\"ocr\")\n+def preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json):\n+    org_id = user.get_org_id()\n+    use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n+    deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    try:\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+    except Exception as ex:\n+        logger.error(ex)\n+        pass\n+\n+    start_time = datetime.now()\n+    flow_meta = \"ocr_by_fellow\"\n+    get_ocred_document(\n+        user,\n+        output_path,\n+        output_path,\n+        force_ocr,\n+        improve_quality=improve_quality,\n+    )\n+    # storagemanager_doc2.save_file(output_path, doc_path, None)\n+    end_time = datetime.now()\n+    if \"time_logs\" not in resp_json:\n+        resp_json[\"time_logs\"] = {}\n+    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+        (end_time - start_time).total_seconds()\n+    )\n+\n+    if \"ocr_processor\" in resp_json:\n+        ocr_module = resp_json[\"ocr_processor\"]\n+    else:\n+        ocr_module = \"OCR Server\"\n+\n+    if \"flow_meta\" not in resp_json:\n+        resp_json[\"flow_meta\"] = []\n+    resp_json[\"flow_meta\"].append(\n+        {\n+            \"name\": flow_meta,\n+            \"type\": \"ocr\",\n+            \"data\": \"true\",\n+            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+            \"module\": \"ocr\",\n+            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+        }\n+    )\n\\ No newline at end of file"
        },
        {
            "sha": "a448a0351956439ce1aab50f884193088ac05c98",
            "message": "fd",
            "code_changes": "@@ -1,17 +1,25 @@\n+import datetime\n import json\n+import shutil\n+import tempfile\n+import time\n import urllib\n+from datetime import datetime\n from shutil import copyfile\n \n import fitz\n import requests\n+from flask_sqlalchemy import SQLAlchemy\n+from PIL import ImageFont\n \n # from fellow2kv.extension import db, storagemanager\n from authenticator import UserAuthentication\n from fellow2kv.config import OCR_SERVER_URL\n-from flask_sqlalchemy import SQLAlchemy\n+from fellow2kv.extension import db, storagemanager_doc2\n+from helper import generic_data_vault_helper as gdvh\n+from helper import pdf as pdf_helper\n+from logger import get_logger\n from logger.logger import get_logger\n-from PIL import ImageFont\n-\n from util import sync_wrapper\n \n # from cloudintegration.core.users.models import Users\n@@ -255,3 +263,70 @@ def page_digitally_created(page):\n         page_type = \"Digitally created\"\n         return True\n     return page_type\n+\n+@sync_wrapper(module=\"ocr\")\n+def ocr_document(\n+    user, doc_path_pre_ocr, output_path, force_ocr, improve_quality, resp_json\n+):\n+    # removed extract_tables condition\n+    # copy the pre ocr file as active file\n+\n+    # no use force ocr if doc is already ocred by doc2\n+    try:\n+        with tempfile.NamedTemporaryFile(suffix=\".pdf\") as of:\n+            storagemanager_doc2.download_file_on_stream(of, doc_path_pre_ocr)\n+            shutil.copy(of.name, output_path)\n+    except Exception as ex:\n+        # pre ocr file is missing. copying current file as pre ocr file\n+        storagemanager_doc2.save_file(output_path, doc_path_pre_ocr, None)\n+        pass\n+\n+    preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json)\n+\n+    # storagemanager_doc2.save_file(output_path, doc_path, None)\n+\n+@sync_wrapper(module=\"ocr\")\n+def preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json):\n+    org_id = user.get_org_id()\n+    use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n+    deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    try:\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+    except Exception as ex:\n+        logger.error(ex)\n+        pass\n+\n+    start_time = datetime.now()\n+    flow_meta = \"ocr_by_fellow\"\n+    get_ocred_document(\n+        user,\n+        output_path,\n+        output_path,\n+        force_ocr,\n+        improve_quality=improve_quality,\n+    )\n+    # storagemanager_doc2.save_file(output_path, doc_path, None)\n+    end_time = datetime.now()\n+    if \"time_logs\" not in resp_json:\n+        resp_json[\"time_logs\"] = {}\n+    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+        (end_time - start_time).total_seconds()\n+    )\n+\n+    if \"ocr_processor\" in resp_json:\n+        ocr_module = resp_json[\"ocr_processor\"]\n+    else:\n+        ocr_module = \"OCR Server\"\n+\n+    if \"flow_meta\" not in resp_json:\n+        resp_json[\"flow_meta\"] = []\n+    resp_json[\"flow_meta\"].append(\n+        {\n+            \"name\": flow_meta,\n+            \"type\": \"ocr\",\n+            \"data\": \"true\",\n+            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+            \"module\": \"ocr\",\n+            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+        }\n+    )\n\\ No newline at end of file"
        },
        {
            "sha": "000c41ae5620eb4dca7d19befd0a1b59f914a03b",
            "message": "Merge pull request #756 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -9,12 +9,16 @@\n import traceback\n from datetime import datetime\n \n+from flask import jsonify, request, send_file\n+from flask_restx import Namespace, Resource, abort\n+from werkzeug.datastructures import FileStorage\n+\n import constants\n import helper.ocr as ocr_helper\n from authenticator import UserAuthentication\n-from fellow2kv.extension import api, db, multi_auth, storagemanager, storagemanager_doc2\n-from flask import jsonify, request, send_file\n-from flask_restx import Namespace, Resource, abort\n+from fellow2kv.extension import (api, db, multi_auth, storagemanager,\n+                                 storagemanager_doc2)\n+\n from helper import doc_type_helper as dth\n from helper import generic_data_vault_helper as gdvh\n from helper import pdf as pdf_helper\n@@ -30,7 +34,6 @@\n )\n from logger import get_logger\n from util import sync_wrapper\n-from werkzeug.datastructures import FileStorage\n \n logger = get_logger()\n \n@@ -283,39 +286,6 @@ def post(self):\n                         }\n                     )\n \n-                \"\"\"if (\n-                    False\n-                    and extract_tables\n-                    and (\n-                        not sent_to_ocr_server\n-                        and document.get(\"tfidf_force_ocr\", False)\n-                    )\n-                ):\n-                    start_time = datetime.now()\n-                    try:\n-                        with tempfile.NamedTemporaryFile(suffix=\".pdf\") as of:\n-                            storagemanager_doc2.download_file_on_stream(\n-                                of, doc_path_pre_ocr\n-                            )\n-                            f.write(of.read())\n-                            f.seek(0)\n-                    except Exception as ex:\n-                        logger.exception(f'An Error occurred. Message: {ex}')\n-                        # pre ocr file is missing. copying current file as pre ocr file\n-                        storagemanager_doc2.save_file(\n-                            f.name, doc_path_pre_ocr, None\n-                        )\n-                        pass\n-\n-                    ocr_helper.get_ocred_document(user, f.name, f.name, True)\n-                    storagemanager_doc2.save_file(f.name, doc_path, None)\n-\n-                    end_time = datetime.now()\n-                    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-                        (end_time - start_time).total_seconds()\n-                    )\n-                \"\"\"\n-\n                 # populates, doctype, locale and images from ai_document\n                 deh.populate_basic_info(document, resp_json)\n \n@@ -807,11 +777,12 @@ def post(self):\n             doc_id = request.form.get(\"doc_id\", 1)\n             destination_dir = f\"{doc2_base_directory}/{doc_id}\"\n             doc_storage = request.form.get(\"doc_storage\", None)\n-            file_path = f\"documents/{doc_id}/{doc_id}.pdf\"\n+            file_path = f\"{destination_dir}/{doc_id}.pdf\"\n+            doc_path_pre_ocr = file_path.replace(\".pdf\", \"_pre_ocr.pdf\")\n             force_ocr = request.form.get(\"force_ocr\", \"false\")\n             force_ocr = True if force_ocr.lower() in [\"true\", \"1\"] else False\n             if doc_storage and doc_storage == \"fellowkv\":\n-                file_path = f\"documents/{doc_id}.pdf\"\n+                file_path = f\"{doc2_base_directory}/{doc_id}.pdf\"\n             with tempfile.NamedTemporaryFile(suffix=\".pdf\", mode=\"wb\") as ufile:\n                 try:\n                     if (\n@@ -828,16 +799,15 @@ def post(self):\n \n                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)\n                 # force_ocr = False\n-                if doc_already_ocred:\n-                    ocr_text = ocr_helper.get_ocr_text(ufile.name)\n-                    # res = re.findall(r'(?i)natus\\s?gmbh', ocr_text.replace(\"\\n\", \" \"), overlapped=True)\n-                    # if \"\ufffd\ufffd\ufffd\" in ocr_text:  # or (res != None and len(res) > 0):\n-                    #     force_ocr = True\n-                if not doc_already_ocred or force_ocr:\n-                    ocr_helper.get_ocred_document(\n-                        user, ufile.name, ufile.name, force_ocr\n+                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):\n+                    ocr_document(\n+                        user,\n+                        doc_path_pre_ocr,\n+                        ufile.name,\n+                        force_ocr,\n+                        False,\n+                        {},\n                     )\n-                    ufile.seek(0)\n                     storagemanager_doc2.save_file(\n                         ufile.name, doc_id + \".pdf\", destination_dir\n                     )\n@@ -939,6 +909,8 @@ def ocr_document(\n     )\n     # storagemanager_doc2.save_file(output_path, doc_path, None)\n     end_time = datetime.now()\n+    if \"time_logs\" not in resp_json:\n+        resp_json[\"time_logs\"] = {}\n     resp_json[\"time_logs\"][\"ocr_document\"] = str(\n         (end_time - start_time).total_seconds()\n     )\n@@ -948,6 +920,8 @@ def ocr_document(\n     else:\n         ocr_module = \"OCR Server\"\n \n+    if \"flow_meta\" not in resp_json:\n+        resp_json[\"flow_meta\"] = []\n     resp_json[\"flow_meta\"].append(\n         {\n             \"name\": flow_meta,"
        },
        {
            "sha": "06034c3344d5d0d916f2c51f8f935e4cf30f6ba1",
            "message": "Merge pull request #755 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -9,12 +9,16 @@\n import traceback\n from datetime import datetime\n \n+from flask import jsonify, request, send_file\n+from flask_restx import Namespace, Resource, abort\n+from werkzeug.datastructures import FileStorage\n+\n import constants\n import helper.ocr as ocr_helper\n from authenticator import UserAuthentication\n-from fellow2kv.extension import api, db, multi_auth, storagemanager, storagemanager_doc2\n-from flask import jsonify, request, send_file\n-from flask_restx import Namespace, Resource, abort\n+from fellow2kv.extension import (api, db, multi_auth, storagemanager,\n+                                 storagemanager_doc2)\n+\n from helper import doc_type_helper as dth\n from helper import generic_data_vault_helper as gdvh\n from helper import pdf as pdf_helper\n@@ -30,7 +34,6 @@\n )\n from logger import get_logger\n from util import sync_wrapper\n-from werkzeug.datastructures import FileStorage\n \n logger = get_logger()\n \n@@ -283,39 +286,6 @@ def post(self):\n                         }\n                     )\n \n-                \"\"\"if (\n-                    False\n-                    and extract_tables\n-                    and (\n-                        not sent_to_ocr_server\n-                        and document.get(\"tfidf_force_ocr\", False)\n-                    )\n-                ):\n-                    start_time = datetime.now()\n-                    try:\n-                        with tempfile.NamedTemporaryFile(suffix=\".pdf\") as of:\n-                            storagemanager_doc2.download_file_on_stream(\n-                                of, doc_path_pre_ocr\n-                            )\n-                            f.write(of.read())\n-                            f.seek(0)\n-                    except Exception as ex:\n-                        logger.exception(f'An Error occurred. Message: {ex}')\n-                        # pre ocr file is missing. copying current file as pre ocr file\n-                        storagemanager_doc2.save_file(\n-                            f.name, doc_path_pre_ocr, None\n-                        )\n-                        pass\n-\n-                    ocr_helper.get_ocred_document(user, f.name, f.name, True)\n-                    storagemanager_doc2.save_file(f.name, doc_path, None)\n-\n-                    end_time = datetime.now()\n-                    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-                        (end_time - start_time).total_seconds()\n-                    )\n-                \"\"\"\n-\n                 # populates, doctype, locale and images from ai_document\n                 deh.populate_basic_info(document, resp_json)\n \n@@ -807,11 +777,12 @@ def post(self):\n             doc_id = request.form.get(\"doc_id\", 1)\n             destination_dir = f\"{doc2_base_directory}/{doc_id}\"\n             doc_storage = request.form.get(\"doc_storage\", None)\n-            file_path = f\"documents/{doc_id}/{doc_id}.pdf\"\n+            file_path = f\"{destination_dir}/{doc_id}.pdf\"\n+            doc_path_pre_ocr = file_path.replace(\".pdf\", \"_pre_ocr.pdf\")\n             force_ocr = request.form.get(\"force_ocr\", \"false\")\n             force_ocr = True if force_ocr.lower() in [\"true\", \"1\"] else False\n             if doc_storage and doc_storage == \"fellowkv\":\n-                file_path = f\"documents/{doc_id}.pdf\"\n+                file_path = f\"{doc2_base_directory}/{doc_id}.pdf\"\n             with tempfile.NamedTemporaryFile(suffix=\".pdf\", mode=\"wb\") as ufile:\n                 try:\n                     if (\n@@ -828,16 +799,15 @@ def post(self):\n \n                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)\n                 # force_ocr = False\n-                if doc_already_ocred:\n-                    ocr_text = ocr_helper.get_ocr_text(ufile.name)\n-                    # res = re.findall(r'(?i)natus\\s?gmbh', ocr_text.replace(\"\\n\", \" \"), overlapped=True)\n-                    # if \"\ufffd\ufffd\ufffd\" in ocr_text:  # or (res != None and len(res) > 0):\n-                    #     force_ocr = True\n-                if not doc_already_ocred or force_ocr:\n-                    ocr_helper.get_ocred_document(\n-                        user, ufile.name, ufile.name, force_ocr\n+                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):\n+                    ocr_document(\n+                        user,\n+                        doc_path_pre_ocr,\n+                        ufile.name,\n+                        force_ocr,\n+                        False,\n+                        {},\n                     )\n-                    ufile.seek(0)\n                     storagemanager_doc2.save_file(\n                         ufile.name, doc_id + \".pdf\", destination_dir\n                     )\n@@ -939,6 +909,8 @@ def ocr_document(\n     )\n     # storagemanager_doc2.save_file(output_path, doc_path, None)\n     end_time = datetime.now()\n+    if \"time_logs\" not in resp_json:\n+        resp_json[\"time_logs\"] = {}\n     resp_json[\"time_logs\"][\"ocr_document\"] = str(\n         (end_time - start_time).total_seconds()\n     )\n@@ -948,6 +920,8 @@ def ocr_document(\n     else:\n         ocr_module = \"OCR Server\"\n \n+    if \"flow_meta\" not in resp_json:\n+        resp_json[\"flow_meta\"] = []\n     resp_json[\"flow_meta\"].append(\n         {\n             \"name\": flow_meta,"
        },
        {
            "sha": "cc9c27b5b7f7f72b748cb3b42b66dbb809d81d7d",
            "message": "Merge branch 'stage' into dev",
            "code_changes": "@@ -17,8 +17,10 @@\n \n import fellow2kv.config as app_config\n from fellow2kv.config import AUTH_SERVICE_URL\n+\n # from fellow2kv.app_initializer import db, ma\n from fellow2kv.extension import db\n+\n # from fellow2kv.extension import db, ma\n from logger import get_logger\n \n@@ -195,7 +197,10 @@ def check_for_app_authorization(self, app_key, quota=1):\n             if current_date > sub_end_date:\n                 return -1\n \n-            if app_config.ENFORCE_QUOTA and int(float(found_app[\"pending_credit\"])) < quota:\n+            if (\n+                app_config.ENFORCE_QUOTA\n+                and int(float(found_app[\"pending_credit\"])) < quota\n+            ):\n                 return -2\n \n             return 1\n@@ -256,8 +261,10 @@ def update_usage_log(self, app_key, quota_used=1, method_used=None):\n         :return: A list of dictionaries. Each dictionary is a question.\n         \"\"\"\n         return self.__update_usage_log(app_key, quota_used, None, method_used)\n-       \n-    def update_classification_usage_log(self, app_key, classification_quota_used=1, method_used=None):\n+\n+    def update_classification_usage_log(\n+        self, app_key, classification_quota_used=1, method_used=None\n+    ):\n         \"\"\"\n         It updates the usage log of the app\n \n@@ -266,10 +273,13 @@ def update_classification_usage_log(self, app_key, classification_quota_used=1,\n         :param method_used: The method that was used to consume the quota\n         :return: A list of dictionaries. Each dictionary is a question.\n         \"\"\"\n-        return self.__update_usage_log(app_key, None, classification_quota_used, method_used)\n-      \n+        return self.__update_usage_log(\n+            app_key, None, classification_quota_used, method_used\n+        )\n \n-    def __update_usage_log(self, app_key, credit_used=None, classification_credit_used=None, method=None):#\n+    def __update_usage_log(\n+        self, app_key, credit_used=None, classification_credit_used=None, method=None\n+    ):  #\n         if not self.get_subscription_token():\n             return False\n \n@@ -280,10 +290,18 @@ def __update_usage_log(self, app_key, credit_used=None, classification_credit_us\n                 filtered_app = filtered_app[0]\n \n             if filtered_app and credit_used and credit_used > 0:\n-                filtered_app[\"pending_credit\"] = Decimal(filtered_app[\"pending_credit\"]) - Decimal(credit_used)\n-            \n-            if filtered_app and classification_credit_used and classification_credit_used > 0:\n-                filtered_app[\"pending_credit\"] = Decimal(filtered_app[\"pending_credit\"]) - Decimal(classification_credit_used)\n+                filtered_app[\"pending_credit\"] = Decimal(\n+                    filtered_app[\"pending_credit\"]\n+                ) - Decimal(credit_used)\n+\n+            if (\n+                filtered_app\n+                and classification_credit_used\n+                and classification_credit_used > 0\n+            ):\n+                filtered_app[\"pending_credit\"] = Decimal(\n+                    filtered_app[\"pending_credit\"]\n+                ) - Decimal(classification_credit_used)\n \n         try:\n             headers = {\"Authorization\": \"Bearer \" + self.get_subscription_token()}"
        },
        {
            "sha": "680d0597fb2e0d1dc3862d8df1a22f0700cb3579",
            "message": "fd",
            "code_changes": "@@ -796,10 +796,6 @@ def post(self):\n                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)\n                 # force_ocr = False\n                 if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):\n-                    ocr_helper.get_ocred_document(\n-                        user, ufile.name, ufile.name, force_ocr\n-                    )\n-                    ufile.seek(0)\n                     ocr_document(\n                         user,\n                         doc_path_pre_ocr,"
        },
        {
            "sha": "34bcaaf4233e20a7676a715b642b07ba55853c6b",
            "message": "fd",
            "code_changes": "@@ -9,13 +9,15 @@\n import traceback\n from datetime import datetime\n \n+from flask import jsonify, request, send_file\n+from flask_restx import Namespace, Resource, abort\n+from werkzeug.datastructures import FileStorage\n+\n import constants\n import helper.ocr as ocr_helper\n from authenticator import UserAuthentication\n from fellow2kv.extension import (api, db, multi_auth, storagemanager,\n                                  storagemanager_doc2)\n-from flask import jsonify, request, send_file\n-from flask_restx import Namespace, Resource, abort\n from helper import doc_type_helper as dth\n from helper import generic_data_vault_helper as gdvh\n from helper import pdf as pdf_helper\n@@ -28,7 +30,6 @@\n                          transform_to_normalized)\n from logger import get_logger\n from util import sync_wrapper\n-from werkzeug.datastructures import FileStorage\n \n logger = get_logger()\n \n@@ -281,39 +282,6 @@ def post(self):\n                         }\n                     )\n \n-                \"\"\"if (\n-                    False\n-                    and extract_tables\n-                    and (\n-                        not sent_to_ocr_server\n-                        and document.get(\"tfidf_force_ocr\", False)\n-                    )\n-                ):\n-                    start_time = datetime.now()\n-                    try:\n-                        with tempfile.NamedTemporaryFile(suffix=\".pdf\") as of:\n-                            storagemanager_doc2.download_file_on_stream(\n-                                of, doc_path_pre_ocr\n-                            )\n-                            f.write(of.read())\n-                            f.seek(0)\n-                    except Exception as ex:\n-                        logger.exception(f'An Error occurred. Message: {ex}')\n-                        # pre ocr file is missing. copying current file as pre ocr file\n-                        storagemanager_doc2.save_file(\n-                            f.name, doc_path_pre_ocr, None\n-                        )\n-                        pass\n-\n-                    ocr_helper.get_ocred_document(user, f.name, f.name, True)\n-                    storagemanager_doc2.save_file(f.name, doc_path, None)\n-\n-                    end_time = datetime.now()\n-                    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-                        (end_time - start_time).total_seconds()\n-                    )\n-                \"\"\"\n-\n                 # populates, doctype, locale and images from ai_document\n                 deh.populate_basic_info(document, resp_json)\n \n@@ -805,11 +773,12 @@ def post(self):\n             doc_id = request.form.get(\"doc_id\", 1)\n             destination_dir = f\"{doc2_base_directory}/{doc_id}\"\n             doc_storage = request.form.get(\"doc_storage\", None)\n-            file_path = f\"documents/{doc_id}/{doc_id}.pdf\"\n+            file_path = f\"{destination_dir}/{doc_id}.pdf\"\n+            doc_path_pre_ocr = file_path.replace(\".pdf\", \"_pre_ocr.pdf\")\n             force_ocr = request.form.get(\"force_ocr\", \"false\")\n             force_ocr = True if force_ocr.lower() in [\"true\", \"1\"] else False\n             if doc_storage and doc_storage == \"fellowkv\":\n-                file_path = f\"documents/{doc_id}.pdf\"\n+                file_path = f\"{doc2_base_directory}/{doc_id}.pdf\"\n             with tempfile.NamedTemporaryFile(suffix=\".pdf\", mode=\"wb\") as ufile:\n                 try:\n                     if (\n@@ -826,16 +795,19 @@ def post(self):\n \n                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)\n                 # force_ocr = False\n-                if doc_already_ocred:\n-                    ocr_text = ocr_helper.get_ocr_text(ufile.name)\n-                    # res = re.findall(r'(?i)natus\\s?gmbh', ocr_text.replace(\"\\n\", \" \"), overlapped=True)\n-                    # if \"\ufffd\ufffd\ufffd\" in ocr_text:  # or (res != None and len(res) > 0):\n-                    #     force_ocr = True\n-                if not doc_already_ocred or force_ocr:\n+                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):\n                     ocr_helper.get_ocred_document(\n                         user, ufile.name, ufile.name, force_ocr\n                     )\n                     ufile.seek(0)\n+                    ocr_document(\n+                        user,\n+                        doc_path_pre_ocr,\n+                        ufile.name,\n+                        force_ocr,\n+                        False,\n+                        {},\n+                    )\n                     storagemanager_doc2.save_file(\n                         ufile.name, doc_id + \".pdf\", destination_dir\n                     )\n@@ -937,6 +909,8 @@ def ocr_document(\n     )\n     # storagemanager_doc2.save_file(output_path, doc_path, None)\n     end_time = datetime.now()\n+    if \"time_logs\" not in resp_json:\n+        resp_json[\"time_logs\"] = {}\n     resp_json[\"time_logs\"][\"ocr_document\"] = str(\n         (end_time - start_time).total_seconds()\n     )\n@@ -946,6 +920,8 @@ def ocr_document(\n     else:\n         ocr_module = \"OCR Server\"\n \n+    if \"flow_meta\" not in resp_json:\n+        resp_json[\"flow_meta\"] = []\n     resp_json[\"flow_meta\"].append(\n         {\n             \"name\": flow_meta,"
        },
        {
            "sha": "5ab3d3c54d0c09c0d867e4b36b97c5604d967673",
            "message": "Merge pull request #754 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -91,6 +91,8 @@ def get_document_tables(org_id, doc_type):\n     \"hide_label\",\n     \"placeholder\",\n     \"is_sub_doc_type_field\",\n+    \"enforce_list_of_values\",\n+    \"list_of_values\",\n ]\n \n \n@@ -317,7 +319,7 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type\n             for i in range(row_order - len(rows)):\n                 rows.append([])\n         if row_order != None:\n-            if field.get(\"field_type\",'') == \"CURRENCY\":\n+            if field.get(\"field_type\", \"\") == \"CURRENCY\":\n                 field[\"enforce_list_of_values\"] = True\n                 field[\"list_of_values\"] = \"ISO_Currency\"\n             rows[row_order - 1].append(field)"
        },
        {
            "sha": "f6603f7c6d2487c16248f5f707c985e8de629bbb",
            "message": "Merge pull request #753 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -91,6 +91,8 @@ def get_document_tables(org_id, doc_type):\n     \"hide_label\",\n     \"placeholder\",\n     \"is_sub_doc_type_field\",\n+    \"enforce_list_of_values\",\n+    \"list_of_values\",\n ]\n \n "
        },
        {
            "sha": "5dfba729db8a45f6ce6cf4133974052a514b71dd",
            "message": "fd",
            "code_changes": "@@ -91,6 +91,8 @@ def get_document_tables(org_id, doc_type):\n     \"hide_label\",\n     \"placeholder\",\n     \"is_sub_doc_type_field\",\n+    \"enforce_list_of_values\",\n+    \"list_of_values\",\n ]\n \n "
        },
        {
            "sha": "d5a30e332655c15cbcc20414928b9afe2eda29d1",
            "message": "Merge pull request #752 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -1,9 +1,10 @@\n from collections import defaultdict\n \n+from sqlalchemy import or_\n+\n from fellow2kv.extension import db\n from helper.doc_type_helper import get_document_types\n from models import DocumentType, SubDocumentType\n-from sqlalchemy import or_\n \n \n def get_document_fields_info(org_id, doc_type, sub_doc_type):\n@@ -316,6 +317,9 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type\n             for i in range(row_order - len(rows)):\n                 rows.append([])\n         if row_order != None:\n+            if field.get(\"field_type\",'') == \"CURRENCY\":\n+                field[\"enforce_list_of_values\"] = True\n+                field[\"list_of_values\"] = \"ISO_Currency\"\n             rows[row_order - 1].append(field)\n \n     for grp in groups:"
        },
        {
            "sha": "8efbf52ca722316287bda61d1dabf9409d245859",
            "message": "Merge pull request #751 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -1,9 +1,10 @@\n from collections import defaultdict\n \n+from sqlalchemy import or_\n+\n from fellow2kv.extension import db\n from helper.doc_type_helper import get_document_types\n from models import DocumentType, SubDocumentType\n-from sqlalchemy import or_\n \n \n def get_document_fields_info(org_id, doc_type, sub_doc_type):\n@@ -316,6 +317,9 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type\n             for i in range(row_order - len(rows)):\n                 rows.append([])\n         if row_order != None:\n+            if field.get(\"field_type\",'') == \"CURRENCY\":\n+                field[\"enforce_list_of_values\"] = True\n+                field[\"list_of_values\"] = \"ISO_Currency\"\n             rows[row_order - 1].append(field)\n \n     for grp in groups:"
        },
        {
            "sha": "66231c0916ee0b730fd209b41add6c3df892bc64",
            "message": "fd",
            "code_changes": "@@ -1,9 +1,10 @@\n from collections import defaultdict\n \n+from sqlalchemy import or_\n+\n from fellow2kv.extension import db\n from helper.doc_type_helper import get_document_types\n from models import DocumentType, SubDocumentType\n-from sqlalchemy import or_\n \n \n def get_document_fields_info(org_id, doc_type, sub_doc_type):\n@@ -316,6 +317,9 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type\n             for i in range(row_order - len(rows)):\n                 rows.append([])\n         if row_order != None:\n+            if field.get(\"field_type\",'') == \"CURRENCY\":\n+                field[\"enforce_list_of_values\"] = True\n+                field[\"list_of_values\"] = \"ISO_Currency\"\n             rows[row_order - 1].append(field)\n \n     for grp in groups:"
        },
        {
            "sha": "c8a5ed28f0c7baa583b9cc68c51dfc8fea92f8c2",
            "message": "Merge pull request #750 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -4,15 +4,15 @@\n def get_lov_values(org_id, key):\n     query = f\"\"\"\n         Select\n-            value\n+            value, org_id\n         From\n             lov_list_of_value llov\n         Where\n-            llov.org_id ilike '{org_id}'\n+            llov.org_id in ('{org_id}','DEFAULT')\n             and llov.key ilike '{key}'\n             and llov.is_deleted = false\n     \"\"\"\n     results = db.engine.execute(query)\n     results_list = [dict(r) for r in results]\n     values_list = [r[\"value\"] for r in results_list]\n-    return values_list\n+    return results_list"
        },
        {
            "sha": "20f0ee0888166cc20129ae50fe3008d2990f31d2",
            "message": "Merge branch 'sandbox' into stage",
            "code_changes": ""
        },
        {
            "sha": "db3ca068d2c885deaaca6322f119fad2a5772d46",
            "message": "Merge pull request #749 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -4,15 +4,15 @@\n def get_lov_values(org_id, key):\n     query = f\"\"\"\n         Select\n-            value\n+            value, org_id\n         From\n             lov_list_of_value llov\n         Where\n-            llov.org_id ilike '{org_id}'\n+            llov.org_id in ('{org_id}','DEFAULT')\n             and llov.key ilike '{key}'\n             and llov.is_deleted = false\n     \"\"\"\n     results = db.engine.execute(query)\n     results_list = [dict(r) for r in results]\n     values_list = [r[\"value\"] for r in results_list]\n-    return values_list\n+    return results_list"
        },
        {
            "sha": "f3007fb2e267b3ac7e72ddcbad55c556e1e67512",
            "message": "fd",
            "code_changes": "@@ -4,15 +4,15 @@\n def get_lov_values(org_id, key):\n     query = f\"\"\"\n         Select\n-            value\n+            value, org_id\n         From\n             lov_list_of_value llov\n         Where\n-            llov.org_id ilike '{org_id}'\n+            llov.org_id in ('{org_id}','DEFAULT')\n             and llov.key ilike '{key}'\n             and llov.is_deleted = false\n     \"\"\"\n     results = db.engine.execute(query)\n     results_list = [dict(r) for r in results]\n     values_list = [r[\"value\"] for r in results_list]\n-    return values_list\n+    return results_list"
        },
        {
            "sha": "7fe528a752c2e5b49aa8921b90eaf0081db90e4c",
            "message": "fd",
            "code_changes": "@@ -5,20 +5,16 @@\n from enum import Enum\n from operator import or_\n \n-from authenticator import UserAuthentication\n-from fellow2kv.extension import api, db, multi_auth\n from flask import request\n from flask_restx import Namespace, Resource, abort\n+\n+from authenticator import UserAuthentication\n+from fellow2kv.extension import api, db, multi_auth\n from helper import util\n from helper.layout import layout_fields_helper as lfh\n from logger import get_logger\n-from models import (\n-    AlchemyEncoder,\n-    ColumnValidationRules,\n-    DocumentTable,\n-    DocumentTableColumn,\n-    DocumentType,\n-)\n+from models import (AlchemyEncoder, ColumnValidationRules, DocumentTable,\n+                    DocumentTableColumn, DocumentType)\n \n logger = get_logger(\"document_table_settings\")\n \n@@ -144,7 +140,8 @@ def get(self):\n                     when cvr.id is not null then cvr.is_hidden\n                     else dcvr.is_hidden\n                 end as is_hidden,\n-                dtc.org_id\n+                dtc.org_id,\n+                dtc.column_type\n \n             from\n                 document_table dt"
        }
    ]
}