{
    "author": "Lint Action",
    "week": "2023-W07",
    "total_commits": 8,
    "author_image": "https://avatars.githubusercontent.com/u/59283862?v=4",
    "commits": [
        {
            "sha": "ecec14597cf75d8009164e695e030b27d4c4ef7b",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -17,8 +17,10 @@\n \n import fellow2kv.config as app_config\n from fellow2kv.config import AUTH_SERVICE_URL\n+\n # from fellow2kv.app_initializer import db, ma\n from fellow2kv.extension import db\n+\n # from fellow2kv.extension import db, ma\n from logger import get_logger\n \n@@ -195,12 +197,10 @@ def check_for_app_authorization(self, app_key, quota=1):\n             if current_date > sub_end_date:\n                 return -1\n \n-\n             if (\n                 app_config.ENFORCE_QUOTA\n                 and int(float(found_app[\"pending_credit\"])) < quota\n             ):\n-\n                 return -2\n \n             return 1\n@@ -265,7 +265,6 @@ def update_usage_log(self, app_key, quota_used=1, method_used=None):\n     def update_classification_usage_log(\n         self, app_key, classification_quota_used=1, method_used=None\n     ):\n-\n         \"\"\"\n         It updates the usage log of the app\n \n@@ -282,7 +281,6 @@ def update_classification_usage_log(\n     def __update_usage_log(\n         self, app_key, credit_used=None, classification_credit_used=None, method=None\n     ):  #\n-\n         if not self.get_subscription_token():\n             return False\n \n@@ -306,7 +304,6 @@ def __update_usage_log(\n                     filtered_app[\"pending_credit\"]\n                 ) - Decimal(classification_credit_used)\n \n-\n         try:\n             headers = {\"Authorization\": \"Bearer \" + self.get_subscription_token()}\n             payload = {"
        },
        {
            "sha": "7010e8425221b440fdc6f30f6b00bdf18077ad85",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -264,6 +264,7 @@ def page_digitally_created(page):\n         return True\n     return page_type\n \n+\n @sync_wrapper(module=\"ocr\")\n def ocr_document(\n     user, doc_path_pre_ocr, output_path, force_ocr, improve_quality, resp_json\n@@ -281,12 +282,17 @@ def ocr_document(\n         storagemanager_doc2.save_file(output_path, doc_path_pre_ocr, None)\n         pass\n \n-    preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json)\n+    preprocess_and_ocr_document(\n+        user, output_path, force_ocr, improve_quality, resp_json\n+    )\n \n     # storagemanager_doc2.save_file(output_path, doc_path, None)\n \n+\n @sync_wrapper(module=\"ocr\")\n-def preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json):\n+def preprocess_and_ocr_document(\n+    user, output_path, force_ocr, improve_quality, resp_json\n+):\n     org_id = user.get_org_id()\n     use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n@@ -329,4 +335,4 @@ def preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, r\n             \"module\": \"ocr\",\n             \"message\": f\"OCR successful. Module used: {ocr_module}\",\n         }\n-    )\n\\ No newline at end of file\n+    )"
        },
        {
            "sha": "daf6ae3183df9ffaba60fbc975917b69cbcfffc4",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -10,9 +10,11 @@\n from helper.extract_util import Extractor\n from helper.field_extractors.adjusted_coordinates import get_adjusted_coords\n from helper.form_extractor.fill_ratio import (\n-    get_fill_percentage_from_image_url, strip_box, strip_box_special)\n-from helper.util import (transform_from_normalized_coords_object,\n-                         transform_to_normalized)\n+    get_fill_percentage_from_image_url,\n+    strip_box,\n+    strip_box_special,\n+)\n+from helper.util import transform_from_normalized_coords_object, transform_to_normalized\n from logger.logger import get_logger\n \n logger = get_logger(\"fellowkv-deh\")\n@@ -28,7 +30,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n     fields_result = extract_checkbox_fields(\n-       user, document, layout, checkbox_fields, document_first_page\n+        user, document, layout, checkbox_fields, document_first_page\n     )\n \n     text_fields = [df for df in fields_to_extract if not df[\"field_type\"] == \"BOOLEAN\"]\n@@ -127,8 +129,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n     for index, checkbox_field in enumerate(checkbox_fields):\n         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]\n         field_type = checkbox_field[\"field_type\"]\n-        if not checkbox_field.get(\"tr_ocr_model_id\",None):\n-            checkbox_field[\"tr_ocr_model_id\"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'\n+        if not checkbox_field.get(\"tr_ocr_model_id\", None):\n+            checkbox_field[\"tr_ocr_model_id\"] = \"5a3e526f-371a-470b-aacd-75460c0b8a16\"\n         field_name = checkbox_field[\"field_name\"]\n         adjusted_coords = checkbox_field[\"adjusted_coords\"]\n         coords = transform_to_normalized(\n@@ -155,7 +157,7 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n             \"validation_message\": \"\",\n             \"threshold\": threshold,\n             \"type\": field_type,\n-            \"tr_ocr_model_id\": checkbox_field[\"tr_ocr_model_id\"]\n+            \"tr_ocr_model_id\": checkbox_field[\"tr_ocr_model_id\"],\n         }\n         fields.append(field)\n     return fields\n@@ -349,8 +351,10 @@ def populate_tr_ocr_info(document, field_results):\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n \n-            is_checkbox_field = (field.get(\"field_type\",None) == \"BOOLEAN\")\n-            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)\n+            is_checkbox_field = field.get(\"field_type\", None) == \"BOOLEAN\"\n+            adjusted_coords = get_trocr_adjusted_coords(\n+                field, page_image, is_checkbox_field\n+            )\n             if not adjusted_coords:\n                 field[\"adjusted_coords\"] = None\n                 field.pop(\"confidence\", None)\n@@ -377,9 +381,13 @@ def populate_tr_ocr_info(document, field_results):\n \n def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):\n     if is_checkbox_field:\n-        strip_dim = 0,0,0,0\n+        strip_dim = 0, 0, 0, 0\n         return trocr_common.readjust_coordinates(\n-            page_image, field_data[\"adjusted_coords\"], strip_dim, v_padding=5, h_padding=5\n+            page_image,\n+            field_data[\"adjusted_coords\"],\n+            strip_dim,\n+            v_padding=5,\n+            h_padding=5,\n         )\n \n     field_cropped_image = trocr_common.get_image_from_coords("
        },
        {
            "sha": "5a9e7cf67f831aff65d0759450b124d40433a8f5",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -701,24 +701,24 @@ def get_layout_templates(doc_type_key, sub_doc_type_key, org_id):\n \n \n def remove_duplicate_layout(layouts):\n-    default_layouts = [ly for ly in  layouts if ly['org_id'] == 'DEFAULT']\n+    default_layouts = [ly for ly in layouts if ly[\"org_id\"] == \"DEFAULT\"]\n \n     filtered_layouts = {}\n     for ly in layouts:\n-        doc_type = ly['doc_type_key']\n-        sub_doc_type = ly.get('sub_doc_type_key','')\n+        doc_type = ly[\"doc_type_key\"]\n+        sub_doc_type = ly.get(\"sub_doc_type_key\", \"\")\n         if not sub_doc_type:\n-            sub_doc_type = ''\n-        key = doc_type + '_' + sub_doc_type\n+            sub_doc_type = \"\"\n+        key = doc_type + \"_\" + sub_doc_type\n         filtered_layouts[key] = ly\n \n     for dly in default_layouts:\n-        doc_type = ly['doc_type_key']\n-        sub_doc_type = ly.get('sub_doc_type_key','')\n+        doc_type = ly[\"doc_type_key\"]\n+        sub_doc_type = ly.get(\"sub_doc_type_key\", \"\")\n         if not sub_doc_type:\n-            sub_doc_type = ''\n-        key = doc_type + '_' + sub_doc_type\n+            sub_doc_type = \"\"\n+        key = doc_type + \"_\" + sub_doc_type\n         if not key in filtered_layouts:\n             filtered_layouts[key] = dly\n \n-    return list(filtered_layouts.values())\n\\ No newline at end of file\n+    return list(filtered_layouts.values())"
        },
        {
            "sha": "ca9892f061fa9ee028ba2e5cbbc6b018c2feddd7",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -16,8 +16,7 @@\n import constants\n import helper.ocr as ocr_helper\n from authenticator import UserAuthentication\n-from fellow2kv.extension import (api, db, multi_auth, storagemanager,\n-                                 storagemanager_doc2)\n+from fellow2kv.extension import api, db, multi_auth, storagemanager, storagemanager_doc2\n \n from helper import doc_type_helper as dth\n from helper import generic_data_vault_helper as gdvh\n@@ -799,7 +798,9 @@ def post(self):\n \n                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)\n                 # force_ocr = False\n-                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):\n+                if not ocr_helper.is_doc_ocr(ufile.name) or (\n+                    force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)\n+                ):\n                     ocr_document(\n                         user,\n                         doc_path_pre_ocr,"
        },
        {
            "sha": "c49e3678ff84f339ec66cfec3e885d95087b8b2e",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -16,8 +16,7 @@\n import constants\n import helper.ocr as ocr_helper\n from authenticator import UserAuthentication\n-from fellow2kv.extension import (api, db, multi_auth, storagemanager,\n-                                 storagemanager_doc2)\n+from fellow2kv.extension import api, db, multi_auth, storagemanager, storagemanager_doc2\n \n from helper import doc_type_helper as dth\n from helper import generic_data_vault_helper as gdvh\n@@ -799,7 +798,9 @@ def post(self):\n \n                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)\n                 # force_ocr = False\n-                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):\n+                if not ocr_helper.is_doc_ocr(ufile.name) or (\n+                    force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)\n+                ):\n                     ocr_document(\n                         user,\n                         doc_path_pre_ocr,"
        },
        {
            "sha": "7274d7dfca3c5c19283004998dd27e7d089a2fd7",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -317,7 +317,7 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type\n             for i in range(row_order - len(rows)):\n                 rows.append([])\n         if row_order != None:\n-            if field.get(\"field_type\",'') == \"CURRENCY\":\n+            if field.get(\"field_type\", \"\") == \"CURRENCY\":\n                 field[\"enforce_list_of_values\"] = True\n                 field[\"list_of_values\"] = \"ISO_Currency\"\n             rows[row_order - 1].append(field)"
        },
        {
            "sha": "bd98ee08b329db08a1471b084f093649a4fc2c29",
            "message": "Fix code style issues with Black",
            "code_changes": "@@ -13,8 +13,13 @@\n from helper import util\n from helper.layout import layout_fields_helper as lfh\n from logger import get_logger\n-from models import (AlchemyEncoder, ColumnValidationRules, DocumentTable,\n-                    DocumentTableColumn, DocumentType)\n+from models import (\n+    AlchemyEncoder,\n+    ColumnValidationRules,\n+    DocumentTable,\n+    DocumentTableColumn,\n+    DocumentType,\n+)\n \n logger = get_logger(\"document_table_settings\")\n "
        }
    ]
}