{
    "author": "Syed Amier Haider Shah",
    "week": "2023-W07",
    "total_commits": 10,
    "author_image": "https://avatars.githubusercontent.com/u/2101825?v=4",
    "commits": [
        {
            "sha": "31cdb289a6df0d1e80d4553d087e372445921f1d",
            "message": "Merge pull request #764 from Fellow-Consulting-AG/stage\n\nocr service name changed",
            "code_changes": "@@ -33,7 +33,7 @@ def __get_ocr_data__(self, source_file_path, doc_id=None):\n         document[\"doc_origin\"] = \"DE\"\n         document[\"doc_locale\"] = \"de_DE\"\n         document[\"ocr_lang\"] = \"de\"\n-        document[\"ocr_processor\"] = \"google-ai\"\n+        document[\"ocr_processor\"] = \"ai-ocr-service\"\n \n         GOOGLE_OCR.populate_origin_and_locale(ai_resp_json, document)\n \n@@ -50,7 +50,7 @@ def extract_ocr_data_and_images(\n         document, ai_resp_json = self.__get_ocr_data__(source_file_path, None)\n \n         document[\"doc_id\"] = doc_id\n-        document[\"ocr_processor\"] = \"google-ai\"\n+        document[\"ocr_processor\"] = \"ai-ocr-service\"\n \n         logger.info(f\"Going to save extracted image and ocr document\")\n         start_time = time.perf_counter()"
        },
        {
            "sha": "abc3c420d161eaa90d0b0b297e32e09007260e0a",
            "message": "Merge pull request #763 from Fellow-Consulting-AG/dev\n\nchanged service name",
            "code_changes": "@@ -33,7 +33,7 @@ def __get_ocr_data__(self, source_file_path, doc_id=None):\n         document[\"doc_origin\"] = \"DE\"\n         document[\"doc_locale\"] = \"de_DE\"\n         document[\"ocr_lang\"] = \"de\"\n-        document[\"ocr_processor\"] = \"google-ai\"\n+        document[\"ocr_processor\"] = \"ai-ocr-service\"\n \n         GOOGLE_OCR.populate_origin_and_locale(ai_resp_json, document)\n \n@@ -50,7 +50,7 @@ def extract_ocr_data_and_images(\n         document, ai_resp_json = self.__get_ocr_data__(source_file_path, None)\n \n         document[\"doc_id\"] = doc_id\n-        document[\"ocr_processor\"] = \"google-ai\"\n+        document[\"ocr_processor\"] = \"ai-ocr-service\"\n \n         logger.info(f\"Going to save extracted image and ocr document\")\n         start_time = time.perf_counter()"
        },
        {
            "sha": "52fd5051a10bd92b23bd39a6f63d82c0f16723fe",
            "message": "changed service name",
            "code_changes": "@@ -33,7 +33,7 @@ def __get_ocr_data__(self, source_file_path, doc_id=None):\n         document[\"doc_origin\"] = \"DE\"\n         document[\"doc_locale\"] = \"de_DE\"\n         document[\"ocr_lang\"] = \"de\"\n-        document[\"ocr_processor\"] = \"google-ai\"\n+        document[\"ocr_processor\"] = \"ai-ocr-service\"\n \n         GOOGLE_OCR.populate_origin_and_locale(ai_resp_json, document)\n \n@@ -50,7 +50,7 @@ def extract_ocr_data_and_images(\n         document, ai_resp_json = self.__get_ocr_data__(source_file_path, None)\n \n         document[\"doc_id\"] = doc_id\n-        document[\"ocr_processor\"] = \"google-ai\"\n+        document[\"ocr_processor\"] = \"ai-ocr-service\"\n \n         logger.info(f\"Going to save extracted image and ocr document\")\n         start_time = time.perf_counter()"
        },
        {
            "sha": "3d2d33c0d6808524ff924b345948edd2fb0c8ee8",
            "message": "Merge pull request #760 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -2,18 +2,17 @@\n import math\n \n import cv2\n-import fellow2kv.config as config\n import numpy\n+\n+import fellow2kv.config as config\n from fellow2kv.extension import config\n from helper.custom_classifier_v2 import trocr_common\n from helper.extract_util import Extractor\n from helper.field_extractors.adjusted_coordinates import get_adjusted_coords\n from helper.form_extractor.fill_ratio import (\n-    get_fill_percentage_from_image_url,\n-    strip_box,\n-    strip_box_special,\n-)\n-from helper.util import transform_from_normalized_coords_object, transform_to_normalized\n+    get_fill_percentage_from_image_url, strip_box, strip_box_special)\n+from helper.util import (transform_from_normalized_coords_object,\n+                         transform_to_normalized)\n from logger.logger import get_logger\n \n logger = get_logger(\"fellowkv-deh\")\n@@ -29,7 +28,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n     fields_result = extract_checkbox_fields(\n-        user, document, layout, checkbox_fields, document_first_page\n+       user, document, layout, checkbox_fields, document_first_page\n     )\n \n     text_fields = [df for df in fields_to_extract if not df[\"field_type\"] == \"BOOLEAN\"]\n@@ -119,29 +118,6 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n         if value:\n             filled_count += 1\n         checkbox_field[\"content\"] = value\n-        # field_name = checkbox_field[\"field_name\"]\n-        # checkbox_values[field_name] = value\n-\n-    # first_section = ([f for f in checkbox_fields\n-    #     if f.get('checkbox_group', '') == '1'\n-    #     and f['content']])\n-    # if first_section:\n-    #     checked_field = first_section[0]\n-    #     checkbox_prefix = checked_field['field_name'][:-1]\n-    #     second_section = ([f for f in checkbox_fields\n-    #         if f.get('checkbox_group', '') == '2'\n-    #         and f['content']])\n-    #     if second_section:\n-    #         second_checked_field = second_section[0]\n-    #         if not second_checked_field['field_name'].startswith(checkbox_prefix):\n-    #             second_checked_field['content'] = False\n-    #             field[\"old_fill_ratio\"] = field[\"fill_ratio\"]\n-    #             field[\"fill_ratio\"] = 0\n-\n-    #         second_sub_section_top_field = ([f for f in checkbox_fields\n-    #             if f.get('checkbox_group', '') == '2'\n-    #             and f['field_name'].startswith(checkbox_prefix)][0])\n-    #         second_sub_section_top_field['content'] = True\n \n     # TODO: Handling for the parent checkbox. Where a checkbox need to be checked for and child checkbox to be check.\n     # If parent checkbox is not checked, all child checkbox will be unchecked.\n@@ -150,6 +126,9 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n     fields = []\n     for index, checkbox_field in enumerate(checkbox_fields):\n         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]\n+        field_type = checkbox_field[\"field_type\"]\n+        if not checkbox_field.get(\"tr_ocr_model_id\",None):\n+            checkbox_field[\"tr_ocr_model_id\"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'\n         field_name = checkbox_field[\"field_name\"]\n         adjusted_coords = checkbox_field[\"adjusted_coords\"]\n         coords = transform_to_normalized(\n@@ -175,6 +154,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n             \"is_valid\": True,\n             \"validation_message\": \"\",\n             \"threshold\": threshold,\n+            \"type\": field_type,\n+            \"tr_ocr_model_id\": checkbox_field[\"tr_ocr_model_id\"]\n         }\n         fields.append(field)\n     return fields\n@@ -367,7 +348,9 @@ def populate_tr_ocr_info(document, field_results):\n             populate_coords_from_adjusted_coords(\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n-            adjusted_coords = get_trocr_adjusted_coords(field, page_image)\n+\n+            is_checkbox_field = (field.get(\"field_type\",None) == \"BOOLEAN\")\n+            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)\n             if not adjusted_coords:\n                 field[\"adjusted_coords\"] = None\n                 field.pop(\"confidence\", None)\n@@ -392,7 +375,13 @@ def populate_tr_ocr_info(document, field_results):\n         logger.exception(ex)\n \n \n-def get_trocr_adjusted_coords(field_data, page_image):\n+def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):\n+    if is_checkbox_field:\n+        strip_dim = 0,0,0,0\n+        return trocr_common.readjust_coordinates(\n+            page_image, field_data[\"adjusted_coords\"], strip_dim, v_padding=5, h_padding=5\n+        )\n+\n     field_cropped_image = trocr_common.get_image_from_coords(\n         page_image, field_data[\"adjusted_coords\"]\n     )"
        },
        {
            "sha": "72aa345e24e229f7ff37f2e1813f80e27ea62b85",
            "message": "Merge pull request #759 from Fellow-Consulting-AG/dev\n\nstage",
            "code_changes": "@@ -2,18 +2,17 @@\n import math\n \n import cv2\n-import fellow2kv.config as config\n import numpy\n+\n+import fellow2kv.config as config\n from fellow2kv.extension import config\n from helper.custom_classifier_v2 import trocr_common\n from helper.extract_util import Extractor\n from helper.field_extractors.adjusted_coordinates import get_adjusted_coords\n from helper.form_extractor.fill_ratio import (\n-    get_fill_percentage_from_image_url,\n-    strip_box,\n-    strip_box_special,\n-)\n-from helper.util import transform_from_normalized_coords_object, transform_to_normalized\n+    get_fill_percentage_from_image_url, strip_box, strip_box_special)\n+from helper.util import (transform_from_normalized_coords_object,\n+                         transform_to_normalized)\n from logger.logger import get_logger\n \n logger = get_logger(\"fellowkv-deh\")\n@@ -29,7 +28,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n     fields_result = extract_checkbox_fields(\n-        user, document, layout, checkbox_fields, document_first_page\n+       user, document, layout, checkbox_fields, document_first_page\n     )\n \n     text_fields = [df for df in fields_to_extract if not df[\"field_type\"] == \"BOOLEAN\"]\n@@ -119,29 +118,6 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n         if value:\n             filled_count += 1\n         checkbox_field[\"content\"] = value\n-        # field_name = checkbox_field[\"field_name\"]\n-        # checkbox_values[field_name] = value\n-\n-    # first_section = ([f for f in checkbox_fields\n-    #     if f.get('checkbox_group', '') == '1'\n-    #     and f['content']])\n-    # if first_section:\n-    #     checked_field = first_section[0]\n-    #     checkbox_prefix = checked_field['field_name'][:-1]\n-    #     second_section = ([f for f in checkbox_fields\n-    #         if f.get('checkbox_group', '') == '2'\n-    #         and f['content']])\n-    #     if second_section:\n-    #         second_checked_field = second_section[0]\n-    #         if not second_checked_field['field_name'].startswith(checkbox_prefix):\n-    #             second_checked_field['content'] = False\n-    #             field[\"old_fill_ratio\"] = field[\"fill_ratio\"]\n-    #             field[\"fill_ratio\"] = 0\n-\n-    #         second_sub_section_top_field = ([f for f in checkbox_fields\n-    #             if f.get('checkbox_group', '') == '2'\n-    #             and f['field_name'].startswith(checkbox_prefix)][0])\n-    #         second_sub_section_top_field['content'] = True\n \n     # TODO: Handling for the parent checkbox. Where a checkbox need to be checked for and child checkbox to be check.\n     # If parent checkbox is not checked, all child checkbox will be unchecked.\n@@ -150,6 +126,9 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n     fields = []\n     for index, checkbox_field in enumerate(checkbox_fields):\n         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]\n+        field_type = checkbox_field[\"field_type\"]\n+        if not checkbox_field.get(\"tr_ocr_model_id\",None):\n+            checkbox_field[\"tr_ocr_model_id\"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'\n         field_name = checkbox_field[\"field_name\"]\n         adjusted_coords = checkbox_field[\"adjusted_coords\"]\n         coords = transform_to_normalized(\n@@ -175,6 +154,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n             \"is_valid\": True,\n             \"validation_message\": \"\",\n             \"threshold\": threshold,\n+            \"type\": field_type,\n+            \"tr_ocr_model_id\": checkbox_field[\"tr_ocr_model_id\"]\n         }\n         fields.append(field)\n     return fields\n@@ -367,7 +348,9 @@ def populate_tr_ocr_info(document, field_results):\n             populate_coords_from_adjusted_coords(\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n-            adjusted_coords = get_trocr_adjusted_coords(field, page_image)\n+\n+            is_checkbox_field = (field.get(\"field_type\",None) == \"BOOLEAN\")\n+            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)\n             if not adjusted_coords:\n                 field[\"adjusted_coords\"] = None\n                 field.pop(\"confidence\", None)\n@@ -392,7 +375,13 @@ def populate_tr_ocr_info(document, field_results):\n         logger.exception(ex)\n \n \n-def get_trocr_adjusted_coords(field_data, page_image):\n+def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):\n+    if is_checkbox_field:\n+        strip_dim = 0,0,0,0\n+        return trocr_common.readjust_coordinates(\n+            page_image, field_data[\"adjusted_coords\"], strip_dim, v_padding=5, h_padding=5\n+        )\n+\n     field_cropped_image = trocr_common.get_image_from_coords(\n         page_image, field_data[\"adjusted_coords\"]\n     )"
        },
        {
            "sha": "948b59186926c097453a08b592a506a697e57394",
            "message": "TROCR for checkboxes",
            "code_changes": "@@ -2,18 +2,17 @@\n import math\n \n import cv2\n-import fellow2kv.config as config\n import numpy\n+\n+import fellow2kv.config as config\n from fellow2kv.extension import config\n from helper.custom_classifier_v2 import trocr_common\n from helper.extract_util import Extractor\n from helper.field_extractors.adjusted_coordinates import get_adjusted_coords\n from helper.form_extractor.fill_ratio import (\n-    get_fill_percentage_from_image_url,\n-    strip_box,\n-    strip_box_special,\n-)\n-from helper.util import transform_from_normalized_coords_object, transform_to_normalized\n+    get_fill_percentage_from_image_url, strip_box, strip_box_special)\n+from helper.util import (transform_from_normalized_coords_object,\n+                         transform_to_normalized)\n from logger.logger import get_logger\n \n logger = get_logger(\"fellowkv-deh\")\n@@ -29,7 +28,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n     fields_result = extract_checkbox_fields(\n-        user, document, layout, checkbox_fields, document_first_page\n+       user, document, layout, checkbox_fields, document_first_page\n     )\n \n     text_fields = [df for df in fields_to_extract if not df[\"field_type\"] == \"BOOLEAN\"]\n@@ -119,29 +118,6 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n         if value:\n             filled_count += 1\n         checkbox_field[\"content\"] = value\n-        # field_name = checkbox_field[\"field_name\"]\n-        # checkbox_values[field_name] = value\n-\n-    # first_section = ([f for f in checkbox_fields\n-    #     if f.get('checkbox_group', '') == '1'\n-    #     and f['content']])\n-    # if first_section:\n-    #     checked_field = first_section[0]\n-    #     checkbox_prefix = checked_field['field_name'][:-1]\n-    #     second_section = ([f for f in checkbox_fields\n-    #         if f.get('checkbox_group', '') == '2'\n-    #         and f['content']])\n-    #     if second_section:\n-    #         second_checked_field = second_section[0]\n-    #         if not second_checked_field['field_name'].startswith(checkbox_prefix):\n-    #             second_checked_field['content'] = False\n-    #             field[\"old_fill_ratio\"] = field[\"fill_ratio\"]\n-    #             field[\"fill_ratio\"] = 0\n-\n-    #         second_sub_section_top_field = ([f for f in checkbox_fields\n-    #             if f.get('checkbox_group', '') == '2'\n-    #             and f['field_name'].startswith(checkbox_prefix)][0])\n-    #         second_sub_section_top_field['content'] = True\n \n     # TODO: Handling for the parent checkbox. Where a checkbox need to be checked for and child checkbox to be check.\n     # If parent checkbox is not checked, all child checkbox will be unchecked.\n@@ -150,6 +126,9 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n     fields = []\n     for index, checkbox_field in enumerate(checkbox_fields):\n         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]\n+        field_type = checkbox_field[\"field_type\"]\n+        if not checkbox_field.get(\"tr_ocr_model_id\",None):\n+            checkbox_field[\"tr_ocr_model_id\"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'\n         field_name = checkbox_field[\"field_name\"]\n         adjusted_coords = checkbox_field[\"adjusted_coords\"]\n         coords = transform_to_normalized(\n@@ -175,6 +154,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n             \"is_valid\": True,\n             \"validation_message\": \"\",\n             \"threshold\": threshold,\n+            \"type\": field_type,\n+            \"tr_ocr_model_id\": checkbox_field[\"tr_ocr_model_id\"]\n         }\n         fields.append(field)\n     return fields\n@@ -367,7 +348,9 @@ def populate_tr_ocr_info(document, field_results):\n             populate_coords_from_adjusted_coords(\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n-            adjusted_coords = get_trocr_adjusted_coords(field, page_image)\n+\n+            is_checkbox_field = (field.get(\"field_type\",None) == \"BOOLEAN\")\n+            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)\n             if not adjusted_coords:\n                 field[\"adjusted_coords\"] = None\n                 field.pop(\"confidence\", None)\n@@ -392,7 +375,13 @@ def populate_tr_ocr_info(document, field_results):\n         logger.exception(ex)\n \n \n-def get_trocr_adjusted_coords(field_data, page_image):\n+def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):\n+    if is_checkbox_field:\n+        strip_dim = 0,0,0,0\n+        return trocr_common.readjust_coordinates(\n+            page_image, field_data[\"adjusted_coords\"], strip_dim, v_padding=5, h_padding=5\n+        )\n+\n     field_cropped_image = trocr_common.get_image_from_coords(\n         page_image, field_data[\"adjusted_coords\"]\n     )"
        },
        {
            "sha": "8f553cf55ba9a946ee17a6a5f6e94e137ce0f9bf",
            "message": "Merge pull request #758 from Fellow-Consulting-AG/stage\n\nDefault layout fix",
            "code_changes": "@@ -674,11 +674,11 @@ def get_doc_type_key_and_sub_doc_key(db, doc_type, is_sub_doc_type, org_id):\n \n def get_layout_templates(doc_type_key, sub_doc_type_key, org_id):\n     query = f\"\"\"select\n-                dlt.id, dlt.doc_type_key, dlt.sub_doc_type_key, dlt.title\n+                dlt.id, dlt.org_id, dlt.doc_type_key, dlt.sub_doc_type_key, dlt.title\n             from\n                 document_layout_template dlt\n             where\n-                dlt.org_id IN ('DEFAULT_NOT_FOR_NOW','{org_id}')\n+                dlt.org_id IN ('DEFAULT','{org_id}')\n                 and dlt.is_deleted = False\n     \"\"\"\n \n@@ -693,4 +693,32 @@ def get_layout_templates(doc_type_key, sub_doc_type_key, org_id):\n     query = query.replace(\"\\n\", \"\").strip()\n     results = db.engine.execute(query)\n     result_list = [dict(r) for r in results]\n+\n+    if result_list:\n+        return remove_duplicate_layout(result_list)\n+\n     return result_list\n+\n+\n+def remove_duplicate_layout(layouts):\n+    default_layouts = [ly for ly in  layouts if ly['org_id'] == 'DEFAULT']\n+\n+    filtered_layouts = {}\n+    for ly in layouts:\n+        doc_type = ly['doc_type_key']\n+        sub_doc_type = ly.get('sub_doc_type_key','')\n+        if not sub_doc_type:\n+            sub_doc_type = ''\n+        key = doc_type + '_' + sub_doc_type\n+        filtered_layouts[key] = ly\n+\n+    for dly in default_layouts:\n+        doc_type = ly['doc_type_key']\n+        sub_doc_type = ly.get('sub_doc_type_key','')\n+        if not sub_doc_type:\n+            sub_doc_type = ''\n+        key = doc_type + '_' + sub_doc_type\n+        if not key in filtered_layouts:\n+            filtered_layouts[key] = dly\n+\n+    return list(filtered_layouts.values())\n\\ No newline at end of file"
        },
        {
            "sha": "2ed8a51b5eacbc2d29a9f2d0782ab152e6cc465b",
            "message": "Merge pull request #757 from Fellow-Consulting-AG/dev\n\nstage",
            "code_changes": "@@ -674,11 +674,11 @@ def get_doc_type_key_and_sub_doc_key(db, doc_type, is_sub_doc_type, org_id):\n \n def get_layout_templates(doc_type_key, sub_doc_type_key, org_id):\n     query = f\"\"\"select\n-                dlt.id, dlt.doc_type_key, dlt.sub_doc_type_key, dlt.title\n+                dlt.id, dlt.org_id, dlt.doc_type_key, dlt.sub_doc_type_key, dlt.title\n             from\n                 document_layout_template dlt\n             where\n-                dlt.org_id IN ('DEFAULT_NOT_FOR_NOW','{org_id}')\n+                dlt.org_id IN ('DEFAULT','{org_id}')\n                 and dlt.is_deleted = False\n     \"\"\"\n \n@@ -693,4 +693,32 @@ def get_layout_templates(doc_type_key, sub_doc_type_key, org_id):\n     query = query.replace(\"\\n\", \"\").strip()\n     results = db.engine.execute(query)\n     result_list = [dict(r) for r in results]\n+\n+    if result_list:\n+        return remove_duplicate_layout(result_list)\n+\n     return result_list\n+\n+\n+def remove_duplicate_layout(layouts):\n+    default_layouts = [ly for ly in  layouts if ly['org_id'] == 'DEFAULT']\n+\n+    filtered_layouts = {}\n+    for ly in layouts:\n+        doc_type = ly['doc_type_key']\n+        sub_doc_type = ly.get('sub_doc_type_key','')\n+        if not sub_doc_type:\n+            sub_doc_type = ''\n+        key = doc_type + '_' + sub_doc_type\n+        filtered_layouts[key] = ly\n+\n+    for dly in default_layouts:\n+        doc_type = ly['doc_type_key']\n+        sub_doc_type = ly.get('sub_doc_type_key','')\n+        if not sub_doc_type:\n+            sub_doc_type = ''\n+        key = doc_type + '_' + sub_doc_type\n+        if not key in filtered_layouts:\n+            filtered_layouts[key] = dly\n+\n+    return list(filtered_layouts.values())\n\\ No newline at end of file"
        },
        {
            "sha": "73e2b3e2f839a5be04c503462ba3c2e73c004e1c",
            "message": "small fix",
            "code_changes": "@@ -674,11 +674,11 @@ def get_doc_type_key_and_sub_doc_key(db, doc_type, is_sub_doc_type, org_id):\n \n def get_layout_templates(doc_type_key, sub_doc_type_key, org_id):\n     query = f\"\"\"select\n-                dlt.id, dlt.doc_type_key, dlt.sub_doc_type_key, dlt.title\n+                dlt.id, dlt.org_id, dlt.doc_type_key, dlt.sub_doc_type_key, dlt.title\n             from\n                 document_layout_template dlt\n             where\n-                dlt.org_id IN ('DEFAULT_NOT_FOR_NOW','{org_id}')\n+                dlt.org_id IN ('DEFAULT','{org_id}')\n                 and dlt.is_deleted = False\n     \"\"\"\n \n@@ -693,4 +693,32 @@ def get_layout_templates(doc_type_key, sub_doc_type_key, org_id):\n     query = query.replace(\"\\n\", \"\").strip()\n     results = db.engine.execute(query)\n     result_list = [dict(r) for r in results]\n+\n+    if result_list:\n+        return remove_duplicate_layout(result_list)\n+\n     return result_list\n+\n+\n+def remove_duplicate_layout(layouts):\n+    default_layouts = [ly for ly in  layouts if ly['org_id'] == 'DEFAULT']\n+\n+    filtered_layouts = {}\n+    for ly in layouts:\n+        doc_type = ly['doc_type_key']\n+        sub_doc_type = ly.get('sub_doc_type_key','')\n+        if not sub_doc_type:\n+            sub_doc_type = ''\n+        key = doc_type + '_' + sub_doc_type\n+        filtered_layouts[key] = ly\n+\n+    for dly in default_layouts:\n+        doc_type = ly['doc_type_key']\n+        sub_doc_type = ly.get('sub_doc_type_key','')\n+        if not sub_doc_type:\n+            sub_doc_type = ''\n+        key = doc_type + '_' + sub_doc_type\n+        if not key in filtered_layouts:\n+            filtered_layouts[key] = dly\n+\n+    return list(filtered_layouts.values())\n\\ No newline at end of file"
        },
        {
            "sha": "7616397b07816af3ce1c198c63c897b217470900",
            "message": "Merge pull request #748 from Fellow-Consulting-AG/stage\n\nFix code style issues with Black",
            "code_changes": "@@ -13,8 +13,13 @@\n from helper import util\n from helper.layout import layout_fields_helper as lfh\n from logger import get_logger\n-from models import (AlchemyEncoder, ColumnValidationRules, DocumentTable,\n-                    DocumentTableColumn, DocumentType)\n+from models import (\n+    AlchemyEncoder,\n+    ColumnValidationRules,\n+    DocumentTable,\n+    DocumentTableColumn,\n+    DocumentType,\n+)\n \n logger = get_logger(\"document_table_settings\")\n "
        }
    ]
}