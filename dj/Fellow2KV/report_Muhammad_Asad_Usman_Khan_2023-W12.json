{
    "author": "Muhammad Asad Usman Khan",
    "week": "2023-W12",
    "total_commits": 14,
    "author_image": "https://avatars.githubusercontent.com/u/83513548?v=4",
    "commits": [
        {
            "sha": "155979a809f09343345634f31adb1ffb6c321397",
            "message": "Merge pull request #843 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -326,12 +326,13 @@ def preprocess_and_ocr_document(\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    if not disable_ocr_server:\n+    if True or not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"\n         get_ocred_document("
        },
        {
            "sha": "32f477dcf7c17d1e4525de16ade884c49ff0def3",
            "message": "Merge pull request #842 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -326,14 +326,13 @@ def preprocess_and_ocr_document(\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(\n-            output_path, deskew, use_high_dpi, disable_ocr_server\n-        )\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    if not disable_ocr_server:\n+    if True or not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"\n         get_ocred_document("
        },
        {
            "sha": "8742c0c132bf699571758ff6225f4f9c2c4f960a",
            "message": "Merge branch 'stage' into dev",
            "code_changes": "@@ -327,6 +327,7 @@ def preprocess_and_ocr_document(\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n         pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+\n     except Exception as ex:\n         logger.error(ex)\n         pass"
        },
        {
            "sha": "0f63b0684371f7def90e808cab300f0d44dcaab9",
            "message": "fd",
            "code_changes": "@@ -326,7 +326,7 @@ def preprocess_and_ocr_document(\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n     except Exception as ex:\n         logger.error(ex)\n         pass"
        },
        {
            "sha": "3114230f0fc039f8e525029bb336447e4aee8f28",
            "message": "fd",
            "code_changes": "@@ -331,7 +331,7 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    if not disable_ocr_server:\n+    if True or not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"\n         get_ocred_document("
        },
        {
            "sha": "ceeddeeb19d02974bdcc5c2ac6b976a502d8e9fe",
            "message": "Merge pull request #841 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -324,13 +324,13 @@ def preprocess_and_ocr_document(\n     org_id = user.get_org_id()\n     use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     if not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\""
        },
        {
            "sha": "9323fa5cce302dd2818208035e9e301d9a1bd38a",
            "message": "Merge pull request #840 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -324,13 +324,13 @@ def preprocess_and_ocr_document(\n     org_id = user.get_org_id()\n     use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     if not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\""
        },
        {
            "sha": "3ef839ef7ffa612d6fe6d5a9a5fc3626fe061fce",
            "message": "fd",
            "code_changes": "@@ -324,13 +324,13 @@ def preprocess_and_ocr_document(\n     org_id = user.get_org_id()\n     use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     if not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\""
        },
        {
            "sha": "2212e03bf18617e1721e1d6ab66798e103991722",
            "message": "Merge pull request #839 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -330,37 +330,39 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    start_time = datetime.now()\n-    flow_meta = \"ocr_by_fellow\"\n-    get_ocred_document(\n-        user,\n-        output_path,\n-        output_path,\n-        force_ocr,\n-        improve_quality=improve_quality,\n-    )\n-    # storagemanager_doc2.save_file(output_path, doc_path, None)\n-    end_time = datetime.now()\n-    if \"time_logs\" not in resp_json:\n-        resp_json[\"time_logs\"] = {}\n-    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-        (end_time - start_time).total_seconds()\n-    )\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n+    if not disable_ocr_server:\n+        start_time = datetime.now()\n+        flow_meta = \"ocr_by_fellow\"\n+        get_ocred_document(\n+            user,\n+            output_path,\n+            output_path,\n+            force_ocr,\n+            improve_quality=improve_quality,\n+        )\n+        # storagemanager_doc2.save_file(output_path, doc_path, None)\n+        end_time = datetime.now()\n+        if \"time_logs\" not in resp_json:\n+            resp_json[\"time_logs\"] = {}\n+        resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+            (end_time - start_time).total_seconds()\n+        )\n \n-    if \"ocr_processor\" in resp_json:\n-        ocr_module = resp_json[\"ocr_processor\"]\n-    else:\n-        ocr_module = \"OCR Server\"\n-\n-    if \"flow_meta\" not in resp_json:\n-        resp_json[\"flow_meta\"] = []\n-    resp_json[\"flow_meta\"].append(\n-        {\n-            \"name\": flow_meta,\n-            \"type\": \"ocr\",\n-            \"data\": \"true\",\n-            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n-            \"module\": \"ocr\",\n-            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n-        }\n-    )\n+        if \"ocr_processor\" in resp_json:\n+            ocr_module = resp_json[\"ocr_processor\"]\n+        else:\n+            ocr_module = \"OCR Server\"\n+\n+        if \"flow_meta\" not in resp_json:\n+            resp_json[\"flow_meta\"] = []\n+        resp_json[\"flow_meta\"].append(\n+            {\n+                \"name\": flow_meta,\n+                \"type\": \"ocr\",\n+                \"data\": \"true\",\n+                \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+                \"module\": \"ocr\",\n+                \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+            }\n+        )"
        },
        {
            "sha": "964409f488eb33aa5701aecdfd0ad15986006e30",
            "message": "Merge pull request #838 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -330,37 +330,39 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    start_time = datetime.now()\n-    flow_meta = \"ocr_by_fellow\"\n-    get_ocred_document(\n-        user,\n-        output_path,\n-        output_path,\n-        force_ocr,\n-        improve_quality=improve_quality,\n-    )\n-    # storagemanager_doc2.save_file(output_path, doc_path, None)\n-    end_time = datetime.now()\n-    if \"time_logs\" not in resp_json:\n-        resp_json[\"time_logs\"] = {}\n-    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-        (end_time - start_time).total_seconds()\n-    )\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n+    if not disable_ocr_server:\n+        start_time = datetime.now()\n+        flow_meta = \"ocr_by_fellow\"\n+        get_ocred_document(\n+            user,\n+            output_path,\n+            output_path,\n+            force_ocr,\n+            improve_quality=improve_quality,\n+        )\n+        # storagemanager_doc2.save_file(output_path, doc_path, None)\n+        end_time = datetime.now()\n+        if \"time_logs\" not in resp_json:\n+            resp_json[\"time_logs\"] = {}\n+        resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+            (end_time - start_time).total_seconds()\n+        )\n \n-    if \"ocr_processor\" in resp_json:\n-        ocr_module = resp_json[\"ocr_processor\"]\n-    else:\n-        ocr_module = \"OCR Server\"\n-\n-    if \"flow_meta\" not in resp_json:\n-        resp_json[\"flow_meta\"] = []\n-    resp_json[\"flow_meta\"].append(\n-        {\n-            \"name\": flow_meta,\n-            \"type\": \"ocr\",\n-            \"data\": \"true\",\n-            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n-            \"module\": \"ocr\",\n-            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n-        }\n-    )\n+        if \"ocr_processor\" in resp_json:\n+            ocr_module = resp_json[\"ocr_processor\"]\n+        else:\n+            ocr_module = \"OCR Server\"\n+\n+        if \"flow_meta\" not in resp_json:\n+            resp_json[\"flow_meta\"] = []\n+        resp_json[\"flow_meta\"].append(\n+            {\n+                \"name\": flow_meta,\n+                \"type\": \"ocr\",\n+                \"data\": \"true\",\n+                \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+                \"module\": \"ocr\",\n+                \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+            }\n+        )"
        },
        {
            "sha": "ba5088d628153f6ae1d1906256c0a0aabb872678",
            "message": "fd",
            "code_changes": "@@ -330,37 +330,39 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    start_time = datetime.now()\n-    flow_meta = \"ocr_by_fellow\"\n-    get_ocred_document(\n-        user,\n-        output_path,\n-        output_path,\n-        force_ocr,\n-        improve_quality=improve_quality,\n-    )\n-    # storagemanager_doc2.save_file(output_path, doc_path, None)\n-    end_time = datetime.now()\n-    if \"time_logs\" not in resp_json:\n-        resp_json[\"time_logs\"] = {}\n-    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-        (end_time - start_time).total_seconds()\n-    )\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n+    if not disable_ocr_server:\n+        start_time = datetime.now()\n+        flow_meta = \"ocr_by_fellow\"\n+        get_ocred_document(\n+            user,\n+            output_path,\n+            output_path,\n+            force_ocr,\n+            improve_quality=improve_quality,\n+        )\n+        # storagemanager_doc2.save_file(output_path, doc_path, None)\n+        end_time = datetime.now()\n+        if \"time_logs\" not in resp_json:\n+            resp_json[\"time_logs\"] = {}\n+        resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+            (end_time - start_time).total_seconds()\n+        )\n \n-    if \"ocr_processor\" in resp_json:\n-        ocr_module = resp_json[\"ocr_processor\"]\n-    else:\n-        ocr_module = \"OCR Server\"\n-\n-    if \"flow_meta\" not in resp_json:\n-        resp_json[\"flow_meta\"] = []\n-    resp_json[\"flow_meta\"].append(\n-        {\n-            \"name\": flow_meta,\n-            \"type\": \"ocr\",\n-            \"data\": \"true\",\n-            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n-            \"module\": \"ocr\",\n-            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n-        }\n-    )\n+        if \"ocr_processor\" in resp_json:\n+            ocr_module = resp_json[\"ocr_processor\"]\n+        else:\n+            ocr_module = \"OCR Server\"\n+\n+        if \"flow_meta\" not in resp_json:\n+            resp_json[\"flow_meta\"] = []\n+        resp_json[\"flow_meta\"].append(\n+            {\n+                \"name\": flow_meta,\n+                \"type\": \"ocr\",\n+                \"data\": \"true\",\n+                \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+                \"module\": \"ocr\",\n+                \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+            }\n+        )"
        },
        {
            "sha": "eb9704af01a7b3f3dd010d9826e17e6bacf99304",
            "message": "Merge pull request #837 from Fellow-Consulting-AG/stage\n\nStage",
            "code_changes": "@@ -3,13 +3,14 @@\n import time\n \n import requests\n-from authenticator import UserAuthentication\n from flask_sqlalchemy import SQLAlchemy\n+from pdf2image import convert_from_path\n+from PIL import Image\n+\n+from authenticator import UserAuthentication\n from helper.ai import ai_common\n from helper.custom_classifier_v2 import common\n from logger import get_logger\n-from pdf2image import convert_from_path\n-from PIL import Image\n \n from .iclassifier_model_processor import IClassifierModelProcessor\n \n@@ -51,7 +52,11 @@ def classify_pages(self, local_file_path, pages=None):\n                 if pages and not page in pages:\n                     continue\n \n-                label, prob = self.__classify_image(image_path)\n+                try:\n+                    label, prob = self.__classify_image(image_path)\n+                except:\n+                    label = \"ALLGEM\"\n+                    prob = 0.5\n                 page_results.append(\n                     {\n                         \"page\": page,"
        },
        {
            "sha": "c2f857090656c8d5a9368a8d5c800bc59219246f",
            "message": "Merge pull request #836 from Fellow-Consulting-AG/dev\n\nfd",
            "code_changes": "@@ -3,13 +3,14 @@\n import time\n \n import requests\n-from authenticator import UserAuthentication\n from flask_sqlalchemy import SQLAlchemy\n+from pdf2image import convert_from_path\n+from PIL import Image\n+\n+from authenticator import UserAuthentication\n from helper.ai import ai_common\n from helper.custom_classifier_v2 import common\n from logger import get_logger\n-from pdf2image import convert_from_path\n-from PIL import Image\n \n from .iclassifier_model_processor import IClassifierModelProcessor\n \n@@ -51,7 +52,11 @@ def classify_pages(self, local_file_path, pages=None):\n                 if pages and not page in pages:\n                     continue\n \n-                label, prob = self.__classify_image(image_path)\n+                try:\n+                    label, prob = self.__classify_image(image_path)\n+                except:\n+                    label = \"ALLGEM\"\n+                    prob = 0.5\n                 page_results.append(\n                     {\n                         \"page\": page,"
        },
        {
            "sha": "48136b260111f008d5a6cfafd5971a74b686e578",
            "message": "fd",
            "code_changes": "@@ -3,13 +3,14 @@\n import time\n \n import requests\n-from authenticator import UserAuthentication\n from flask_sqlalchemy import SQLAlchemy\n+from pdf2image import convert_from_path\n+from PIL import Image\n+\n+from authenticator import UserAuthentication\n from helper.ai import ai_common\n from helper.custom_classifier_v2 import common\n from logger import get_logger\n-from pdf2image import convert_from_path\n-from PIL import Image\n \n from .iclassifier_model_processor import IClassifierModelProcessor\n \n@@ -51,7 +52,11 @@ def classify_pages(self, local_file_path, pages=None):\n                 if pages and not page in pages:\n                     continue\n \n-                label, prob = self.__classify_image(image_path)\n+                try:\n+                    label, prob = self.__classify_image(image_path)\n+                except:\n+                    label = \"ALLGEM\"\n+                    prob = 0.5\n                 page_results.append(\n                     {\n                         \"page\": page,"
        }
    ]
}