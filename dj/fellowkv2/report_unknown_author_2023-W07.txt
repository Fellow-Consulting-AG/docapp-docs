None: 21 commits for week 2023-W07
Author image: https://avatars.githubusercontent.com/u/83513548?v=4
- a67daeaa6ef3a979ca6192e1dd85854e9f244263: Merge pull request #765 from Fellow-Consulting-AG/sandbox

Sandbox
Code changes:
@@ -37,7 +37,6 @@ def __init__(self, *args: object) -> None:
 
 class VerisonHandler:
     def __init__(self, path, hotfix: bool = False) -> None:
-
         self.path = path
         self.hotfix_enabled = hotfix
 
- d0d03868c2914c67c0e98c02f94344778df076fc: Merge branch 'prod' into sandbox
Code changes:
@@ -111,3 +111,4 @@ jobs:
           GHA_Meta: ${{ steps.output.outputs.new-version }}
         env:
           CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
+
- 9c1a6d203299f401307779b4c18ace157d4e4d7e: Merge pull request #762 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -10,9 +10,11 @@
 from helper.extract_util import Extractor
 from helper.field_extractors.adjusted_coordinates import get_adjusted_coords
 from helper.form_extractor.fill_ratio import (
-    get_fill_percentage_from_image_url, strip_box, strip_box_special)
-from helper.util import (transform_from_normalized_coords_object,
-                         transform_to_normalized)
+    get_fill_percentage_from_image_url,
+    strip_box,
+    strip_box_special,
+)
+from helper.util import transform_from_normalized_coords_object, transform_to_normalized
 from logger.logger import get_logger
 
 logger = get_logger("fellowkv-deh")
@@ -28,7 +30,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
 
     checkbox_fields = [df for df in fields_to_extract if df["field_type"] == "BOOLEAN"]
     fields_result = extract_checkbox_fields(
-       user, document, layout, checkbox_fields, document_first_page
+        user, document, layout, checkbox_fields, document_first_page
     )
 
     text_fields = [df for df in fields_to_extract if not df["field_type"] == "BOOLEAN"]
@@ -127,8 +129,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=
     for index, checkbox_field in enumerate(checkbox_fields):
         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]
         field_type = checkbox_field["field_type"]
-        if not checkbox_field.get("tr_ocr_model_id",None):
-            checkbox_field["tr_ocr_model_id"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'
+        if not checkbox_field.get("tr_ocr_model_id", None):
+            checkbox_field["tr_ocr_model_id"] = "5a3e526f-371a-470b-aacd-75460c0b8a16"
         field_name = checkbox_field["field_name"]
         adjusted_coords = checkbox_field["adjusted_coords"]
         coords = transform_to_normalized(
@@ -155,7 +157,7 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=
             "validation_message": "",
             "threshold": threshold,
             "type": field_type,
-            "tr_ocr_model_id": checkbox_field["tr_ocr_model_id"]
+            "tr_ocr_model_id": checkbox_field["tr_ocr_model_id"],
         }
         fields.append(field)
     return fields
@@ -349,8 +351,10 @@ def populate_tr_ocr_info(document, field_results):
                 field, field["adjusted_coords"]
             )  # to show on UI
 
-            is_checkbox_field = (field.get("field_type",None) == "BOOLEAN")
-            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)
+            is_checkbox_field = field.get("field_type", None) == "BOOLEAN"
+            adjusted_coords = get_trocr_adjusted_coords(
+                field, page_image, is_checkbox_field
+            )
             if not adjusted_coords:
                 field["adjusted_coords"] = None
                 field.pop("confidence", None)
@@ -377,9 +381,13 @@ def populate_tr_ocr_info(document, field_results):
 
 def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):
     if is_checkbox_field:
-        strip_dim = 0,0,0,0
+        strip_dim = 0, 0, 0, 0
         return trocr_common.readjust_coordinates(
-            page_image, field_data["adjusted_coords"], strip_dim, v_padding=5, h_padding=5
+            page_image,
+            field_data["adjusted_coords"],
+            strip_dim,
+            v_padding=5,
+            h_padding=5,
         )
 
     field_cropped_image = trocr_common.get_image_from_coords(
- 9c97353ffbda350e7b736cd4d94e08e49f75fa11: Merge pull request #761 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -1,17 +1,25 @@
+import datetime
 import json
+import shutil
+import tempfile
+import time
 import urllib
+from datetime import datetime
 from shutil import copyfile
 
 import fitz
 import requests
+from flask_sqlalchemy import SQLAlchemy
+from PIL import ImageFont
 
 # from fellow2kv.extension import db, storagemanager
 from authenticator import UserAuthentication
 from fellow2kv.config import OCR_SERVER_URL
-from flask_sqlalchemy import SQLAlchemy
+from fellow2kv.extension import db, storagemanager_doc2
+from helper import generic_data_vault_helper as gdvh
+from helper import pdf as pdf_helper
+from logger import get_logger
 from logger.logger import get_logger
-from PIL import ImageFont
-
 from util import sync_wrapper
 
 # from cloudintegration.core.users.models import Users
@@ -255,3 +263,70 @@ def page_digitally_created(page):
         page_type = "Digitally created"
         return True
     return page_type
+
+@sync_wrapper(module="ocr")
+def ocr_document(
+    user, doc_path_pre_ocr, output_path, force_ocr, improve_quality, resp_json
+):
+    # removed extract_tables condition
+    # copy the pre ocr file as active file
+
+    # no use force ocr if doc is already ocred by doc2
+    try:
+        with tempfile.NamedTemporaryFile(suffix=".pdf") as of:
+            storagemanager_doc2.download_file_on_stream(of, doc_path_pre_ocr)
+            shutil.copy(of.name, output_path)
+    except Exception as ex:
+        # pre ocr file is missing. copying current file as pre ocr file
+        storagemanager_doc2.save_file(output_path, doc_path_pre_ocr, None)
+        pass
+
+    preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json)
+
+    # storagemanager_doc2.save_file(output_path, doc_path, None)
+
+@sync_wrapper(module="ocr")
+def preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json):
+    org_id = user.get_org_id()
+    use_high_dpi = gdvh.get_bool_value(db, "CONVERT_TO_HIGHER_DPI", org_id, False)
+    deskew = gdvh.get_bool_value(db, "DESKEW_DOCUMENT", org_id, False)
+    try:
+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)
+    except Exception as ex:
+        logger.error(ex)
+        pass
+
+    start_time = datetime.now()
+    flow_meta = "ocr_by_fellow"
+    get_ocred_document(
+        user,
+        output_path,
+        output_path,
+        force_ocr,
+        improve_quality=improve_quality,
+    )
+    # storagemanager_doc2.save_file(output_path, doc_path, None)
+    end_time = datetime.now()
+    if "time_logs" not in resp_json:
+        resp_json["time_logs"] = {}
+    resp_json["time_logs"]["ocr_document"] = str(
+        (end_time - start_time).total_seconds()
+    )
+
+    if "ocr_processor" in resp_json:
+        ocr_module = resp_json["ocr_processor"]
+    else:
+        ocr_module = "OCR Server"
+
+    if "flow_meta" not in resp_json:
+        resp_json["flow_meta"] = []
+    resp_json["flow_meta"].append(
+        {
+            "name": flow_meta,
+            "type": "ocr",
+            "data": "true",
+            "time": f'{time.strftime("%M:%S", time.gmtime(int(float(resp_json["time_logs"]["ocr_document"]))))}',
+            "module": "ocr",
+            "message": f"OCR successful. Module used: {ocr_module}",
+        }
+    )
\ No newline at end of file
- a448a0351956439ce1aab50f884193088ac05c98: fd
Code changes:
@@ -1,17 +1,25 @@
+import datetime
 import json
+import shutil
+import tempfile
+import time
 import urllib
+from datetime import datetime
 from shutil import copyfile
 
 import fitz
 import requests
+from flask_sqlalchemy import SQLAlchemy
+from PIL import ImageFont
 
 # from fellow2kv.extension import db, storagemanager
 from authenticator import UserAuthentication
 from fellow2kv.config import OCR_SERVER_URL
-from flask_sqlalchemy import SQLAlchemy
+from fellow2kv.extension import db, storagemanager_doc2
+from helper import generic_data_vault_helper as gdvh
+from helper import pdf as pdf_helper
+from logger import get_logger
 from logger.logger import get_logger
-from PIL import ImageFont
-
 from util import sync_wrapper
 
 # from cloudintegration.core.users.models import Users
@@ -255,3 +263,70 @@ def page_digitally_created(page):
         page_type = "Digitally created"
         return True
     return page_type
+
+@sync_wrapper(module="ocr")
+def ocr_document(
+    user, doc_path_pre_ocr, output_path, force_ocr, improve_quality, resp_json
+):
+    # removed extract_tables condition
+    # copy the pre ocr file as active file
+
+    # no use force ocr if doc is already ocred by doc2
+    try:
+        with tempfile.NamedTemporaryFile(suffix=".pdf") as of:
+            storagemanager_doc2.download_file_on_stream(of, doc_path_pre_ocr)
+            shutil.copy(of.name, output_path)
+    except Exception as ex:
+        # pre ocr file is missing. copying current file as pre ocr file
+        storagemanager_doc2.save_file(output_path, doc_path_pre_ocr, None)
+        pass
+
+    preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json)
+
+    # storagemanager_doc2.save_file(output_path, doc_path, None)
+
+@sync_wrapper(module="ocr")
+def preprocess_and_ocr_document(user, output_path, force_ocr, improve_quality, resp_json):
+    org_id = user.get_org_id()
+    use_high_dpi = gdvh.get_bool_value(db, "CONVERT_TO_HIGHER_DPI", org_id, False)
+    deskew = gdvh.get_bool_value(db, "DESKEW_DOCUMENT", org_id, False)
+    try:
+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)
+    except Exception as ex:
+        logger.error(ex)
+        pass
+
+    start_time = datetime.now()
+    flow_meta = "ocr_by_fellow"
+    get_ocred_document(
+        user,
+        output_path,
+        output_path,
+        force_ocr,
+        improve_quality=improve_quality,
+    )
+    # storagemanager_doc2.save_file(output_path, doc_path, None)
+    end_time = datetime.now()
+    if "time_logs" not in resp_json:
+        resp_json["time_logs"] = {}
+    resp_json["time_logs"]["ocr_document"] = str(
+        (end_time - start_time).total_seconds()
+    )
+
+    if "ocr_processor" in resp_json:
+        ocr_module = resp_json["ocr_processor"]
+    else:
+        ocr_module = "OCR Server"
+
+    if "flow_meta" not in resp_json:
+        resp_json["flow_meta"] = []
+    resp_json["flow_meta"].append(
+        {
+            "name": flow_meta,
+            "type": "ocr",
+            "data": "true",
+            "time": f'{time.strftime("%M:%S", time.gmtime(int(float(resp_json["time_logs"]["ocr_document"]))))}',
+            "module": "ocr",
+            "message": f"OCR successful. Module used: {ocr_module}",
+        }
+    )
\ No newline at end of file
- 000c41ae5620eb4dca7d19befd0a1b59f914a03b: Merge pull request #756 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -9,12 +9,16 @@
 import traceback
 from datetime import datetime
 
+from flask import jsonify, request, send_file
+from flask_restx import Namespace, Resource, abort
+from werkzeug.datastructures import FileStorage
+
 import constants
 import helper.ocr as ocr_helper
 from authenticator import UserAuthentication
-from fellow2kv.extension import api, db, multi_auth, storagemanager, storagemanager_doc2
-from flask import jsonify, request, send_file
-from flask_restx import Namespace, Resource, abort
+from fellow2kv.extension import (api, db, multi_auth, storagemanager,
+                                 storagemanager_doc2)
+
 from helper import doc_type_helper as dth
 from helper import generic_data_vault_helper as gdvh
 from helper import pdf as pdf_helper
@@ -30,7 +34,6 @@
 )
 from logger import get_logger
 from util import sync_wrapper
-from werkzeug.datastructures import FileStorage
 
 logger = get_logger()
 
@@ -283,39 +286,6 @@ def post(self):
                         }
                     )
 
-                """if (
-                    False
-                    and extract_tables
-                    and (
-                        not sent_to_ocr_server
-                        and document.get("tfidf_force_ocr", False)
-                    )
-                ):
-                    start_time = datetime.now()
-                    try:
-                        with tempfile.NamedTemporaryFile(suffix=".pdf") as of:
-                            storagemanager_doc2.download_file_on_stream(
-                                of, doc_path_pre_ocr
-                            )
-                            f.write(of.read())
-                            f.seek(0)
-                    except Exception as ex:
-                        logger.exception(f'An Error occurred. Message: {ex}')
-                        # pre ocr file is missing. copying current file as pre ocr file
-                        storagemanager_doc2.save_file(
-                            f.name, doc_path_pre_ocr, None
-                        )
-                        pass
-
-                    ocr_helper.get_ocred_document(user, f.name, f.name, True)
-                    storagemanager_doc2.save_file(f.name, doc_path, None)
-
-                    end_time = datetime.now()
-                    resp_json["time_logs"]["ocr_document"] = str(
-                        (end_time - start_time).total_seconds()
-                    )
-                """
-
                 # populates, doctype, locale and images from ai_document
                 deh.populate_basic_info(document, resp_json)
 
@@ -807,11 +777,12 @@ def post(self):
             doc_id = request.form.get("doc_id", 1)
             destination_dir = f"{doc2_base_directory}/{doc_id}"
             doc_storage = request.form.get("doc_storage", None)
-            file_path = f"documents/{doc_id}/{doc_id}.pdf"
+            file_path = f"{destination_dir}/{doc_id}.pdf"
+            doc_path_pre_ocr = file_path.replace(".pdf", "_pre_ocr.pdf")
             force_ocr = request.form.get("force_ocr", "false")
             force_ocr = True if force_ocr.lower() in ["true", "1"] else False
             if doc_storage and doc_storage == "fellowkv":
-                file_path = f"documents/{doc_id}.pdf"
+                file_path = f"{doc2_base_directory}/{doc_id}.pdf"
             with tempfile.NamedTemporaryFile(suffix=".pdf", mode="wb") as ufile:
                 try:
                     if (
@@ -828,16 +799,15 @@ def post(self):
 
                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)
                 # force_ocr = False
-                if doc_already_ocred:
-                    ocr_text = ocr_helper.get_ocr_text(ufile.name)
-                    # res = re.findall(r'(?i)natus\s?gmbh', ocr_text.replace("\n", " "), overlapped=True)
-                    # if "���" in ocr_text:  # or (res != None and len(res) > 0):
-                    #     force_ocr = True
-                if not doc_already_ocred or force_ocr:
-                    ocr_helper.get_ocred_document(
-                        user, ufile.name, ufile.name, force_ocr
+                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):
+                    ocr_document(
+                        user,
+                        doc_path_pre_ocr,
+                        ufile.name,
+                        force_ocr,
+                        False,
+                        {},
                     )
-                    ufile.seek(0)
                     storagemanager_doc2.save_file(
                         ufile.name, doc_id + ".pdf", destination_dir
                     )
@@ -939,6 +909,8 @@ def ocr_document(
     )
     # storagemanager_doc2.save_file(output_path, doc_path, None)
     end_time = datetime.now()
+    if "time_logs" not in resp_json:
+        resp_json["time_logs"] = {}
     resp_json["time_logs"]["ocr_document"] = str(
         (end_time - start_time).total_seconds()
     )
@@ -948,6 +920,8 @@ def ocr_document(
     else:
         ocr_module = "OCR Server"
 
+    if "flow_meta" not in resp_json:
+        resp_json["flow_meta"] = []
     resp_json["flow_meta"].append(
         {
             "name": flow_meta,
- 06034c3344d5d0d916f2c51f8f935e4cf30f6ba1: Merge pull request #755 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -9,12 +9,16 @@
 import traceback
 from datetime import datetime
 
+from flask import jsonify, request, send_file
+from flask_restx import Namespace, Resource, abort
+from werkzeug.datastructures import FileStorage
+
 import constants
 import helper.ocr as ocr_helper
 from authenticator import UserAuthentication
-from fellow2kv.extension import api, db, multi_auth, storagemanager, storagemanager_doc2
-from flask import jsonify, request, send_file
-from flask_restx import Namespace, Resource, abort
+from fellow2kv.extension import (api, db, multi_auth, storagemanager,
+                                 storagemanager_doc2)
+
 from helper import doc_type_helper as dth
 from helper import generic_data_vault_helper as gdvh
 from helper import pdf as pdf_helper
@@ -30,7 +34,6 @@
 )
 from logger import get_logger
 from util import sync_wrapper
-from werkzeug.datastructures import FileStorage
 
 logger = get_logger()
 
@@ -283,39 +286,6 @@ def post(self):
                         }
                     )
 
-                """if (
-                    False
-                    and extract_tables
-                    and (
-                        not sent_to_ocr_server
-                        and document.get("tfidf_force_ocr", False)
-                    )
-                ):
-                    start_time = datetime.now()
-                    try:
-                        with tempfile.NamedTemporaryFile(suffix=".pdf") as of:
-                            storagemanager_doc2.download_file_on_stream(
-                                of, doc_path_pre_ocr
-                            )
-                            f.write(of.read())
-                            f.seek(0)
-                    except Exception as ex:
-                        logger.exception(f'An Error occurred. Message: {ex}')
-                        # pre ocr file is missing. copying current file as pre ocr file
-                        storagemanager_doc2.save_file(
-                            f.name, doc_path_pre_ocr, None
-                        )
-                        pass
-
-                    ocr_helper.get_ocred_document(user, f.name, f.name, True)
-                    storagemanager_doc2.save_file(f.name, doc_path, None)
-
-                    end_time = datetime.now()
-                    resp_json["time_logs"]["ocr_document"] = str(
-                        (end_time - start_time).total_seconds()
-                    )
-                """
-
                 # populates, doctype, locale and images from ai_document
                 deh.populate_basic_info(document, resp_json)
 
@@ -807,11 +777,12 @@ def post(self):
             doc_id = request.form.get("doc_id", 1)
             destination_dir = f"{doc2_base_directory}/{doc_id}"
             doc_storage = request.form.get("doc_storage", None)
-            file_path = f"documents/{doc_id}/{doc_id}.pdf"
+            file_path = f"{destination_dir}/{doc_id}.pdf"
+            doc_path_pre_ocr = file_path.replace(".pdf", "_pre_ocr.pdf")
             force_ocr = request.form.get("force_ocr", "false")
             force_ocr = True if force_ocr.lower() in ["true", "1"] else False
             if doc_storage and doc_storage == "fellowkv":
-                file_path = f"documents/{doc_id}.pdf"
+                file_path = f"{doc2_base_directory}/{doc_id}.pdf"
             with tempfile.NamedTemporaryFile(suffix=".pdf", mode="wb") as ufile:
                 try:
                     if (
@@ -828,16 +799,15 @@ def post(self):
 
                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)
                 # force_ocr = False
-                if doc_already_ocred:
-                    ocr_text = ocr_helper.get_ocr_text(ufile.name)
-                    # res = re.findall(r'(?i)natus\s?gmbh', ocr_text.replace("\n", " "), overlapped=True)
-                    # if "���" in ocr_text:  # or (res != None and len(res) > 0):
-                    #     force_ocr = True
-                if not doc_already_ocred or force_ocr:
-                    ocr_helper.get_ocred_document(
-                        user, ufile.name, ufile.name, force_ocr
+                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):
+                    ocr_document(
+                        user,
+                        doc_path_pre_ocr,
+                        ufile.name,
+                        force_ocr,
+                        False,
+                        {},
                     )
-                    ufile.seek(0)
                     storagemanager_doc2.save_file(
                         ufile.name, doc_id + ".pdf", destination_dir
                     )
@@ -939,6 +909,8 @@ def ocr_document(
     )
     # storagemanager_doc2.save_file(output_path, doc_path, None)
     end_time = datetime.now()
+    if "time_logs" not in resp_json:
+        resp_json["time_logs"] = {}
     resp_json["time_logs"]["ocr_document"] = str(
         (end_time - start_time).total_seconds()
     )
@@ -948,6 +920,8 @@ def ocr_document(
     else:
         ocr_module = "OCR Server"
 
+    if "flow_meta" not in resp_json:
+        resp_json["flow_meta"] = []
     resp_json["flow_meta"].append(
         {
             "name": flow_meta,
- cc9c27b5b7f7f72b748cb3b42b66dbb809d81d7d: Merge branch 'stage' into dev
Code changes:
@@ -17,8 +17,10 @@
 
 import fellow2kv.config as app_config
 from fellow2kv.config import AUTH_SERVICE_URL
+
 # from fellow2kv.app_initializer import db, ma
 from fellow2kv.extension import db
+
 # from fellow2kv.extension import db, ma
 from logger import get_logger
 
@@ -195,7 +197,10 @@ def check_for_app_authorization(self, app_key, quota=1):
             if current_date > sub_end_date:
                 return -1
 
-            if app_config.ENFORCE_QUOTA and int(float(found_app["pending_credit"])) < quota:
+            if (
+                app_config.ENFORCE_QUOTA
+                and int(float(found_app["pending_credit"])) < quota
+            ):
                 return -2
 
             return 1
@@ -256,8 +261,10 @@ def update_usage_log(self, app_key, quota_used=1, method_used=None):
         :return: A list of dictionaries. Each dictionary is a question.
         """
         return self.__update_usage_log(app_key, quota_used, None, method_used)
-       
-    def update_classification_usage_log(self, app_key, classification_quota_used=1, method_used=None):
+
+    def update_classification_usage_log(
+        self, app_key, classification_quota_used=1, method_used=None
+    ):
         """
         It updates the usage log of the app
 
@@ -266,10 +273,13 @@ def update_classification_usage_log(self, app_key, classification_quota_used=1,
         :param method_used: The method that was used to consume the quota
         :return: A list of dictionaries. Each dictionary is a question.
         """
-        return self.__update_usage_log(app_key, None, classification_quota_used, method_used)
-      
+        return self.__update_usage_log(
+            app_key, None, classification_quota_used, method_used
+        )
 
-    def __update_usage_log(self, app_key, credit_used=None, classification_credit_used=None, method=None):#
+    def __update_usage_log(
+        self, app_key, credit_used=None, classification_credit_used=None, method=None
+    ):  #
         if not self.get_subscription_token():
             return False
 
@@ -280,10 +290,18 @@ def __update_usage_log(self, app_key, credit_used=None, classification_credit_us
                 filtered_app = filtered_app[0]
 
             if filtered_app and credit_used and credit_used > 0:
-                filtered_app["pending_credit"] = Decimal(filtered_app["pending_credit"]) - Decimal(credit_used)
-            
-            if filtered_app and classification_credit_used and classification_credit_used > 0:
-                filtered_app["pending_credit"] = Decimal(filtered_app["pending_credit"]) - Decimal(classification_credit_used)
+                filtered_app["pending_credit"] = Decimal(
+                    filtered_app["pending_credit"]
+                ) - Decimal(credit_used)
+
+            if (
+                filtered_app
+                and classification_credit_used
+                and classification_credit_used > 0
+            ):
+                filtered_app["pending_credit"] = Decimal(
+                    filtered_app["pending_credit"]
+                ) - Decimal(classification_credit_used)
 
         try:
             headers = {"Authorization": "Bearer " + self.get_subscription_token()}
- 680d0597fb2e0d1dc3862d8df1a22f0700cb3579: fd
Code changes:
@@ -796,10 +796,6 @@ def post(self):
                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)
                 # force_ocr = False
                 if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):
-                    ocr_helper.get_ocred_document(
-                        user, ufile.name, ufile.name, force_ocr
-                    )
-                    ufile.seek(0)
                     ocr_document(
                         user,
                         doc_path_pre_ocr,
- 34bcaaf4233e20a7676a715b642b07ba55853c6b: fd
Code changes:
@@ -9,13 +9,15 @@
 import traceback
 from datetime import datetime
 
+from flask import jsonify, request, send_file
+from flask_restx import Namespace, Resource, abort
+from werkzeug.datastructures import FileStorage
+
 import constants
 import helper.ocr as ocr_helper
 from authenticator import UserAuthentication
 from fellow2kv.extension import (api, db, multi_auth, storagemanager,
                                  storagemanager_doc2)
-from flask import jsonify, request, send_file
-from flask_restx import Namespace, Resource, abort
 from helper import doc_type_helper as dth
 from helper import generic_data_vault_helper as gdvh
 from helper import pdf as pdf_helper
@@ -28,7 +30,6 @@
                          transform_to_normalized)
 from logger import get_logger
 from util import sync_wrapper
-from werkzeug.datastructures import FileStorage
 
 logger = get_logger()
 
@@ -281,39 +282,6 @@ def post(self):
                         }
                     )
 
-                """if (
-                    False
-                    and extract_tables
-                    and (
-                        not sent_to_ocr_server
-                        and document.get("tfidf_force_ocr", False)
-                    )
-                ):
-                    start_time = datetime.now()
-                    try:
-                        with tempfile.NamedTemporaryFile(suffix=".pdf") as of:
-                            storagemanager_doc2.download_file_on_stream(
-                                of, doc_path_pre_ocr
-                            )
-                            f.write(of.read())
-                            f.seek(0)
-                    except Exception as ex:
-                        logger.exception(f'An Error occurred. Message: {ex}')
-                        # pre ocr file is missing. copying current file as pre ocr file
-                        storagemanager_doc2.save_file(
-                            f.name, doc_path_pre_ocr, None
-                        )
-                        pass
-
-                    ocr_helper.get_ocred_document(user, f.name, f.name, True)
-                    storagemanager_doc2.save_file(f.name, doc_path, None)
-
-                    end_time = datetime.now()
-                    resp_json["time_logs"]["ocr_document"] = str(
-                        (end_time - start_time).total_seconds()
-                    )
-                """
-
                 # populates, doctype, locale and images from ai_document
                 deh.populate_basic_info(document, resp_json)
 
@@ -805,11 +773,12 @@ def post(self):
             doc_id = request.form.get("doc_id", 1)
             destination_dir = f"{doc2_base_directory}/{doc_id}"
             doc_storage = request.form.get("doc_storage", None)
-            file_path = f"documents/{doc_id}/{doc_id}.pdf"
+            file_path = f"{destination_dir}/{doc_id}.pdf"
+            doc_path_pre_ocr = file_path.replace(".pdf", "_pre_ocr.pdf")
             force_ocr = request.form.get("force_ocr", "false")
             force_ocr = True if force_ocr.lower() in ["true", "1"] else False
             if doc_storage and doc_storage == "fellowkv":
-                file_path = f"documents/{doc_id}.pdf"
+                file_path = f"{doc2_base_directory}/{doc_id}.pdf"
             with tempfile.NamedTemporaryFile(suffix=".pdf", mode="wb") as ufile:
                 try:
                     if (
@@ -826,16 +795,19 @@ def post(self):
 
                 doc_already_ocred = ocr_helper.is_doc_ocr(ufile.name)
                 # force_ocr = False
-                if doc_already_ocred:
-                    ocr_text = ocr_helper.get_ocr_text(ufile.name)
-                    # res = re.findall(r'(?i)natus\s?gmbh', ocr_text.replace("\n", " "), overlapped=True)
-                    # if "���" in ocr_text:  # or (res != None and len(res) > 0):
-                    #     force_ocr = True
-                if not doc_already_ocred or force_ocr:
+                if not ocr_helper.is_doc_ocr(ufile.name) or (force_ocr and ocr_helper.is_ocred_by_doc2(ufile.name)):
                     ocr_helper.get_ocred_document(
                         user, ufile.name, ufile.name, force_ocr
                     )
                     ufile.seek(0)
+                    ocr_document(
+                        user,
+                        doc_path_pre_ocr,
+                        ufile.name,
+                        force_ocr,
+                        False,
+                        {},
+                    )
                     storagemanager_doc2.save_file(
                         ufile.name, doc_id + ".pdf", destination_dir
                     )
@@ -937,6 +909,8 @@ def ocr_document(
     )
     # storagemanager_doc2.save_file(output_path, doc_path, None)
     end_time = datetime.now()
+    if "time_logs" not in resp_json:
+        resp_json["time_logs"] = {}
     resp_json["time_logs"]["ocr_document"] = str(
         (end_time - start_time).total_seconds()
     )
@@ -946,6 +920,8 @@ def ocr_document(
     else:
         ocr_module = "OCR Server"
 
+    if "flow_meta" not in resp_json:
+        resp_json["flow_meta"] = []
     resp_json["flow_meta"].append(
         {
             "name": flow_meta,
- 5ab3d3c54d0c09c0d867e4b36b97c5604d967673: Merge pull request #754 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -91,6 +91,8 @@ def get_document_tables(org_id, doc_type):
     "hide_label",
     "placeholder",
     "is_sub_doc_type_field",
+    "enforce_list_of_values",
+    "list_of_values",
 ]
 
 
@@ -317,7 +319,7 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type
             for i in range(row_order - len(rows)):
                 rows.append([])
         if row_order != None:
-            if field.get("field_type",'') == "CURRENCY":
+            if field.get("field_type", "") == "CURRENCY":
                 field["enforce_list_of_values"] = True
                 field["list_of_values"] = "ISO_Currency"
             rows[row_order - 1].append(field)
- f6603f7c6d2487c16248f5f707c985e8de629bbb: Merge pull request #753 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -91,6 +91,8 @@ def get_document_tables(org_id, doc_type):
     "hide_label",
     "placeholder",
     "is_sub_doc_type_field",
+    "enforce_list_of_values",
+    "list_of_values",
 ]
 
 
- 5dfba729db8a45f6ce6cf4133974052a514b71dd: fd
Code changes:
@@ -91,6 +91,8 @@ def get_document_tables(org_id, doc_type):
     "hide_label",
     "placeholder",
     "is_sub_doc_type_field",
+    "enforce_list_of_values",
+    "list_of_values",
 ]
 
 
- d5a30e332655c15cbcc20414928b9afe2eda29d1: Merge pull request #752 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -1,9 +1,10 @@
 from collections import defaultdict
 
+from sqlalchemy import or_
+
 from fellow2kv.extension import db
 from helper.doc_type_helper import get_document_types
 from models import DocumentType, SubDocumentType
-from sqlalchemy import or_
 
 
 def get_document_fields_info(org_id, doc_type, sub_doc_type):
@@ -316,6 +317,9 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type
             for i in range(row_order - len(rows)):
                 rows.append([])
         if row_order != None:
+            if field.get("field_type",'') == "CURRENCY":
+                field["enforce_list_of_values"] = True
+                field["list_of_values"] = "ISO_Currency"
             rows[row_order - 1].append(field)
 
     for grp in groups:
- 8efbf52ca722316287bda61d1dabf9409d245859: Merge pull request #751 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -1,9 +1,10 @@
 from collections import defaultdict
 
+from sqlalchemy import or_
+
 from fellow2kv.extension import db
 from helper.doc_type_helper import get_document_types
 from models import DocumentType, SubDocumentType
-from sqlalchemy import or_
 
 
 def get_document_fields_info(org_id, doc_type, sub_doc_type):
@@ -316,6 +317,9 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type
             for i in range(row_order - len(rows)):
                 rows.append([])
         if row_order != None:
+            if field.get("field_type",'') == "CURRENCY":
+                field["enforce_list_of_values"] = True
+                field["list_of_values"] = "ISO_Currency"
             rows[row_order - 1].append(field)
 
     for grp in groups:
- 66231c0916ee0b730fd209b41add6c3df892bc64: fd
Code changes:
@@ -1,9 +1,10 @@
 from collections import defaultdict
 
+from sqlalchemy import or_
+
 from fellow2kv.extension import db
 from helper.doc_type_helper import get_document_types
 from models import DocumentType, SubDocumentType
-from sqlalchemy import or_
 
 
 def get_document_fields_info(org_id, doc_type, sub_doc_type):
@@ -316,6 +317,9 @@ def __get_layout_groups(db, doc_type, sub_doc_type, profile, org_id, layout_type
             for i in range(row_order - len(rows)):
                 rows.append([])
         if row_order != None:
+            if field.get("field_type",'') == "CURRENCY":
+                field["enforce_list_of_values"] = True
+                field["list_of_values"] = "ISO_Currency"
             rows[row_order - 1].append(field)
 
     for grp in groups:
- c8a5ed28f0c7baa583b9cc68c51dfc8fea92f8c2: Merge pull request #750 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -4,15 +4,15 @@
 def get_lov_values(org_id, key):
     query = f"""
         Select
-            value
+            value, org_id
         From
             lov_list_of_value llov
         Where
-            llov.org_id ilike '{org_id}'
+            llov.org_id in ('{org_id}','DEFAULT')
             and llov.key ilike '{key}'
             and llov.is_deleted = false
     """
     results = db.engine.execute(query)
     results_list = [dict(r) for r in results]
     values_list = [r["value"] for r in results_list]
-    return values_list
+    return results_list
- 20f0ee0888166cc20129ae50fe3008d2990f31d2: Merge branch 'sandbox' into stage
- db3ca068d2c885deaaca6322f119fad2a5772d46: Merge pull request #749 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -4,15 +4,15 @@
 def get_lov_values(org_id, key):
     query = f"""
         Select
-            value
+            value, org_id
         From
             lov_list_of_value llov
         Where
-            llov.org_id ilike '{org_id}'
+            llov.org_id in ('{org_id}','DEFAULT')
             and llov.key ilike '{key}'
             and llov.is_deleted = false
     """
     results = db.engine.execute(query)
     results_list = [dict(r) for r in results]
     values_list = [r["value"] for r in results_list]
-    return values_list
+    return results_list
- f3007fb2e267b3ac7e72ddcbad55c556e1e67512: fd
Code changes:
@@ -4,15 +4,15 @@
 def get_lov_values(org_id, key):
     query = f"""
         Select
-            value
+            value, org_id
         From
             lov_list_of_value llov
         Where
-            llov.org_id ilike '{org_id}'
+            llov.org_id in ('{org_id}','DEFAULT')
             and llov.key ilike '{key}'
             and llov.is_deleted = false
     """
     results = db.engine.execute(query)
     results_list = [dict(r) for r in results]
     values_list = [r["value"] for r in results_list]
-    return values_list
+    return results_list
- 7fe528a752c2e5b49aa8921b90eaf0081db90e4c: fd
Code changes:
@@ -5,20 +5,16 @@
 from enum import Enum
 from operator import or_
 
-from authenticator import UserAuthentication
-from fellow2kv.extension import api, db, multi_auth
 from flask import request
 from flask_restx import Namespace, Resource, abort
+
+from authenticator import UserAuthentication
+from fellow2kv.extension import api, db, multi_auth
 from helper import util
 from helper.layout import layout_fields_helper as lfh
 from logger import get_logger
-from models import (
-    AlchemyEncoder,
-    ColumnValidationRules,
-    DocumentTable,
-    DocumentTableColumn,
-    DocumentType,
-)
+from models import (AlchemyEncoder, ColumnValidationRules, DocumentTable,
+                    DocumentTableColumn, DocumentType)
 
 logger = get_logger("document_table_settings")
 
@@ -144,7 +140,8 @@ def get(self):
                     when cvr.id is not null then cvr.is_hidden
                     else dcvr.is_hidden
                 end as is_hidden,
-                dtc.org_id
+                dtc.org_id,
+                dtc.column_type
 
             from
                 document_table dt
