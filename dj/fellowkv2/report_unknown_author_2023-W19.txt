None: 10 commits for week 2023-W19
Author image: https://avatars.githubusercontent.com/u/83513548?v=4
- 4bf5fa3b4a578bc29cd1f7dab8c77d87d4465813: fd
Code changes:
@@ -0,0 +1,30 @@
+"""empty message
+
+Revision ID: 8de61b51c2db
+Revises: 94e7ca15c0d3
+Create Date: 2023-05-10 10:54:50.447513
+
+"""
+from alembic import op
+import sqlalchemy as sa
+
+
+# revision identifiers, used by Alembic.
+revision = '8de61b51c2db'
+down_revision = '94e7ca15c0d3'
+branch_labels = None
+depends_on = None
+
+
+def upgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.add_column('field', sa.Column('list_of_values', sa.String(length=100), nullable=True))
+    op.add_column('field', sa.Column('enforce_list_of_values', sa.Boolean(), server_default='f', nullable=False))
+    # ### end Alembic commands ###
+
+
+def downgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.drop_column('field', 'enforce_list_of_values')
+    op.drop_column('field', 'list_of_values')
+    # ### end Alembic commands ###
- 00ea3a94078428343d19cca53465cf8a0891c6c6: Merge branch 'stage' into dev
- 02236e5c7079e695454f2458c5becb9d55612f97: fd
Code changes:
@@ -20,7 +20,7 @@
 ERODED_STANDARD_FILL_RATIO = 13.26150272572172
 
 
-@multiple_attempts(max_attempts=3)
+@multiple_attempts(max_attempts=3, sleep=10)
 def get_image_from_url(img_url):
     # Downloads image from url and returns cv2 image.
     with tempfile.NamedTemporaryFile(suffix=".pdf") as ufile:
- 258c882f2789ddd8fff9fcee9303160d63110e56: Merge pull request #894 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -9,6 +9,7 @@
 import numpy as np
 
 import fellow2kv.config as config
+from util import multiple_attempts
 
 kernel = np.ones((3, 3), dtype=np.uint8)
 kernel2 = np.ones((5, 5), dtype=np.uint8)
@@ -18,7 +19,7 @@
 
 ERODED_STANDARD_FILL_RATIO = 13.26150272572172
 
-
+@multiple_attempts(max_attempts=3)
 def get_image_from_url(img_url):
     # Downloads image from url and returns cv2 image.
     with tempfile.NamedTemporaryFile(suffix=".pdf") as ufile:
- 12f71d449d3b5e5e99c8cdc3f9631a96bf727837: fd
Code changes:
@@ -9,7 +9,7 @@
 import numpy as np
 
 import fellow2kv.config as config
-from util.module_wrapper import multiple_attempts
+from util import multiple_attempts
 
 kernel = np.ones((3, 3), dtype=np.uint8)
 kernel2 = np.ones((5, 5), dtype=np.uint8)
- 9477a22acc53003d733010d81c0b2343e2c5d422: fd
Code changes:
@@ -9,6 +9,7 @@
 import numpy as np
 
 import fellow2kv.config as config
+from util.module_wrapper import multiple_attempts
 
 kernel = np.ones((3, 3), dtype=np.uint8)
 kernel2 = np.ones((5, 5), dtype=np.uint8)
@@ -18,7 +19,7 @@
 
 ERODED_STANDARD_FILL_RATIO = 13.26150272572172
 
-
+@multiple_attempts(max_attempts=3)
 def get_image_from_url(img_url):
     # Downloads image from url and returns cv2 image.
     with tempfile.NamedTemporaryFile(suffix=".pdf") as ufile:
- 4bed7a41ccb4268561b60b7599a0f8b1e693b492: Merge pull request #892 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -1,4 +1,3 @@
-import json
 import math
 import operator
 import os
@@ -7,10 +6,10 @@
 import urllib
 
 import cv2
-import fellow2kv.config as config
-import img2pdf
 import numpy as np
 
+import fellow2kv.config as config
+
 kernel = np.ones((3, 3), dtype=np.uint8)
 kernel2 = np.ones((5, 5), dtype=np.uint8)
 
@@ -24,9 +23,9 @@ def get_image_from_url(img_url):
     # Downloads image from url and returns cv2 image.
     with tempfile.NamedTemporaryFile(suffix=".pdf") as ufile:
         try:
-            urllib.urlretrieve(img_url, ufile.name)
-        except:
             urllib.request.urlretrieve(img_url, ufile.name)
+        except:
+            urllib.urlretrieve(img_url, ufile.name)
         ufile.seek(0)
         img = cv2.imread(ufile.name)
         return img
@@ -176,18 +175,19 @@ def get_fill_percentage_from_image(
         box_img = None
         temp_img = img[y0:y1, x0:x1]
 
-        if True:
+        if False:
             if config.IS_DEBUG:
                 # dir_path = f"debugging/field_cropped_images/{doc_id}"
-                dir_path = f"debugging/field_cropped_images_full"
+                dir_path = f"debugging/field_cropped_images_full/field_{key}"
                 x_increase_factor = -5
                 y_increase_factor = -5
                 if not os.path.exists(dir_path):
                     os.makedirs(dir_path)
-                cv2.imwrite(
-                    f"{dir_path}/{doc_id}checkbox_{key}.jpg",
-                    img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],
-                )
+                if "GM_" in key or True:
+                    cv2.imwrite(
+                        f"{dir_path}/{doc_id}checkbox_{key}.jpg",
+                        img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],
+                    )
 
         if True:  # not reference_key == "bottom_checkboxes":
             threshold = height / 120 * width / 120
@@ -215,11 +215,14 @@ def get_fill_percentage_from_image(
                 box_img, no_of_sections=7
             )  # get_fill_percentage(box_img) * fill_factor
             if config.IS_DEBUG:
-                # dir_path = f"debugging/field_cropped_images/{doc_id}"
-                dir_path = f"debugging/field_cropped_images/{doc_id}"
-                if not os.path.exists(dir_path):
-                    os.makedirs(dir_path)
-                cv2.imwrite(f"{dir_path}/checkbox_{key}.jpg", box_img)
+                try:
+                    # dir_path = f"debugging/field_cropped_images/{doc_id}"
+                    dir_path = f"debugging/field_cropped_images/{doc_id}"
+                    if not os.path.exists(dir_path):
+                        os.makedirs(dir_path)
+                    cv2.imwrite(f"{dir_path}/checkbox_{key}.jpg", box_img)
+                except:
+                    pass
 
         rand_color = tuple(random.choices(range(256), k=3))
         cv2.rectangle(cv2_image, (x0, y0), (x1, y1), rand_color, 2)
- 6021ed0bf94c38b2350057ff840faab63791a903: fd
Code changes:
@@ -1,4 +1,3 @@
-import json
 import math
 import operator
 import os
@@ -7,10 +6,10 @@
 import urllib
 
 import cv2
-import fellow2kv.config as config
-import img2pdf
 import numpy as np
 
+import fellow2kv.config as config
+
 kernel = np.ones((3, 3), dtype=np.uint8)
 kernel2 = np.ones((5, 5), dtype=np.uint8)
 
@@ -24,9 +23,9 @@ def get_image_from_url(img_url):
     # Downloads image from url and returns cv2 image.
     with tempfile.NamedTemporaryFile(suffix=".pdf") as ufile:
         try:
-            urllib.urlretrieve(img_url, ufile.name)
-        except:
             urllib.request.urlretrieve(img_url, ufile.name)
+        except:
+            urllib.urlretrieve(img_url, ufile.name)
         ufile.seek(0)
         img = cv2.imread(ufile.name)
         return img
@@ -176,18 +175,19 @@ def get_fill_percentage_from_image(
         box_img = None
         temp_img = img[y0:y1, x0:x1]
 
-        if True:
+        if False:
             if config.IS_DEBUG:
                 # dir_path = f"debugging/field_cropped_images/{doc_id}"
-                dir_path = f"debugging/field_cropped_images_full"
+                dir_path = f"debugging/field_cropped_images_full/field_{key}"
                 x_increase_factor = -5
                 y_increase_factor = -5
                 if not os.path.exists(dir_path):
                     os.makedirs(dir_path)
-                cv2.imwrite(
-                    f"{dir_path}/{doc_id}checkbox_{key}.jpg",
-                    img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],
-                )
+                if "GM_" in key or True:
+                    cv2.imwrite(
+                        f"{dir_path}/{doc_id}checkbox_{key}.jpg",
+                        img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],
+                    )
 
         if True:  # not reference_key == "bottom_checkboxes":
             threshold = height / 120 * width / 120
@@ -215,11 +215,14 @@ def get_fill_percentage_from_image(
                 box_img, no_of_sections=7
             )  # get_fill_percentage(box_img) * fill_factor
             if config.IS_DEBUG:
-                # dir_path = f"debugging/field_cropped_images/{doc_id}"
-                dir_path = f"debugging/field_cropped_images/{doc_id}"
-                if not os.path.exists(dir_path):
-                    os.makedirs(dir_path)
-                cv2.imwrite(f"{dir_path}/checkbox_{key}.jpg", box_img)
+                try:
+                    # dir_path = f"debugging/field_cropped_images/{doc_id}"
+                    dir_path = f"debugging/field_cropped_images/{doc_id}"
+                    if not os.path.exists(dir_path):
+                        os.makedirs(dir_path)
+                    cv2.imwrite(f"{dir_path}/checkbox_{key}.jpg", box_img)
+                except:
+                    pass
 
         rand_color = tuple(random.choices(range(256), k=3))
         cv2.rectangle(cv2_image, (x0, y0), (x1, y1), rand_color, 2)
- 8c6456e2871460add10908bdaf7d7b289cfc005e: format
Code changes:
@@ -60,4 +60,4 @@ def get_skew_angle(image_path):
 
     grayscale = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
     angle = determine_skew(grayscale)
-    return angle
+    return angle
\ No newline at end of file
- 9e168d963f85b550799c23255ad828e1e97ff53c: fd
Code changes:
@@ -20,7 +20,7 @@ def rotate_simple(image, angle):
 
 
 def deskew_image(
-    image_path, low_res_image_path=None
+    image_path, low_res_image_path=None 
 ):  # low res image = img_to_check_skew
     """
     Deskews the image
