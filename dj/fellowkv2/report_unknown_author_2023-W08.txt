None: 30 commits for week 2023-W08
Author image: https://avatars.githubusercontent.com/u/83513548?v=4
- fec52f80f56c579ec8ffa399d79f155a1ea8faa8: Merge pull request #782 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -8,8 +8,10 @@
 import pandas as pd
 
 from fellow2kv.extension import storage_manager_doc2
-from helper.form_extractor.proximity import (get_proximity_keywords,
-                                             get_proximity_keywords_for_image)
+from helper.form_extractor.proximity import (
+    get_proximity_keywords,
+    get_proximity_keywords_for_image,
+)
 from helper.util import transform_from_normalized_coords_object
 
 
@@ -492,16 +494,15 @@ def get_closest_references(
             height = round(ref.get("y0") / ref.get("normalizedY0"))
             new_from_point = (width * from_point[0], height * from_point[1])
 
-            if (
-                token_extremes
-                and (abs(new_from_point[0] - ref_point[0])
+            if token_extremes and (
+                abs(new_from_point[0] - ref_point[0])
                 > (token_extremes["right"] - token_extremes["left"])
                 * width
                 / dimensions_divisor
                 or abs(new_from_point[1] - ref_point[1])
                 > (token_extremes["bottom"] - token_extremes["top"])
                 * height
-                / dimensions_divisor)
+                / dimensions_divisor
             ):
                 continue
             distance = calculate_distance(
- 6a91a9429133dd6f4afeb856c5e18be3e233ad8d: Merge pull request #781 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -0,0 +1,28 @@
+"""empty message
+
+Revision ID: 777bef049c09
+Revises: adbde2b3d192
+Create Date: 2023-02-24 14:46:53.188897
+
+"""
+from alembic import op
+import sqlalchemy as sa
+
+
+# revision identifiers, used by Alembic.
+revision = '777bef049c09'
+down_revision = 'adbde2b3d192'
+branch_labels = None
+depends_on = None
+
+
+def upgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.add_column('lov_list_of_value', sa.Column('synonyms', sa.Text(), nullable=True))
+    # ### end Alembic commands ###
+
+
+def downgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.drop_column('lov_list_of_value', 'synonyms')
+    # ### end Alembic commands ###
- 4994085d16fc640f5c9ca92408e5f2640a67c32f: fd
Code changes:
@@ -0,0 +1,28 @@
+"""empty message
+
+Revision ID: 777bef049c09
+Revises: adbde2b3d192
+Create Date: 2023-02-24 14:46:53.188897
+
+"""
+from alembic import op
+import sqlalchemy as sa
+
+
+# revision identifiers, used by Alembic.
+revision = '777bef049c09'
+down_revision = 'adbde2b3d192'
+branch_labels = None
+depends_on = None
+
+
+def upgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.add_column('lov_list_of_value', sa.Column('synonyms', sa.Text(), nullable=True))
+    # ### end Alembic commands ###
+
+
+def downgrade():
+    # ### commands auto generated by Alembic - please adjust! ###
+    op.drop_column('lov_list_of_value', 'synonyms')
+    # ### end Alembic commands ###
- 84822d911e9695137d1584912f4f012fb4f2e9c0: Merge pull request #780 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -6,11 +6,10 @@
 
 import numpy as np
 import pandas as pd
+
 from fellow2kv.extension import storage_manager_doc2
-from helper.form_extractor.proximity import (
-    get_proximity_keywords,
-    get_proximity_keywords_for_image,
-)
+from helper.form_extractor.proximity import (get_proximity_keywords,
+                                             get_proximity_keywords_for_image)
 from helper.util import transform_from_normalized_coords_object
 
 
@@ -270,7 +269,7 @@ def get_adjusted_points_v2(page_proximity_data, field_point1, field_point2):
         layout_ref_tokens,
         field_point1,
         number_of_points=number_of_points,
-        token_extremes=page_data["token_extremes"],
+        token_extremes=page_data.get("token_extremes", None),
     )
     if not closest_refs:
         return (field_point1[0], field_point1[1]), (field_point2[0], field_point2[1])
@@ -495,14 +494,14 @@ def get_closest_references(
 
             if (
                 token_extremes
-                and abs(new_from_point[0] - ref_point[0])
+                and (abs(new_from_point[0] - ref_point[0])
                 > (token_extremes["right"] - token_extremes["left"])
                 * width
                 / dimensions_divisor
                 or abs(new_from_point[1] - ref_point[1])
                 > (token_extremes["bottom"] - token_extremes["top"])
                 * height
-                / dimensions_divisor
+                / dimensions_divisor)
             ):
                 continue
             distance = calculate_distance(
- 61fb73b17bd73b959a9a86bc066c7106dbccb134: Merge pull request #779 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -6,11 +6,10 @@
 
 import numpy as np
 import pandas as pd
+
 from fellow2kv.extension import storage_manager_doc2
-from helper.form_extractor.proximity import (
-    get_proximity_keywords,
-    get_proximity_keywords_for_image,
-)
+from helper.form_extractor.proximity import (get_proximity_keywords,
+                                             get_proximity_keywords_for_image)
 from helper.util import transform_from_normalized_coords_object
 
 
@@ -270,7 +269,7 @@ def get_adjusted_points_v2(page_proximity_data, field_point1, field_point2):
         layout_ref_tokens,
         field_point1,
         number_of_points=number_of_points,
-        token_extremes=page_data["token_extremes"],
+        token_extremes=page_data.get("token_extremes", None),
     )
     if not closest_refs:
         return (field_point1[0], field_point1[1]), (field_point2[0], field_point2[1])
@@ -495,14 +494,14 @@ def get_closest_references(
 
             if (
                 token_extremes
-                and abs(new_from_point[0] - ref_point[0])
+                and (abs(new_from_point[0] - ref_point[0])
                 > (token_extremes["right"] - token_extremes["left"])
                 * width
                 / dimensions_divisor
                 or abs(new_from_point[1] - ref_point[1])
                 > (token_extremes["bottom"] - token_extremes["top"])
                 * height
-                / dimensions_divisor
+                / dimensions_divisor)
             ):
                 continue
             distance = calculate_distance(
- 46f4bdf5ad1d7a88c77549e7216c98c10a6e3305: fd
Code changes:
@@ -20,12 +20,13 @@
 
 import pandas as pd
 import texthero as hero
-from fellow2kv.extension import db
-from models import GenericDataVault, TfidfDocs
 from sklearn.feature_extraction.text import TfidfVectorizer
 from sklearn.metrics.pairwise import linear_kernel
 from sqlalchemy import and_, desc, or_
 
+from fellow2kv.extension import db
+from models import GenericDataVault, TfidfDocs
+
 # logger = get_logger("tf_idf_helper")
 logger = get_logger()
 
@@ -442,60 +443,82 @@ def handle_tfidf_v4(document, auto_types):  # , auto_types=[]
                 classify_rec = parent_record
                 weight = float(record.weight)
 
-        resp_json["temp_tfidf_id"] = record.id
-        resp_json["tfidf_id"] = classify_rec.id
-        resp_json["tfidf_doc_id"] = classify_rec.doc_id
-        resp_json["tfidf_weight"] = weight
-        resp_json["tfidf_doc_type"] = classify_rec.docType
-        resp_json["tfidf_locale"] = classify_rec.doc_locale
-        resp_json["tfidf_force_ocr"] = classify_rec.force_ocr
-
-    else:
-        # Creating tf-idf record and checking for similar document.
-        # record = (
-        #     db.session.query(TfidfDocs)
-        #     .filter(
-        #         or_(
-        #             TfidfDocs.doc_id == document.get("doc_id", "no_id"),
-        #             TfidfDocs.doc_text_hash == doc_text_hash,
-        #         )
-        #     )
-        #     .first()
-        # )
-        # if not record:
-        record = TfidfDocs()
-        record.id = str(uuid.uuid4())
-        record.doc_id = document.get("doc_id", None)
-        record.org_id = document["org_id"]
-        # record.org_id = document.get("org_id",None)
-        # record.docType = document.get("doc_type","")
-        # record.doc_origin = document.get("doc_origin","")
-        # record.doc_locale = document.get("doc_locale","")
-        record.doc_text = doc_text
-
-        record.doc_text_hash = doc_text_hash
-        record.is_deleted = False
-        db.session.add(record)
-        db.session.commit()
-        db.session.refresh(record)  # to refresh db record.
+                resp_json["temp_tfidf_id"] = record.id
+                resp_json["tfidf_id"] = classify_rec.id
+                resp_json["tfidf_doc_id"] = classify_rec.doc_id
+                resp_json["tfidf_weight"] = weight
+                resp_json["tfidf_doc_type"] = classify_rec.docType
+                resp_json["tfidf_locale"] = classify_rec.doc_locale
+                resp_json["tfidf_force_ocr"] = classify_rec.force_ocr
+
+                resp_json["filter_values"] = [resp_json["tfidf_id"]]
+                return resp_json
+                # return only when parent record exists. otherwise create a new record below
+            else:
+                # invalid record, so orphan this record and new will be created.
+                record.org_id = None
+                db.session.commit()
+                db.session.refresh(record) 
 
-        threshold_pref = (
-            db.session.query(GenericDataVault)
-            .filter(
-                GenericDataVault.main_key == "TFIDF_DISTANCE_THRESHOLD",
-                GenericDataVault.is_deleted == False,
-                GenericDataVault.org_id == "DEFAULT",
-            )
-            .first()
+        
+        else:
+            # if parent id is not found, then use this document as the parent.
+            resp_json["temp_tfidf_id"] = record.id
+            resp_json["tfidf_id"] = classify_rec.id
+            resp_json["tfidf_doc_id"] = classify_rec.doc_id
+            resp_json["tfidf_weight"] = weight
+            resp_json["tfidf_doc_type"] = classify_rec.docType
+            resp_json["tfidf_locale"] = classify_rec.doc_locale
+            resp_json["tfidf_force_ocr"] = classify_rec.force_ocr
+
+            resp_json["filter_values"] = [resp_json["tfidf_id"]]
+            return resp_json
+            
+    # Creating tf-idf record and checking for similar document.
+    # record = (
+    #     db.session.query(TfidfDocs)
+    #     .filter(
+    #         or_(
+    #             TfidfDocs.doc_id == document.get("doc_id", "no_id"),
+    #             TfidfDocs.doc_text_hash == doc_text_hash,
+    #         )
+    #     )
+    #     .first()
+    # )
+    # if not record:
+    record = TfidfDocs()
+    record.id = str(uuid.uuid4())
+    record.doc_id = document.get("doc_id", None)
+    record.org_id = document["org_id"]
+    # record.org_id = document.get("org_id",None)
+    # record.docType = document.get("doc_type","")
+    # record.doc_origin = document.get("doc_origin","")
+    # record.doc_locale = document.get("doc_locale","")
+    record.doc_text = doc_text
+
+    record.doc_text_hash = doc_text_hash
+    record.is_deleted = False
+    db.session.add(record)
+    db.session.commit()
+    db.session.refresh(record)  # to refresh db record.
+
+    threshold_pref = (
+        db.session.query(GenericDataVault)
+        .filter(
+            GenericDataVault.main_key == "TFIDF_DISTANCE_THRESHOLD",
+            GenericDataVault.is_deleted == False,
+            GenericDataVault.org_id == "DEFAULT",
         )
+        .first()
+    )
 
-        threshold = 0.65
-        if threshold_pref:
-            threshold = threshold_pref.h_float_value_1
-        # return find_closest_matches(record.id, threshold)
-        resp_json = get_similar_documents(
-            threshold, record  # , auto_types_array
-        )  # auto_types
+    threshold = 0.65
+    if threshold_pref:
+        threshold = threshold_pref.h_float_value_1
+    # return find_closest_matches(record.id, threshold)
+    resp_json = get_similar_documents(
+        threshold, record  # , auto_types_array
+    )  # auto_types
 
     resp_json["filter_values"] = [resp_json["tfidf_id"]]
     return resp_json
- 08df9b7893cfc7388e0d1787e172d3ed95b14023: fd
Code changes:
@@ -10,11 +10,9 @@
 from helper.extract_util import Extractor
 from helper.field_extractors.adjusted_coordinates import get_adjusted_coords
 from helper.form_extractor.fill_ratio import (
-    get_fill_percentage_from_image_url,
-    strip_box,
-    strip_box_special,
-)
-from helper.util import transform_from_normalized_coords_object, transform_to_normalized
+    get_fill_percentage_from_image_url, strip_box, strip_box_special)
+from helper.util import (transform_from_normalized_coords_object,
+                         transform_to_normalized)
 from logger.logger import get_logger
 
 logger = get_logger("fellowkv-deh")
@@ -55,7 +53,6 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
 def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=1):
     page_number = start_page
     ai_extractor = Extractor(document, "", 0)
-    checkbox_fields = [df for df in checkbox_fields if df["field_type"] == "BOOLEAN"]
     if not checkbox_fields:
         return []
 
- a0480fcd5f59b77d1f4856c4499bf6fae000c478: fd
Code changes:
@@ -6,11 +6,10 @@
 
 import numpy as np
 import pandas as pd
+
 from fellow2kv.extension import storage_manager_doc2
-from helper.form_extractor.proximity import (
-    get_proximity_keywords,
-    get_proximity_keywords_for_image,
-)
+from helper.form_extractor.proximity import (get_proximity_keywords,
+                                             get_proximity_keywords_for_image)
 from helper.util import transform_from_normalized_coords_object
 
 
@@ -270,7 +269,7 @@ def get_adjusted_points_v2(page_proximity_data, field_point1, field_point2):
         layout_ref_tokens,
         field_point1,
         number_of_points=number_of_points,
-        token_extremes=page_data["token_extremes"],
+        token_extremes=page_data.get("token_extremes", None),
     )
     if not closest_refs:
         return (field_point1[0], field_point1[1]), (field_point2[0], field_point2[1])
@@ -495,14 +494,14 @@ def get_closest_references(
 
             if (
                 token_extremes
-                and abs(new_from_point[0] - ref_point[0])
+                and (abs(new_from_point[0] - ref_point[0])
                 > (token_extremes["right"] - token_extremes["left"])
                 * width
                 / dimensions_divisor
                 or abs(new_from_point[1] - ref_point[1])
                 > (token_extremes["bottom"] - token_extremes["top"])
                 * height
-                / dimensions_divisor
+                / dimensions_divisor)
             ):
                 continue
             distance = calculate_distance(
- d663d139f35f3440ef1e8664f68cb5f5cd8ca2dc: Merge pull request #776 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -29,7 +29,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
         document_first_page = classification_result.get("classification_page", 1)
 
     checkbox_fields = [df for df in fields_to_extract if df["field_type"] == "BOOLEAN"]
-    fields_result = extract_checkbox_fields(
+    checkbox_fields_result = extract_checkbox_fields(
         user, document, layout, checkbox_fields, document_first_page
     )
 
@@ -42,8 +42,9 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
     non_coords_fields_result = extract_non_coords_fields(non_coords_fields)
 
     populate_tr_ocr_info(document, text_fields_result)
+    populate_tr_ocr_info(document, checkbox_fields_result)
     # check_for_trocr(user, document, text_fields_result)
-    fields_result = fields_result + text_fields_result + non_coords_fields_result
+    fields_result = checkbox_fields_result + text_fields_result + non_coords_fields_result
 
     # TODO: Remove overlapping text fields
     return fields_result
@@ -362,7 +363,7 @@ def populate_tr_ocr_info(document, field_results):
                 field, field["adjusted_coords"]
             )  # to show on UI
 
-            is_checkbox_field = field.get("field_type", None) == "BOOLEAN"
+            is_checkbox_field = field.get("type", None) == "BOOLEAN"
             adjusted_coords = get_trocr_adjusted_coords(
                 field, page_image, is_checkbox_field
             )
- b9b423616e01184935b3df6a036b67cd9d5cc36f: Merge pull request #775 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -29,7 +29,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
         document_first_page = classification_result.get("classification_page", 1)
 
     checkbox_fields = [df for df in fields_to_extract if df["field_type"] == "BOOLEAN"]
-    fields_result = extract_checkbox_fields(
+    checkbox_fields_result = extract_checkbox_fields(
         user, document, layout, checkbox_fields, document_first_page
     )
 
@@ -42,8 +42,9 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
     non_coords_fields_result = extract_non_coords_fields(non_coords_fields)
 
     populate_tr_ocr_info(document, text_fields_result)
+    populate_tr_ocr_info(document, checkbox_fields_result)
     # check_for_trocr(user, document, text_fields_result)
-    fields_result = fields_result + text_fields_result + non_coords_fields_result
+    fields_result = checkbox_fields_result + text_fields_result + non_coords_fields_result
 
     # TODO: Remove overlapping text fields
     return fields_result
@@ -362,7 +363,7 @@ def populate_tr_ocr_info(document, field_results):
                 field, field["adjusted_coords"]
             )  # to show on UI
 
-            is_checkbox_field = field.get("field_type", None) == "BOOLEAN"
+            is_checkbox_field = field.get("type", None) == "BOOLEAN"
             adjusted_coords = get_trocr_adjusted_coords(
                 field, page_image, is_checkbox_field
             )
- 2f8a782528222f64f6274cba6326bcb212ed4a49: fd
Code changes:
@@ -27,7 +27,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
         document_first_page = classification_result.get("classification_page", 1)
 
     checkbox_fields = [df for df in fields_to_extract if df["field_type"] == "BOOLEAN"]
-    fields_result = extract_checkbox_fields(
+    checkbox_fields_result = extract_checkbox_fields(
         user, document, layout, checkbox_fields, document_first_page
     )
 
@@ -40,8 +40,9 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
     non_coords_fields_result = extract_non_coords_fields(non_coords_fields)
 
     populate_tr_ocr_info(document, text_fields_result)
+    populate_tr_ocr_info(document, checkbox_fields_result)
     # check_for_trocr(user, document, text_fields_result)
-    fields_result = fields_result + text_fields_result + non_coords_fields_result
+    fields_result = checkbox_fields_result + text_fields_result + non_coords_fields_result
 
     # TODO: Remove overlapping text fields
     return fields_result
@@ -360,7 +361,7 @@ def populate_tr_ocr_info(document, field_results):
                 field, field["adjusted_coords"]
             )  # to show on UI
 
-            is_checkbox_field = field.get("field_type", None) == "BOOLEAN"
+            is_checkbox_field = field.get("type", None) == "BOOLEAN"
             adjusted_coords = get_trocr_adjusted_coords(
                 field, page_image, is_checkbox_field
             )
- 4d46a9f6434c7bb364629ff4da0137a733695871: Update constants.py
Code changes:
@@ -27,6 +27,7 @@ class AI_REQUEST_TYPE:
 ]
 
 
+
 AMOUNT_STANDARD_FIELDS = [
     "NET_AMOUNT",
     "TAX_AMOUNT",
- 9e118a679fd47d6b1c7c516c5370420dcef756cb: fd
Code changes:
@@ -4,12 +4,13 @@
 from datetime import date
 
 from dateutil.relativedelta import relativedelta
-from fellow2kv.extension import api, db, multi_auth
 from flask import request
 from flask_restx import Namespace, Resource
-from logger import get_logger
 from sqlalchemy.sql.expression import text
 
+from fellow2kv.extension import api, db, multi_auth
+from logger import get_logger
+
 namespace = Namespace("Cache", description="Cache")
 
 parser = api.parser()
@@ -41,7 +42,7 @@ def post(self):
             return {"success": False, "message": "Some unknown error has occurred"}
 
 
-tables_to_sync = ["document_type", "sub_document_type"]
+tables_to_sync = ["document_type", "sub_document_type", "lov_list_of_value"]
 
 
 class UUIDEncoder(json.JSONEncoder):
- 4015c05b8f18d94ad034f5788006b4622b8a505d: Merge pull request #774 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -12,8 +12,11 @@
 from helper import util
 from helper.ai import ai_invoice
 from helper.layout import layout_fields_helper as lfh
-from helper.table_extractors import (common_table_helper, doc2_table_helper,
-                                     table_draft_helper)
+from helper.table_extractors import (
+    common_table_helper,
+    doc2_table_helper,
+    table_draft_helper,
+)
 from logger.logger import get_logger
 from models import DocumentLayoutTemplate
 from util import sync_wrapper
@@ -96,9 +99,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                     "is_table_field": True,
                     "table_field_name": layout_field.get("table_field_name", None),
                     "table_field_index": layout_field.get("table_field_index", None),
-                    "list_of_values": layout_field.get(
-                        "list_of_values", None
-                    ),
+                    "list_of_values": layout_field.get("list_of_values", None),
                 }
             doc_field = doc_fields.get(layout_field["name"], None)
             if not doc_field and not layout_field.get("is_table_field", False):
@@ -109,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                 ]
                 doc_field["tr_ocr_model_id"] = layout_field.get("tr_ocr_model_id", None)
                 doc_field["field_group"] = layout_field.get("field_group", None)
+                doc_field["checkbox_group"] = layout_field.get("checkbox_group", None)
                 doc_field["field_threshold"] = layout_field.get("field_threshold", None)
                 doc_field["list_of_values"] = layout_field.get("list_of_values", None)
                 layout_doc_fields.append(doc_field)
@@ -306,6 +308,9 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
                                     "is_table_field": True,
                                     "table_field_name": table_column["name"],
                                     "table_field_index": index,
+                                    "checkbox_group": table_column.get(
+                                        "checkbox_group", None
+                                    ),
                                 }
                             )
             elif not field_type == "TableOfCheckboxes":
- 54ff63472f88f8e87729b87482a0e747d3401f4e: Merge pull request #773 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                 ]
                 doc_field["tr_ocr_model_id"] = layout_field.get("tr_ocr_model_id", None)
                 doc_field["field_group"] = layout_field.get("field_group", None)
+                doc_field["checkbox_group"] = layout_field.get("checkbox_group", None)
                 doc_field["field_threshold"] = layout_field.get("field_threshold", None)
                 doc_field["list_of_values"] = layout_field.get("list_of_values", None)
                 layout_doc_fields.append(doc_field)
@@ -307,6 +308,9 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
                                     "is_table_field": True,
                                     "table_field_name": table_column["name"],
                                     "table_field_index": index,
+                                    "checkbox_group": table_column.get(
+                                        "checkbox_group", None
+                                    ),
                                 }
                             )
             elif not field_type == "TableOfCheckboxes":
- 0053cc518e18d418b3ea54887cd142f123803ece: fd
Code changes:
@@ -109,6 +109,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                 ]
                 doc_field["tr_ocr_model_id"] = layout_field.get("tr_ocr_model_id", None)
                 doc_field["field_group"] = layout_field.get("field_group", None)
+                doc_field["checkbox_group"] = layout_field.get("checkbox_group", None)
                 doc_field["field_threshold"] = layout_field.get("field_threshold", None)
                 doc_field["list_of_values"] = layout_field.get("list_of_values", None)
                 layout_doc_fields.append(doc_field)
@@ -306,6 +307,9 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
                                     "is_table_field": True,
                                     "table_field_name": table_column["name"],
                                     "table_field_index": index,
+                                    "checkbox_group": table_column.get(
+                                        "checkbox_group", None
+                                    ),
                                 }
                             )
             elif not field_type == "TableOfCheckboxes":
- a222c1fa066516f30542d82a7bbb1a45617793ed: Merge pull request #772 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -12,11 +12,8 @@
 from helper import util
 from helper.ai import ai_invoice
 from helper.layout import layout_fields_helper as lfh
-from helper.table_extractors import (
-    common_table_helper,
-    doc2_table_helper,
-    table_draft_helper,
-)
+from helper.table_extractors import (common_table_helper, doc2_table_helper,
+                                     table_draft_helper)
 from logger.logger import get_logger
 from models import DocumentLayoutTemplate
 from util import sync_wrapper
@@ -99,6 +96,9 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                     "is_table_field": True,
                     "table_field_name": layout_field.get("table_field_name", None),
                     "table_field_index": layout_field.get("table_field_index", None),
+                    "list_of_values": layout_field.get(
+                        "list_of_values", None
+                    ),
                 }
             doc_field = doc_fields.get(layout_field["name"], None)
             if not doc_field and not layout_field.get("is_table_field", False):
@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                 doc_field["tr_ocr_model_id"] = layout_field.get("tr_ocr_model_id", None)
                 doc_field["field_group"] = layout_field.get("field_group", None)
                 doc_field["field_threshold"] = layout_field.get("field_threshold", None)
+                doc_field["list_of_values"] = layout_field.get("list_of_values", None)
                 layout_doc_fields.append(doc_field)
             except:
                 layout_non_coords_fields.append(doc_field)
@@ -297,7 +298,7 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
                                     "coords": [column_coords["coord"]],
                                     "tr_ocr_model_id": table_column["tr_ocr_model_id"],
                                     "field_type": table_column.get(
-                                        "fieldType", "STRING"
+                                        "column_type", "STRING"
                                     ),
                                     "list_of_values": table_column.get(
                                         "list_of_values", None
- fae2b20eaeb97c90f3996ae7088ac7581254397b: Merge pull request #771 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -12,11 +12,8 @@
 from helper import util
 from helper.ai import ai_invoice
 from helper.layout import layout_fields_helper as lfh
-from helper.table_extractors import (
-    common_table_helper,
-    doc2_table_helper,
-    table_draft_helper,
-)
+from helper.table_extractors import (common_table_helper, doc2_table_helper,
+                                     table_draft_helper)
 from logger.logger import get_logger
 from models import DocumentLayoutTemplate
 from util import sync_wrapper
@@ -99,6 +96,9 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                     "is_table_field": True,
                     "table_field_name": layout_field.get("table_field_name", None),
                     "table_field_index": layout_field.get("table_field_index", None),
+                    "list_of_values": layout_field.get(
+                        "list_of_values", None
+                    ),
                 }
             doc_field = doc_fields.get(layout_field["name"], None)
             if not doc_field and not layout_field.get("is_table_field", False):
@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                 doc_field["tr_ocr_model_id"] = layout_field.get("tr_ocr_model_id", None)
                 doc_field["field_group"] = layout_field.get("field_group", None)
                 doc_field["field_threshold"] = layout_field.get("field_threshold", None)
+                doc_field["list_of_values"] = layout_field.get("list_of_values", None)
                 layout_doc_fields.append(doc_field)
             except:
                 layout_non_coords_fields.append(doc_field)
@@ -297,7 +298,7 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
                                     "coords": [column_coords["coord"]],
                                     "tr_ocr_model_id": table_column["tr_ocr_model_id"],
                                     "field_type": table_column.get(
-                                        "fieldType", "STRING"
+                                        "column_type", "STRING"
                                     ),
                                     "list_of_values": table_column.get(
                                         "list_of_values", None
- 2ba5df4e7df25cb9640b86f3d946717997443347: fd
Code changes:
@@ -12,11 +12,8 @@
 from helper import util
 from helper.ai import ai_invoice
 from helper.layout import layout_fields_helper as lfh
-from helper.table_extractors import (
-    common_table_helper,
-    doc2_table_helper,
-    table_draft_helper,
-)
+from helper.table_extractors import (common_table_helper, doc2_table_helper,
+                                     table_draft_helper)
 from logger.logger import get_logger
 from models import DocumentLayoutTemplate
 from util import sync_wrapper
@@ -99,6 +96,9 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                     "is_table_field": True,
                     "table_field_name": layout_field.get("table_field_name", None),
                     "table_field_index": layout_field.get("table_field_index", None),
+                    "list_of_values": layout_field.get(
+                        "list_of_values", None
+                    ),
                 }
             doc_field = doc_fields.get(layout_field["name"], None)
             if not doc_field and not layout_field.get("is_table_field", False):
@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):
                 doc_field["tr_ocr_model_id"] = layout_field.get("tr_ocr_model_id", None)
                 doc_field["field_group"] = layout_field.get("field_group", None)
                 doc_field["field_threshold"] = layout_field.get("field_threshold", None)
+                doc_field["list_of_values"] = layout_field.get("list_of_values", None)
                 layout_doc_fields.append(doc_field)
             except:
                 layout_non_coords_fields.append(doc_field)
@@ -297,7 +298,7 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
                                     "coords": [column_coords["coord"]],
                                     "tr_ocr_model_id": table_column["tr_ocr_model_id"],
                                     "field_type": table_column.get(
-                                        "fieldType", "STRING"
+                                        "column_type", "STRING"
                                     ),
                                     "list_of_values": table_column.get(
                                         "list_of_values", None
- 88d5938b29848c0cefddb3734cd22fa7d8bbb971: Merge pull request #770 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -146,5 +146,5 @@ build.sh
 test.py
 .vscode/*
 .DS_Store
-debugging/field_cropped_images/*
+debugging/*
 model_default
\ No newline at end of file
- 9e19582e90dd4f454fa6b7945441888ac3dda90c: Merge pull request #769 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -146,5 +146,5 @@ build.sh
 test.py
 .vscode/*
 .DS_Store
-debugging/field_cropped_images/*
+debugging/*
 model_default
\ No newline at end of file
- bcd322a6572cb3f09eaa097b3a9d0b8ef55b021f: Merge pull request #768 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -146,5 +146,5 @@ build.sh
 test.py
 .vscode/*
 .DS_Store
-debugging/field_cropped_images/*
+debugging/*
 model_default
\ No newline at end of file
- f81664404565e4437bac18ec20f3dd19605cc200: Merge branch 'stage' into dev
Code changes:
@@ -111,3 +111,4 @@ jobs:
           GHA_Meta: ${{ steps.output.outputs.new-version }}
         env:
           CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
+
- 127b4a9d4c28c028bfef551f3ef9e30fb6a17e99: fd
Code changes:
@@ -3,29 +3,20 @@
 import uuid
 from collections import defaultdict
 
+from sqlalchemy.sql import func
+
 from constants import INVOICE_MAPPING
 from fellow2kv.extension import db, storagemanager
 from helpdesk import create_new_customer, create_ticket
-from logger import get_logger
-from models import (
-    DocOriginRules,
-    FellowKVRule,
-    FellowKVRuleUser,
-    FellowKVSourceFile,
-    FellowKVTableColumnRule,
-    FellowKVTableRule,
-    TableFormattingRules,
-    TfidfDocs,
-)
-from sqlalchemy.sql import func
-
 from helper import doc2_util
-from helper.ai.ai_ocr import generate_hard_regex_from_string, generate_regex_from_string
-from helper.util import (
-    get_page,
-    transform_from_normalized,
-    transform_from_normalized_coords_object,
-)
+from helper.ai.ai_ocr import (generate_hard_regex_from_string,
+                              generate_regex_from_string)
+from helper.util import (get_page, transform_from_normalized,
+                         transform_from_normalized_coords_object)
+from logger import get_logger
+from models import (DocOriginRules, FellowKVRule, FellowKVRuleUser,
+                    FellowKVSourceFile, FellowKVTableColumnRule,
+                    FellowKVTableRule, TableFormattingRules, TfidfDocs)
 
 logger = get_logger("plugin-export-util")
 
@@ -1100,7 +1091,7 @@ def transform_to_rules(extractor, item):
                 rule_increase.append({"ruleID": field.get("rule"), "weight": 1})
 
         create_new_rule = False
-        if extraction_method == "AI" or field_updated or field["score"] < 40:
+        if not field.get("rule", None) or field_updated or (field.get("score", 40) < 40):
             create_new_rule = True
 
         if create_new_rule:
- 2783718bb76f5e5edfe49315a4356d15d25bfa66: fd
Code changes:
@@ -146,5 +146,5 @@ build.sh
 test.py
 .vscode/*
 .DS_Store
-debugging/field_cropped_images/*
+debugging/*
 model_default
\ No newline at end of file
- 5f8cbbf9320b01127135cef5210b64d76f5ccf9d: Merge pull request #767 from Fellow-Consulting-AG/stage

Stage
Code changes:
@@ -12,11 +12,8 @@
 from helper import util
 from helper.ai import ai_invoice
 from helper.layout import layout_fields_helper as lfh
-from helper.table_extractors import (
-    common_table_helper,
-    doc2_table_helper,
-    table_draft_helper,
-)
+from helper.table_extractors import (common_table_helper, doc2_table_helper,
+                                     table_draft_helper)
 from logger.logger import get_logger
 from models import DocumentLayoutTemplate
 from util import sync_wrapper
@@ -91,8 +88,18 @@ def extract_document_fields(doc_id, document, local_file_path, user):
         layout_doc_fields = []
         layout_non_coords_fields = []
         for layout_field in layout_fields:
+            layout_field_name = layout_field["name"]
+            if layout_field.get("is_table_field", False):
+                doc_fields[layout_field_name] = {
+                    "field_name": layout_field_name,
+                    "field_type": layout_field["field_type"],
+                    "is_table_field": True,
+                    "table_field_name": layout_field.get("table_field_name", None),
+                    "table_field_index": layout_field.get("table_field_index", None),
+
+                }
             doc_field = doc_fields.get(layout_field["name"], None)
-            if not doc_field:
+            if not doc_field and not layout_field.get("is_table_field", False):
                 continue
             try:
                 doc_field["coordinates"] = [
@@ -276,7 +283,25 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
         for layout_row in layout_group["rows"]:
             layout_fields = []
             field_type = layout_row.get("fieldType", "")
-            if not field_type == "TableOfCheckboxes":
+            if field_type == "ExtractedTable":
+                table_columns = layout_row["columns"]
+                for table_column in table_columns:
+                    columns_coords_array = table_column['coords']
+                    for index, column_coords in enumerate(columns_coords_array):
+                        if column_coords['coord']:
+                            filtered_layout_fields.append(
+                                {
+                                    "name": f"{table_column['name']}_{index}",
+                                    "coords": [column_coords['coord']],
+                                    "tr_ocr_model_id": table_column["tr_ocr_model_id"],
+                                    "field_type": table_column.get("fieldType", "STRING"),
+                                    "list_of_values": table_column.get("list_of_values", None),
+                                    "is_table_field": True,
+                                    "table_field_name": table_column['name'],
+                                    "table_field_index": index,
+                                }
+                            )
+            elif not field_type == "TableOfCheckboxes":
                 layout_fields = [layout_row]
             else:
                 if type(layout_row["tableBodyRows"]) is list:
- 8202e5f8f2e7a2f9e4cb2cc1998ca29f724dbd43: Merge branch 'sandbox' into stage
Code changes:
@@ -111,3 +111,4 @@ jobs:
           GHA_Meta: ${{ steps.output.outputs.new-version }}
         env:
           CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
+
- c756d131475cdf3dc2321f9274ab4e7c66244fae: Merge pull request #766 from Fellow-Consulting-AG/dev

fd
Code changes:
@@ -12,11 +12,8 @@
 from helper import util
 from helper.ai import ai_invoice
 from helper.layout import layout_fields_helper as lfh
-from helper.table_extractors import (
-    common_table_helper,
-    doc2_table_helper,
-    table_draft_helper,
-)
+from helper.table_extractors import (common_table_helper, doc2_table_helper,
+                                     table_draft_helper)
 from logger.logger import get_logger
 from models import DocumentLayoutTemplate
 from util import sync_wrapper
@@ -91,8 +88,18 @@ def extract_document_fields(doc_id, document, local_file_path, user):
         layout_doc_fields = []
         layout_non_coords_fields = []
         for layout_field in layout_fields:
+            layout_field_name = layout_field["name"]
+            if layout_field.get("is_table_field", False):
+                doc_fields[layout_field_name] = {
+                    "field_name": layout_field_name,
+                    "field_type": layout_field["field_type"],
+                    "is_table_field": True,
+                    "table_field_name": layout_field.get("table_field_name", None),
+                    "table_field_index": layout_field.get("table_field_index", None),
+
+                }
             doc_field = doc_fields.get(layout_field["name"], None)
-            if not doc_field:
+            if not doc_field and not layout_field.get("is_table_field", False):
                 continue
             try:
                 doc_field["coordinates"] = [
@@ -276,7 +283,25 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
         for layout_row in layout_group["rows"]:
             layout_fields = []
             field_type = layout_row.get("fieldType", "")
-            if not field_type == "TableOfCheckboxes":
+            if field_type == "ExtractedTable":
+                table_columns = layout_row["columns"]
+                for table_column in table_columns:
+                    columns_coords_array = table_column['coords']
+                    for index, column_coords in enumerate(columns_coords_array):
+                        if column_coords['coord']:
+                            filtered_layout_fields.append(
+                                {
+                                    "name": f"{table_column['name']}_{index}",
+                                    "coords": [column_coords['coord']],
+                                    "tr_ocr_model_id": table_column["tr_ocr_model_id"],
+                                    "field_type": table_column.get("fieldType", "STRING"),
+                                    "list_of_values": table_column.get("list_of_values", None),
+                                    "is_table_field": True,
+                                    "table_field_name": table_column['name'],
+                                    "table_field_index": index,
+                                }
+                            )
+            elif not field_type == "TableOfCheckboxes":
                 layout_fields = [layout_row]
             else:
                 if type(layout_row["tableBodyRows"]) is list:
- 6edb488bdad725525e4be80266725aef0837377e: Merge branch 'stage' into dev
Code changes:
@@ -10,9 +10,11 @@
 from helper.extract_util import Extractor
 from helper.field_extractors.adjusted_coordinates import get_adjusted_coords
 from helper.form_extractor.fill_ratio import (
-    get_fill_percentage_from_image_url, strip_box, strip_box_special)
-from helper.util import (transform_from_normalized_coords_object,
-                         transform_to_normalized)
+    get_fill_percentage_from_image_url,
+    strip_box,
+    strip_box_special,
+)
+from helper.util import transform_from_normalized_coords_object, transform_to_normalized
 from logger.logger import get_logger
 
 logger = get_logger("fellowkv-deh")
@@ -28,7 +30,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi
 
     checkbox_fields = [df for df in fields_to_extract if df["field_type"] == "BOOLEAN"]
     fields_result = extract_checkbox_fields(
-       user, document, layout, checkbox_fields, document_first_page
+        user, document, layout, checkbox_fields, document_first_page
     )
 
     text_fields = [df for df in fields_to_extract if not df["field_type"] == "BOOLEAN"]
@@ -127,8 +129,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=
     for index, checkbox_field in enumerate(checkbox_fields):
         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]
         field_type = checkbox_field["field_type"]
-        if not checkbox_field.get("tr_ocr_model_id",None):
-            checkbox_field["tr_ocr_model_id"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'
+        if not checkbox_field.get("tr_ocr_model_id", None):
+            checkbox_field["tr_ocr_model_id"] = "5a3e526f-371a-470b-aacd-75460c0b8a16"
         field_name = checkbox_field["field_name"]
         adjusted_coords = checkbox_field["adjusted_coords"]
         coords = transform_to_normalized(
@@ -159,6 +161,7 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=
             "is_table_field": checkbox_field.get("is_table_field", False),
             "table_field_name": checkbox_field.get("table_field_name", None),
             "table_field_index": checkbox_field.get("table_field_index", None)
+
         }
         fields.append(field)
     return fields
@@ -358,8 +361,10 @@ def populate_tr_ocr_info(document, field_results):
                 field, field["adjusted_coords"]
             )  # to show on UI
 
-            is_checkbox_field = (field.get("field_type",None) == "BOOLEAN")
-            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)
+            is_checkbox_field = field.get("field_type", None) == "BOOLEAN"
+            adjusted_coords = get_trocr_adjusted_coords(
+                field, page_image, is_checkbox_field
+            )
             if not adjusted_coords:
                 field["adjusted_coords"] = None
                 field.pop("confidence", None)
@@ -386,9 +391,13 @@ def populate_tr_ocr_info(document, field_results):
 
 def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):
     if is_checkbox_field:
-        strip_dim = 0,0,0,0
+        strip_dim = 0, 0, 0, 0
         return trocr_common.readjust_coordinates(
-            page_image, field_data["adjusted_coords"], strip_dim, v_padding=5, h_padding=5
+            page_image,
+            field_data["adjusted_coords"],
+            strip_dim,
+            v_padding=5,
+            h_padding=5,
         )
 
     field_cropped_image = trocr_common.get_image_from_coords(
- cc561d2cc4895cf79526e8ce90ae4f70eb10bf63: fd
Code changes:
@@ -12,11 +12,8 @@
 from helper import util
 from helper.ai import ai_invoice
 from helper.layout import layout_fields_helper as lfh
-from helper.table_extractors import (
-    common_table_helper,
-    doc2_table_helper,
-    table_draft_helper,
-)
+from helper.table_extractors import (common_table_helper, doc2_table_helper,
+                                     table_draft_helper)
 from logger.logger import get_logger
 from models import DocumentLayoutTemplate
 from util import sync_wrapper
@@ -91,8 +88,18 @@ def extract_document_fields(doc_id, document, local_file_path, user):
         layout_doc_fields = []
         layout_non_coords_fields = []
         for layout_field in layout_fields:
+            layout_field_name = layout_field["name"]
+            if layout_field.get("is_table_field", False):
+                doc_fields[layout_field_name] = {
+                    "field_name": layout_field_name,
+                    "field_type": layout_field["field_type"],
+                    "is_table_field": True,
+                    "table_field_name": layout_field.get("table_field_name", None),
+                    "table_field_index": layout_field.get("table_field_index", None),
+
+                }
             doc_field = doc_fields.get(layout_field["name"], None)
-            if not doc_field:
+            if not doc_field and not layout_field.get("is_table_field", False):
                 continue
             try:
                 doc_field["coordinates"] = [
@@ -276,7 +283,25 @@ def get_layout_fields_from_layout_json(layout_template, field_names):
         for layout_row in layout_group["rows"]:
             layout_fields = []
             field_type = layout_row.get("fieldType", "")
-            if not field_type == "TableOfCheckboxes":
+            if field_type == "ExtractedTable":
+                table_columns = layout_row["columns"]
+                for table_column in table_columns:
+                    columns_coords_array = table_column['coords']
+                    for index, column_coords in enumerate(columns_coords_array):
+                        if column_coords['coord']:
+                            filtered_layout_fields.append(
+                                {
+                                    "name": f"{table_column['name']}_{index}",
+                                    "coords": [column_coords['coord']],
+                                    "tr_ocr_model_id": table_column["tr_ocr_model_id"],
+                                    "field_type": table_column.get("fieldType", "STRING"),
+                                    "list_of_values": table_column.get("list_of_values", None),
+                                    "is_table_field": True,
+                                    "table_field_name": table_column['name'],
+                                    "table_field_index": index,
+                                }
+                            )
+            elif not field_type == "TableOfCheckboxes":
                 layout_fields = [layout_row]
             else:
                 if type(layout_row["tableBodyRows"]) is list:
