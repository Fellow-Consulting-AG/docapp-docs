Lint Action: 7 commits for week 2023-W09
Author image: https://avatars.githubusercontent.com/u/59283862?v=4
- 76e98d4baeb0c2a4a637996db2dd41afc621e75b: Fix code style issues with Black
Code changes:
@@ -165,7 +165,7 @@ def populate_custom_lines(document):
     c_lines_text = list()
     for page in document["pages"]:
         c_lines_text.append(page["customPageText"])
-    #document["customText"] = " ".join(c_lines_text)
+    # document["customText"] = " ".join(c_lines_text)
 
     # for line in custom_lines:
     #     print(line['text'])
- 4355e2a1ccadbe04724e5a35ff96b78d76fcfd51: Fix code style issues with Black
Code changes:
@@ -74,16 +74,17 @@ def get_pages_to_ocr(file):
         with fitz.open(file) as doc:
             for index, page in enumerate(doc):
                 if not page_digitally_created(page):
-                    pages.append(str(index+1))
+                    pages.append(str(index + 1))
 
     except Exception as e:
         pages = []
         logger.error("OCR with fitz failed. Error -> " + str(e))
 
-    pages = ','.join(pages)
+    pages = ",".join(pages)
     # logger.info("Extracted text: " + text)
     return pages
 
+
 @sync_wrapper(module="ocr")
 def get_ocred_document(user, filepath, destination, force=False, improve_quality=False):
     """
- ab45e34df248ed318f82c16af4c5d36fb16232cf: Fix code style issues with Black
Code changes:
@@ -13,8 +13,13 @@
 from helper import util
 from helper.layout import layout_fields_helper as lfh
 from logger import get_logger
-from models import (AlchemyEncoder, ColumnValidationRules, DocumentTable,
-                    DocumentTableColumn, DocumentType)
+from models import (
+    AlchemyEncoder,
+    ColumnValidationRules,
+    DocumentTable,
+    DocumentTableColumn,
+    DocumentType,
+)
 
 logger = get_logger("document_table_settings")
 
- 7b9167e15092194603902b3f87fd18c538646cc5: Fix code style issues with Black
Code changes:
@@ -112,10 +112,11 @@ def readjust_coordinates(page_image, coords, strip_dim, v_padding=0, h_padding=0
 
     return (x1, y1, x2, y2)
 
+
 def keep_within_normalized_range(value):
     if value > 1:
         value = 1
     elif value < 0:
         value = 0
 
-    return value
\ No newline at end of file
+    return value
- 4e471fb9859db8d1c8953f61ad64c1fa54bc1a03: Fix code style issues with Black
Code changes:
@@ -97,7 +97,7 @@ def readjust_coordinates(page_image, coords, strip_dim, v_padding=0, h_padding=0
             int(y2 * height),
         )
     else:
-        width, height = 1,1
+        width, height = 1, 1
     if x1 > x2:
         x1, x2 = x2, x1
     if y1 > y2:
- b0c0cef96cc3c05c85166907c44e2bedb81df4fb: Fix code style issues with Black
Code changes:
@@ -9,14 +9,23 @@
 from fellow2kv.extension import db, storagemanager
 from helpdesk import create_new_customer, create_ticket
 from helper import doc2_util
-from helper.ai.ai_ocr import (generate_hard_regex_from_string,
-                              generate_regex_from_string)
-from helper.util import (get_page, transform_from_normalized,
-                         transform_from_normalized_coords_object)
+from helper.ai.ai_ocr import generate_hard_regex_from_string, generate_regex_from_string
+from helper.util import (
+    get_page,
+    transform_from_normalized,
+    transform_from_normalized_coords_object,
+)
 from logger import get_logger
-from models import (DocOriginRules, FellowKVRule, FellowKVRuleUser,
-                    FellowKVSourceFile, FellowKVTableColumnRule,
-                    FellowKVTableRule, TableFormattingRules, TfidfDocs)
+from models import (
+    DocOriginRules,
+    FellowKVRule,
+    FellowKVRuleUser,
+    FellowKVSourceFile,
+    FellowKVTableColumnRule,
+    FellowKVTableRule,
+    TableFormattingRules,
+    TfidfDocs,
+)
 
 logger = get_logger("plugin-export-util")
 
- 13b0a412bb999d831d5a5acdb2876e77fbce87a5: Fix code style issues with Black
Code changes:
@@ -127,8 +127,6 @@ def delete(self):
 aiparser.add_argument("name", type=str, required=True)
 
 
-
-
 aiparser = api.parser()
 aiparser.add_argument("name", type=str, required=True, location="form")
 aiparser.add_argument("value", type=str, required=True, location="form")
