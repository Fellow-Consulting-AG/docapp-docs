{"author": "Muhammad Asad Usman Khan", "week": "2023-W19", "total_commits": 10, "author_image": "https://avatars.githubusercontent.com/u/83513548?v=4", "commits": [{"sha": "4bf5fa3b4a578bc29cd1f7dab8c77d87d4465813", "message": "fd", "code_changes": "@@ -0,0 +1,30 @@\n+\"\"\"empty message\n+\n+Revision ID: 8de61b51c2db\n+Revises: 94e7ca15c0d3\n+Create Date: 2023-05-10 10:54:50.447513\n+\n+\"\"\"\n+from alembic import op\n+import sqlalchemy as sa\n+\n+\n+# revision identifiers, used by Alembic.\n+revision = '8de61b51c2db'\n+down_revision = '94e7ca15c0d3'\n+branch_labels = None\n+depends_on = None\n+\n+\n+def upgrade():\n+    # ### commands auto generated by Alembic - please adjust! ###\n+    op.add_column('field', sa.Column('list_of_values', sa.String(length=100), nullable=True))\n+    op.add_column('field', sa.Column('enforce_list_of_values', sa.Boolean(), server_default='f', nullable=False))\n+    # ### end Alembic commands ###\n+\n+\n+def downgrade():\n+    # ### commands auto generated by Alembic - please adjust! ###\n+    op.drop_column('field', 'enforce_list_of_values')\n+    op.drop_column('field', 'list_of_values')\n+    # ### end Alembic commands ###", "code_change_description": "Two columns 'list_of_values' and 'enforce_list_of_values' were added to the 'field' table in the database. The former is a string column with a length of 100 and can contain a list of values for the field. The latter is a boolean column that indicates whether the field should enforce the list of values or not.", "code_smell_rating": 2, "github_labels": ["database", "migration"]}, {"sha": "00ea3a94078428343d19cca53465cf8a0891c6c6", "message": "Merge branch 'stage' into dev", "code_changes": ""}, {"sha": "02236e5c7079e695454f2458c5becb9d55612f97", "message": "fd", "code_changes": "@@ -20,7 +20,7 @@\n ERODED_STANDARD_FILL_RATIO = 13.26150272572172\n \n \n-@multiple_attempts(max_attempts=3)\n+@multiple_attempts(max_attempts=3, sleep=10)\n def get_image_from_url(img_url):\n     # Downloads image from url and returns cv2 image.\n     with tempfile.NamedTemporaryFile(suffix=\".pdf\") as ufile:", "code_change_description": "The code has been modified to add a sleep time of 10 seconds between each attempt when calling the 'get_image_from_url' function. This is done to avoid overloading the server with too many requests in a short period of time.", "code_smell_rating": 4, "github_labels": ["enhancement"]}, {"sha": "258c882f2789ddd8fff9fcee9303160d63110e56", "message": "Merge pull request #894 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -9,6 +9,7 @@\n import numpy as np\n \n import fellow2kv.config as config\n+from util import multiple_attempts\n \n kernel = np.ones((3, 3), dtype=np.uint8)\n kernel2 = np.ones((5, 5), dtype=np.uint8)\n@@ -18,7 +19,7 @@\n \n ERODED_STANDARD_FILL_RATIO = 13.26150272572172\n \n-\n+@multiple_attempts(max_attempts=3)\n def get_image_from_url(img_url):\n     # Downloads image from url and returns cv2 image.\n     with tempfile.NamedTemporaryFile(suffix=\".pdf\") as ufile:", "code_change_description": "A new decorator 'multiple_attempts' has been added to the 'get_image_from_url' function. This decorator allows the function to retry a maximum of 3 times in case of any exception. This is done to improve the reliability of the function.", "code_smell_rating": 3, "github_labels": ["reliability"]}, {"sha": "12f71d449d3b5e5e99c8cdc3f9631a96bf727837", "message": "fd", "code_changes": "@@ -9,7 +9,7 @@\n import numpy as np\n \n import fellow2kv.config as config\n-from util.module_wrapper import multiple_attempts\n+from util import multiple_attempts\n \n kernel = np.ones((3, 3), dtype=np.uint8)\n kernel2 = np.ones((5, 5), dtype=np.uint8)", "code_change_description": "The import statement for the 'multiple_attempts' function has been updated to import it from the 'util' module instead of the 'module_wrapper' module.", "code_smell_rating": 2, "github_labels": ["refactor"]}, {"sha": "9477a22acc53003d733010d81c0b2343e2c5d422", "message": "fd", "code_changes": "@@ -9,6 +9,7 @@\n import numpy as np\n \n import fellow2kv.config as config\n+from util.module_wrapper import multiple_attempts\n \n kernel = np.ones((3, 3), dtype=np.uint8)\n kernel2 = np.ones((5, 5), dtype=np.uint8)\n@@ -18,7 +19,7 @@\n \n ERODED_STANDARD_FILL_RATIO = 13.26150272572172\n \n-\n+@multiple_attempts(max_attempts=3)\n def get_image_from_url(img_url):\n     # Downloads image from url and returns cv2 image.\n     with tempfile.NamedTemporaryFile(suffix=\".pdf\") as ufile:", "code_change_description": "A new decorator `multiple_attempts` has been added to the `get_image_from_url` function. This decorator allows the function to retry a maximum of 3 times in case of any exception. This is done to improve the reliability of the function.", "code_smell_rating": 3, "github_labels": ["reliability"]}, {"sha": "4bed7a41ccb4268561b60b7599a0f8b1e693b492", "message": "Merge pull request #892 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -1,4 +1,3 @@\n-import json\n import math\n import operator\n import os\n@@ -7,10 +6,10 @@\n import urllib\n \n import cv2\n-import fellow2kv.config as config\n-import img2pdf\n import numpy as np\n \n+import fellow2kv.config as config\n+\n kernel = np.ones((3, 3), dtype=np.uint8)\n kernel2 = np.ones((5, 5), dtype=np.uint8)\n \n@@ -24,9 +23,9 @@ def get_image_from_url(img_url):\n     # Downloads image from url and returns cv2 image.\n     with tempfile.NamedTemporaryFile(suffix=\".pdf\") as ufile:\n         try:\n-            urllib.urlretrieve(img_url, ufile.name)\n-        except:\n             urllib.request.urlretrieve(img_url, ufile.name)\n+        except:\n+            urllib.urlretrieve(img_url, ufile.name)\n         ufile.seek(0)\n         img = cv2.imread(ufile.name)\n         return img\n@@ -176,18 +175,19 @@ def get_fill_percentage_from_image(\n         box_img = None\n         temp_img = img[y0:y1, x0:x1]\n \n-        if True:\n+        if False:\n             if config.IS_DEBUG:\n                 # dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n-                dir_path = f\"debugging/field_cropped_images_full\"\n+                dir_path = f\"debugging/field_cropped_images_full/field_{key}\"\n                 x_increase_factor = -5\n                 y_increase_factor = -5\n                 if not os.path.exists(dir_path):\n                     os.makedirs(dir_path)\n-                cv2.imwrite(\n-                    f\"{dir_path}/{doc_id}checkbox_{key}.jpg\",\n-                    img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],\n-                )\n+                if \"GM_\" in key or True:\n+                    cv2.imwrite(\n+                        f\"{dir_path}/{doc_id}checkbox_{key}.jpg\",\n+                        img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],\n+                    )\n \n         if True:  # not reference_key == \"bottom_checkboxes\":\n             threshold = height / 120 * width / 120\n@@ -215,11 +215,14 @@ def get_fill_percentage_from_image(\n                 box_img, no_of_sections=7\n             )  # get_fill_percentage(box_img) * fill_factor\n             if config.IS_DEBUG:\n-                # dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n-                dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n-                if not os.path.exists(dir_path):\n-                    os.makedirs(dir_path)\n-                cv2.imwrite(f\"{dir_path}/checkbox_{key}.jpg\", box_img)\n+                try:\n+                    # dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n+                    dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n+                    if not os.path.exists(dir_path):\n+                        os.makedirs(dir_path)\n+                    cv2.imwrite(f\"{dir_path}/checkbox_{key}.jpg\", box_img)\n+                except:\n+                    pass\n \n         rand_color = tuple(random.choices(range(256), k=3))\n         cv2.rectangle(cv2_image, (x0, y0), (x1, y1), rand_color, 2)", "code_change_description": "The code has been refactored to remove unused imports and improve code readability. Debugging statements have been added to save cropped images for debugging purposes.", "code_smell_rating": 3, "github_labels": ["refactor", "debugging"]}, {"sha": "6021ed0bf94c38b2350057ff840faab63791a903", "message": "fd", "code_changes": "@@ -1,4 +1,3 @@\n-import json\n import math\n import operator\n import os\n@@ -7,10 +6,10 @@\n import urllib\n \n import cv2\n-import fellow2kv.config as config\n-import img2pdf\n import numpy as np\n \n+import fellow2kv.config as config\n+\n kernel = np.ones((3, 3), dtype=np.uint8)\n kernel2 = np.ones((5, 5), dtype=np.uint8)\n \n@@ -24,9 +23,9 @@ def get_image_from_url(img_url):\n     # Downloads image from url and returns cv2 image.\n     with tempfile.NamedTemporaryFile(suffix=\".pdf\") as ufile:\n         try:\n-            urllib.urlretrieve(img_url, ufile.name)\n-        except:\n             urllib.request.urlretrieve(img_url, ufile.name)\n+        except:\n+            urllib.urlretrieve(img_url, ufile.name)\n         ufile.seek(0)\n         img = cv2.imread(ufile.name)\n         return img\n@@ -176,18 +175,19 @@ def get_fill_percentage_from_image(\n         box_img = None\n         temp_img = img[y0:y1, x0:x1]\n \n-        if True:\n+        if False:\n             if config.IS_DEBUG:\n                 # dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n-                dir_path = f\"debugging/field_cropped_images_full\"\n+                dir_path = f\"debugging/field_cropped_images_full/field_{key}\"\n                 x_increase_factor = -5\n                 y_increase_factor = -5\n                 if not os.path.exists(dir_path):\n                     os.makedirs(dir_path)\n-                cv2.imwrite(\n-                    f\"{dir_path}/{doc_id}checkbox_{key}.jpg\",\n-                    img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],\n-                )\n+                if \"GM_\" in key or True:\n+                    cv2.imwrite(\n+                        f\"{dir_path}/{doc_id}checkbox_{key}.jpg\",\n+                        img[y0 - 5 : y1 + 5, x0 - 5 : x1 + 5],\n+                    )\n \n         if True:  # not reference_key == \"bottom_checkboxes\":\n             threshold = height / 120 * width / 120\n@@ -215,11 +215,14 @@ def get_fill_percentage_from_image(\n                 box_img, no_of_sections=7\n             )  # get_fill_percentage(box_img) * fill_factor\n             if config.IS_DEBUG:\n-                # dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n-                dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n-                if not os.path.exists(dir_path):\n-                    os.makedirs(dir_path)\n-                cv2.imwrite(f\"{dir_path}/checkbox_{key}.jpg\", box_img)\n+                try:\n+                    # dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n+                    dir_path = f\"debugging/field_cropped_images/{doc_id}\"\n+                    if not os.path.exists(dir_path):\n+                        os.makedirs(dir_path)\n+                    cv2.imwrite(f\"{dir_path}/checkbox_{key}.jpg\", box_img)\n+                except:\n+                    pass\n \n         rand_color = tuple(random.choices(range(256), k=3))\n         cv2.rectangle(cv2_image, (x0, y0), (x1, y1), rand_color, 2)", "code_change_description": "The code has been refactored to remove unused imports and improve code readability. Debugging statements have been added to save cropped images for debugging purposes.", "code_smell_rating": 3, "github_labels": ["refactor", "debugging"]}, {"sha": "8c6456e2871460add10908bdaf7d7b289cfc005e", "message": "format", "code_changes": "@@ -60,4 +60,4 @@ def get_skew_angle(image_path):\n \n     grayscale = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n     angle = determine_skew(grayscale)\n-    return angle\n+    return angle\n\\ No newline at end of file", "code_change_description": "The code has been modified to return the skew angle of an image in degrees. The function 'get_skew_angle' takes an image path as input, reads the image, converts it to grayscale, and determines the skew angle using the 'determine_skew' function. The skew angle is then returned as output.", "code_smell_rating": 2, "github_labels": ["refactor"]}, {"sha": "9e168d963f85b550799c23255ad828e1e97ff53c", "message": "fd", "code_changes": "@@ -20,7 +20,7 @@ def rotate_simple(image, angle):\n \n \n def deskew_image(\n-    image_path, low_res_image_path=None\n+    image_path, low_res_image_path=None \n ):  # low res image = img_to_check_skew\n     \"\"\"\n     Deskews the image", "code_change_description": "A trailing whitespace was removed from the parameter list of the deskew_image function.", "code_smell_rating": 1, "github_labels": ["whitespace"]}]}