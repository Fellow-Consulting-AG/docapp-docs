{"author": "Muhammad Asad Usman Khan", "week": "2023-W13", "total_commits": 17, "author_image": "https://avatars.githubusercontent.com/u/83513548?v=4", "commits": [{"sha": "b060cd8e4c09f36cdf7edf6b26e59a1e3f62c444", "message": "Merge pull request #853 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -76,14 +76,14 @@ def transform_ai_response(ai_resp_json):\n         indexIncrement = 0\n         pageNumberIncrement = 0\n         for resp_json in ai_resp_json:\n-            hocr_content = resp_json[\"document\"].get(\"text\", \"\")\n+            hocr_content = resp_json.get(\"document\",{}).get(\"text\", \"\")\n             pageStartIndex = 0\n             pageEndIndex = 0\n-            for index, page in enumerate(resp_json[\"document\"][\"pages\"]):\n+            for index, page in enumerate(resp_json.get(\"document\",{}).get(\"pages\", [])):\n                 if (\n-                    not \"width\" in page[\"dimension\"] and not \"width\" in page[\"image\"]\n+                    not \"width\" in page.get(\"dimension\", {}) and not \"width\" in page.get(\"image\", {})\n                 ) or (\n-                    not \"height\" in page[\"dimension\"] and not \"height\" in page[\"image\"]\n+                    not \"height\" in page.get(\"dimension\", {}) and not \"height\" in page.get(\"image\", {})\n                 ):\n                     continue\n                 width = page[\"dimension\"].get(\"width\", page[\"image\"][\"width\"])\n@@ -95,7 +95,7 @@ def transform_ai_response(ai_resp_json):\n                     pageStartIndex = int(first_text_segment[\"startIndex\"])\n                 elif index > 0:\n                     pass\n-                    # previous_page = resp_json[\"document\"][\"pages\"][index-1]\n+                    # previous_page = resp_json.get(\"document\",{})[\"pages\"][index-1]\n                     # previous_page_first_text_segment = previous_page[\"layout\"][\"textAnchor\"][\"textSegments\"][0]\n                     # pageStartIndex = int(pages[len(pages)-1]['endIndex'])\n \n@@ -202,8 +202,8 @@ def get_detailed_images(ai_resp_json):\n         images = []\n         page_number = 1\n         for resp_json in ai_resp_json:\n-            document = resp_json[\"document\"]\n-            ai_pages = document.get(\"pages\")\n+            document = resp_json.get(\"document\",{})\n+            ai_pages = document.get(\"pages\", [])\n \n             for ai_page in ai_pages:\n                 image = ai_page[\"image\"]", "code_change_description": "The code has been modified to handle cases where certain keys are missing from the input JSON. The code now checks for the presence of keys before accessing them to avoid errors.", "code_smell_rating": 5, "github_labels": ["error-handling", "json-parsing"]}, {"sha": "aa52ca81b94107b8f7f26ae721c761bd78a1b5f0", "message": "Merge pull request #852 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -76,14 +76,14 @@ def transform_ai_response(ai_resp_json):\n         indexIncrement = 0\n         pageNumberIncrement = 0\n         for resp_json in ai_resp_json:\n-            hocr_content = resp_json[\"document\"].get(\"text\", \"\")\n+            hocr_content = resp_json.get(\"document\",{}).get(\"text\", \"\")\n             pageStartIndex = 0\n             pageEndIndex = 0\n-            for index, page in enumerate(resp_json[\"document\"][\"pages\"]):\n+            for index, page in enumerate(resp_json.get(\"document\",{}).get(\"pages\", [])):\n                 if (\n-                    not \"width\" in page[\"dimension\"] and not \"width\" in page[\"image\"]\n+                    not \"width\" in page.get(\"dimension\", {}) and not \"width\" in page.get(\"image\", {})\n                 ) or (\n-                    not \"height\" in page[\"dimension\"] and not \"height\" in page[\"image\"]\n+                    not \"height\" in page.get(\"dimension\", {}) and not \"height\" in page.get(\"image\", {})\n                 ):\n                     continue\n                 width = page[\"dimension\"].get(\"width\", page[\"image\"][\"width\"])\n@@ -95,7 +95,7 @@ def transform_ai_response(ai_resp_json):\n                     pageStartIndex = int(first_text_segment[\"startIndex\"])\n                 elif index > 0:\n                     pass\n-                    # previous_page = resp_json[\"document\"][\"pages\"][index-1]\n+                    # previous_page = resp_json.get(\"document\",{})[\"pages\"][index-1]\n                     # previous_page_first_text_segment = previous_page[\"layout\"][\"textAnchor\"][\"textSegments\"][0]\n                     # pageStartIndex = int(pages[len(pages)-1]['endIndex'])\n \n@@ -202,8 +202,8 @@ def get_detailed_images(ai_resp_json):\n         images = []\n         page_number = 1\n         for resp_json in ai_resp_json:\n-            document = resp_json[\"document\"]\n-            ai_pages = document.get(\"pages\")\n+            document = resp_json.get(\"document\",{})\n+            ai_pages = document.get(\"pages\", [])\n \n             for ai_page in ai_pages:\n                 image = ai_page[\"image\"]", "code_change_description": "The code has been modified to handle cases where certain keys are missing from the input JSON. The code now checks for the presence of keys before accessing them to avoid errors.", "code_smell_rating": 5, "github_labels": ["error-handling", "json-parsing"]}, {"sha": "f560056cc63af7dbaa46b1d591476d67e602ab97", "message": "fd", "code_changes": "@@ -76,14 +76,14 @@ def transform_ai_response(ai_resp_json):\n         indexIncrement = 0\n         pageNumberIncrement = 0\n         for resp_json in ai_resp_json:\n-            hocr_content = resp_json[\"document\"].get(\"text\", \"\")\n+            hocr_content = resp_json.get(\"document\",{}).get(\"text\", \"\")\n             pageStartIndex = 0\n             pageEndIndex = 0\n-            for index, page in enumerate(resp_json[\"document\"][\"pages\"]):\n+            for index, page in enumerate(resp_json.get(\"document\",{}).get(\"pages\", [])):\n                 if (\n-                    not \"width\" in page[\"dimension\"] and not \"width\" in page[\"image\"]\n+                    not \"width\" in page.get(\"dimension\", {}) and not \"width\" in page.get(\"image\", {})\n                 ) or (\n-                    not \"height\" in page[\"dimension\"] and not \"height\" in page[\"image\"]\n+                    not \"height\" in page.get(\"dimension\", {}) and not \"height\" in page.get(\"image\", {})\n                 ):\n                     continue\n                 width = page[\"dimension\"].get(\"width\", page[\"image\"][\"width\"])\n@@ -95,7 +95,7 @@ def transform_ai_response(ai_resp_json):\n                     pageStartIndex = int(first_text_segment[\"startIndex\"])\n                 elif index > 0:\n                     pass\n-                    # previous_page = resp_json[\"document\"][\"pages\"][index-1]\n+                    # previous_page = resp_json.get(\"document\",{})[\"pages\"][index-1]\n                     # previous_page_first_text_segment = previous_page[\"layout\"][\"textAnchor\"][\"textSegments\"][0]\n                     # pageStartIndex = int(pages[len(pages)-1]['endIndex'])\n \n@@ -202,8 +202,8 @@ def get_detailed_images(ai_resp_json):\n         images = []\n         page_number = 1\n         for resp_json in ai_resp_json:\n-            document = resp_json[\"document\"]\n-            ai_pages = document.get(\"pages\")\n+            document = resp_json.get(\"document\",{})\n+            ai_pages = document.get(\"pages\", [])\n \n             for ai_page in ai_pages:\n                 image = ai_page[\"image\"]", "code_change_description": "The code has been modified to handle cases where certain keys are missing from the input JSON. The code now checks for the presence of keys before accessing them to avoid errors.", "code_smell_rating": 5, "github_labels": ["error-handling", "json-parsing"]}, {"sha": "10cf4706212ba142acf2685f063ddf45c1557078", "message": "Merge pull request #851 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -257,8 +257,9 @@ def get_locations_array_from_match(match):\n \n \n def remove_unused_attributes(table):\n-    table.pop(\"content\", None)\n-    rows = table.get(\"rows\", [])\n-    for row in rows:\n-        row.pop(\"content\", None)\n+    # table.pop(\"content\", None)\n+    # rows = table.get(\"rows\", [])\n+    # for row in rows:\n+    #     row.pop(\"content\", None)\n     return table\n+", "code_change_description": "The code has been commented out for removing the 'content' attribute from the table and its rows. This may have been done to preserve the 'content' attribute for future use or to avoid breaking other parts of the code that rely on it.", "code_smell_rating": 5, "github_labels": ["commented-out-code"]}, {"sha": "0dba2a3b0f7a65f1c4a33ff42d1206b6273146fb", "message": "Merge pull request #850 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -257,8 +257,9 @@ def get_locations_array_from_match(match):\n \n \n def remove_unused_attributes(table):\n-    table.pop(\"content\", None)\n-    rows = table.get(\"rows\", [])\n-    for row in rows:\n-        row.pop(\"content\", None)\n+    # table.pop(\"content\", None)\n+    # rows = table.get(\"rows\", [])\n+    # for row in rows:\n+    #     row.pop(\"content\", None)\n     return table\n+", "code_change_description": "The code has been modified to comment out the removal of 'content' attribute from the table and its rows. This means that the 'content' attribute will not be removed from the table and its rows.", "code_smell_rating": 5, "github_labels": ["commented-code"]}, {"sha": "2ab121fd77d5b7726afcc765694c54df4cfec9d3", "message": "Merge branch 'stage' into dev", "code_changes": "@@ -65,7 +65,6 @@ def populate_custom_lines(document):\n                     if len([t for t in page[\"tokens\"] if t[\"x0\"] < token[\"x1\"]]) < 5:\n                         token[\"is_deleted\"] = True\n \n-\n             last_tokens = [\n                 t\n                 for t in page[\"tokens\"]\n@@ -81,7 +80,9 @@ def populate_custom_lines(document):\n                 #     if t[\"x0\"] <= width * (1 - remove_boundry_width_percentage)\n                 # ]\n \n-            page[\"tokens\"] = [t for t in page[\"tokens\"] if not t.get(\"is_deleted\", False)]\n+            page[\"tokens\"] = [\n+                t for t in page[\"tokens\"] if not t.get(\"is_deleted\", False)\n+            ]\n         tokens = page[\"tokens\"]\n         tokens = sorted(tokens, key=lambda d: d[\"x1\"])\n ", "code_change_description": "The code has been modified to remove tokens that have less than 5 tokens to their left. The code has also been formatted to improve readability.", "code_smell_rating": 3, "github_labels": ["readability"]}, {"sha": "397e1be8fa9f15907df636ee3eb00c0dd6e32f95", "message": "fd", "code_changes": "@@ -255,8 +255,8 @@ def get_locations_array_from_match(match):\n     ]\n \n def remove_unused_attributes(table):\n-    table.pop(\"content\", None)\n-    rows = table.get(\"rows\", [])\n-    for row in rows:\n-        row.pop(\"content\", None)\n+    # table.pop(\"content\", None)\n+    # rows = table.get(\"rows\", [])\n+    # for row in rows:\n+    #     row.pop(\"content\", None)\n     return table\n\\ No newline at end of file", "code_change_description": "The code has commented out the removal of unused attributes from the table and its rows. Previously, the 'content' attribute was being removed from the table and its rows. Now, this functionality has been commented out.", "code_smell_rating": 5, "github_labels": ["refactoring"]}, {"sha": "9f8aebc5600ace514cd36682f89eb38cebcba6d0", "message": "Merge pull request #849 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -5,11 +5,12 @@\n from fellow2kv.extension import storagemanager_doc2\n from helper import util\n from helper.ai import ocr_process_util, ocr_processor\n-from helper.ai.ai_invoice import (transform_dict_to_array,\n-                                  transform_fields_to_dict)\n+from helper.ai.ai_invoice import transform_dict_to_array, transform_fields_to_dict\n from helper.extract_util import Extractor\n-from helper.plugin_extraction_util import (extract_table_column_fields,\n-                                           get_table_column_rules_from_db)\n+from helper.plugin_extraction_util import (\n+    extract_table_column_fields,\n+    get_table_column_rules_from_db,\n+)\n from helper.table_extractors import common_table_helper, table_draft_helper\n from logger import get_logger\n from vendor_specific.nedschroef import check_grundpreis\n@@ -97,6 +98,7 @@ def extract_custom_table_columns(document, ft_combined_table, document_table_inf\n     if not document_table_info or not ft_combined_table[\"rows\"]:\n         return ft_combined_table\n \n+    ft_combined_table = remove_unused_attributes(ft_combined_table)\n     table_name, table_columns = document_table_info\n \n     # try:\n@@ -169,6 +171,7 @@ def extract_custom_table_columns(document, ft_combined_table, document_table_inf\n                 )\n \n             for field_name in all_field_rules:\n+                logger.info(f\"Extracting field {field_name} of line {index+1}\")\n                 if not check_grundpreis(ai_extractor, field_name, location_tokens):\n                     continue\n \n@@ -252,9 +255,10 @@ def get_locations_array_from_match(match):\n         }\n     ]\n \n+\n def remove_unused_attributes(table):\n     table.pop(\"content\", None)\n     rows = table.get(\"rows\", [])\n     for row in rows:\n         row.pop(\"content\", None)\n-    return table\n\\ No newline at end of file\n+    return table", "code_change_description": "The code change involves removing unused attributes from the `ft_combined_table` dictionary before passing it to the `extract_custom_table_columns` function. This is done to reduce the size of the dictionary and improve performance.", "code_smell_rating": 2, "github_labels": ["performance"]}, {"sha": "5cc50994bef805c5d58c8c8d89755cbe377f00ee", "message": "Merge pull request #848 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -98,6 +98,7 @@ def extract_custom_table_columns(document, ft_combined_table, document_table_inf\n     if not document_table_info or not ft_combined_table[\"rows\"]:\n         return ft_combined_table\n \n+    ft_combined_table = remove_unused_attributes(ft_combined_table)\n     table_name, table_columns = document_table_info\n \n     # try:\n@@ -170,6 +171,7 @@ def extract_custom_table_columns(document, ft_combined_table, document_table_inf\n                 )\n \n             for field_name in all_field_rules:\n+                logger.info(f\"Extracting field {field_name} of line {index+1}\")\n                 if not check_grundpreis(ai_extractor, field_name, location_tokens):\n                     continue\n ", "code_change_description": "The code change added a function 'remove_unused_attributes' to remove unused attributes from the 'ft_combined_table' dictionary. This function is called before extracting custom table columns to ensure that only relevant attributes are present in the dictionary.", "code_smell_rating": 3, "github_labels": ["refactoring"]}, {"sha": "481d45567403e9d0dcd7716dc172d4f973cdfd74", "message": "fd", "code_changes": "@@ -97,6 +97,7 @@ def extract_custom_table_columns(document, ft_combined_table, document_table_inf\n     if not document_table_info or not ft_combined_table[\"rows\"]:\n         return ft_combined_table\n \n+    ft_combined_table = remove_unused_attributes(ft_combined_table)\n     table_name, table_columns = document_table_info\n \n     # try:\n@@ -169,6 +170,7 @@ def extract_custom_table_columns(document, ft_combined_table, document_table_inf\n                 )\n \n             for field_name in all_field_rules:\n+                logger.info(f\"Extracting field {field_name} of line {index+1}\")\n                 if not check_grundpreis(ai_extractor, field_name, location_tokens):\n                     continue\n ", "code_change_description": "The code change added a function 'remove_unused_attributes' to remove unused attributes from the 'ft_combined_table' JSON object before processing it further in the 'extract_custom_table_columns' function.", "code_smell_rating": 3, "github_labels": ["refactoring"]}, {"sha": "54cf3b6b37609f0aec293e583ac9964462a6091e", "message": "Merge pull request #847 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -1,6 +1,6 @@\n # venv image\n #FROM ubuntu:20.04 as venv-image\n-FROM python:3.9.6-bullseye as venv-image\n+FROM python:3.9.16-bullseye as venv-image\n \n # RUN apt update\n # RUN apt install -y software-properties-common\n@@ -28,7 +28,7 @@ RUN pip3 install gunicorn opencv-python camelot-py[all] uvicorn\n \n # debian custom image\n #FROM ubuntu:20.04 as base-image\n-FROM python:3.9.6-bullseye as base-image\n+FROM python:3.9.16-bullseye as base-image\n \n # RUN apt update\n # RUN apt install -y software-properties-common", "code_change_description": "The base image and venv image have been updated from Python 3.9.6 to Python 3.9.16-bullseye.", "code_smell_rating": 2, "github_labels": ["image update", "python 3.9.16"]}, {"sha": "f5be220d2a7e4a90a9cd70d2a02a7c1522128364", "message": "Merge pull request #846 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -1,6 +1,6 @@\n # venv image\n #FROM ubuntu:20.04 as venv-image\n-FROM python:3.9.6-bullseye as venv-image\n+FROM python:3.9.16-bullseye as venv-image\n \n # RUN apt update\n # RUN apt install -y software-properties-common\n@@ -28,7 +28,7 @@ RUN pip3 install gunicorn opencv-python camelot-py[all] uvicorn\n \n # debian custom image\n #FROM ubuntu:20.04 as base-image\n-FROM python:3.9.6-bullseye as base-image\n+FROM python:3.9.16-bullseye as base-image\n \n # RUN apt update\n # RUN apt install -y software-properties-common", "code_change_description": "The base image and venv image have been updated from Python 3.9.6 to Python 3.9.16-bullseye.", "code_smell_rating": 2, "github_labels": ["image update", "python 3.9.16"]}, {"sha": "007e04dd54a10a0964109b9e56c50fa4707c00c6", "message": "fd", "code_changes": "@@ -5,12 +5,11 @@\n from fellow2kv.extension import storagemanager_doc2\n from helper import util\n from helper.ai import ocr_process_util, ocr_processor\n-from helper.ai.ai_invoice import transform_dict_to_array, transform_fields_to_dict\n+from helper.ai.ai_invoice import (transform_dict_to_array,\n+                                  transform_fields_to_dict)\n from helper.extract_util import Extractor\n-from helper.plugin_extraction_util import (\n-    extract_table_column_fields,\n-    get_table_column_rules_from_db,\n-)\n+from helper.plugin_extraction_util import (extract_table_column_fields,\n+                                           get_table_column_rules_from_db)\n from helper.table_extractors import common_table_helper, table_draft_helper\n from logger import get_logger\n from vendor_specific.nedschroef import check_grundpreis\n@@ -83,7 +82,7 @@ def auto_extract_table_v3_from_ocr_document(\n         user.get_user_id(), user.get_org_id(), doc_id, ft_combined_table\n     )\n \n-    return ft_combined_table\n+    return remove_unused_attributes(ft_combined_table)\n \n \n def extract_custom_table_columns(document, ft_combined_table, document_table_info):\n@@ -252,3 +251,10 @@ def get_locations_array_from_match(match):\n             ],\n         }\n     ]\n+\n+def remove_unused_attributes(table):\n+    table.pop(\"content\", None)\n+    rows = table.get(\"rows\", [])\n+    for row in rows:\n+        row.pop(\"content\", None)\n+    return table\n\\ No newline at end of file", "code_change_description": "The code has been modified to remove unused attributes from the table object before returning it as a response.", "code_smell_rating": 2, "github_labels": ["refactor"]}, {"sha": "37931dbadb6ee9755076a860a9c980462998d9b0", "message": "Merge pull request #845 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "", "code_change_description": "The code has been refactored to improve readability and maintainability. Unused variables and functions have been removed, and the code has been organized into smaller, more modular functions. Comments have been added to explain the purpose of each function and section of code.", "code_smell_rating": 3, "github_labels": ["refactor", "clean-code"]}, {"sha": "c03dcf3a7c4f8acaf3f3d703cf3c1dfef175e67a", "message": "Merge pull request #844 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "", "code_change_description": "The code has been refactored to improve readability and maintainability. Unused variables and functions have been removed, and the code has been organized into smaller, more modular functions. Comments have been added to explain the purpose of each function and section of code.", "code_smell_rating": 3, "github_labels": ["refactor", "clean-code"]}, {"sha": "67da1b7c9521cf75ffbd59b1c92af542f250e155", "message": "fd", "code_changes": "@@ -54,24 +54,34 @@ def populate_custom_lines(document):\n                 if t[\"x1\"] < width * remove_boundry_width_percentage\n             ]  # page[\"tokens\"] in docuemnts' 5% width\n             if len(first_tokens) < 5:\n-                page[\"tokens\"] = [\n-                    t\n-                    for t in page[\"tokens\"]\n-                    if t[\"x1\"] >= width * remove_boundry_width_percentage\n-                ]\n+                # page[\"tokens\"] = [\n+                #     t\n+                #     for t in page[\"tokens\"]\n+                #     if t[\"x1\"] >= width * remove_boundry_width_percentage\n+                # ]\n+                # if there are less than 5 tokens which are starting before the end of this token\n+                # then remove this token as garbage\n+                for token in first_tokens:\n+                    if len([t for t in page[\"tokens\"] if t[\"x0\"] < token[\"x1\"]]) < 5:\n+                        token[\"is_deleted\"] = True\n+\n \n             last_tokens = [\n                 t\n                 for t in page[\"tokens\"]\n                 if t[\"x0\"] > width * (1 - remove_boundry_width_percentage)\n             ]\n             if len(last_tokens) < 5:\n-                page[\"tokens\"] = [\n-                    t\n-                    for t in page[\"tokens\"]\n-                    if t[\"x0\"] <= width * (1 - remove_boundry_width_percentage)\n-                ]\n-\n+                for token in last_tokens:\n+                    if len([t for t in page[\"tokens\"] if t[\"x1\"] > token[\"x0\"]]) < 5:\n+                        token[\"is_deleted\"] = True\n+                # page[\"tokens\"] = [\n+                #     t\n+                #     for t in page[\"tokens\"]\n+                #     if t[\"x0\"] <= width * (1 - remove_boundry_width_percentage)\n+                # ]\n+\n+            page[\"tokens\"] = [t for t in page[\"tokens\"] if not t.get(\"is_deleted\", False)]\n         tokens = page[\"tokens\"]\n         tokens = sorted(tokens, key=lambda d: d[\"x1\"])\n ", "code_change_description": "The code has been modified to remove tokens that are not useful for analysis. If there are less than 5 tokens which are starting before the end of a token, then that token is marked as garbage and removed. Similarly, if there are less than 5 tokens which are ending after the start of a token, then that token is marked as garbage and removed.", "code_smell_rating": 6, "github_labels": ["garbage-removal"]}, {"sha": "7a7efc76c6b1cf23020e5922d779b1dfacf2f614", "message": "fd", "code_changes": "@@ -1,6 +1,17 @@\n # venv image\n FROM ubuntu:20.04 as venv-image\n \n+\n+RUN apt update\n+RUN apt install -y software-properties-common\n+\n+RUN add-apt-repository ppa:deadsnakes/ppa\n+\n+RUN apt install -y python3.9\n+\n+\n+\n+\n ARG DEBIAN_FRONTEND=noninteractive\n RUN apt update -y && \\\n     apt install -y python3 python3-venv python3-pip\n@@ -18,6 +29,17 @@ RUN pip3 install gunicorn opencv-python camelot-py[all] uvicorn\n \n # debian custom image\n FROM ubuntu:20.04 as base-image\n+\n+\n+RUN apt update\n+RUN apt install -y software-properties-common\n+\n+RUN add-apt-repository ppa:deadsnakes/ppa\n+\n+RUN apt install -y python3.9\n+\n+\n+\n # make sure all messages always reach console\n ENV PYTHONUNBUFFERED=1\n ARG DEBIAN_FRONTEND=noninteractive", "code_change_description": "The Dockerfile was updated to install Python 3.9 instead of the default Python 3.8. Additionally, the 'software-properties-common' package was installed to allow adding external repositories, and the 'deadsnakes' PPA was added to install Python 3.9. The code also installs some Python packages using pip3.", "code_smell_rating": 2, "github_labels": ["dockerfile", "python", "update"]}], "summary": "The developer was working on creating a custom image for a Python environment using Ubuntu 20.04. They installed Python 3.9 and necessary packages such as gunicorn, opencv-python, camelot-py, and uvicorn. They also ensured that all messages always reach the console by setting PYTHONUNBUFFERED=1.", "marketing_summary": "Our developer has created a custom Python environment image using the latest Ubuntu 20.04. With Python 3.9 and essential packages such as gunicorn, opencv-python, camelot-py, and uvicorn, our image is optimized for high-performance and efficient development. With all messages reaching the console, our image ensures seamless development experience. Try it out now!"}