{"author": "Muhammad Asad Usman Khan", "week": "2023-W08", "total_commits": 30, "author_image": "https://avatars.githubusercontent.com/u/83513548?v=4", "commits": [{"sha": "fec52f80f56c579ec8ffa399d79f155a1ea8faa8", "message": "Merge pull request #782 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -8,8 +8,10 @@\n import pandas as pd\n \n from fellow2kv.extension import storage_manager_doc2\n-from helper.form_extractor.proximity import (get_proximity_keywords,\n-                                             get_proximity_keywords_for_image)\n+from helper.form_extractor.proximity import (\n+    get_proximity_keywords,\n+    get_proximity_keywords_for_image,\n+)\n from helper.util import transform_from_normalized_coords_object\n \n \n@@ -492,16 +494,15 @@ def get_closest_references(\n             height = round(ref.get(\"y0\") / ref.get(\"normalizedY0\"))\n             new_from_point = (width * from_point[0], height * from_point[1])\n \n-            if (\n-                token_extremes\n-                and (abs(new_from_point[0] - ref_point[0])\n+            if token_extremes and (\n+                abs(new_from_point[0] - ref_point[0])\n                 > (token_extremes[\"right\"] - token_extremes[\"left\"])\n                 * width\n                 / dimensions_divisor\n                 or abs(new_from_point[1] - ref_point[1])\n                 > (token_extremes[\"bottom\"] - token_extremes[\"top\"])\n                 * height\n-                / dimensions_divisor)\n+                / dimensions_divisor\n             ):\n                 continue\n             distance = calculate_distance(", "code_change_description": "The code has been formatted to follow PEP8 guidelines. Specifically, the import statements have been organized and the code has been properly indented.", "code_smell_rating": 2, "github_labels": ["style"]}, {"sha": "6a91a9429133dd6f4afeb856c5e18be3e233ad8d", "message": "Merge pull request #781 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -0,0 +1,28 @@\n+\"\"\"empty message\n+\n+Revision ID: 777bef049c09\n+Revises: adbde2b3d192\n+Create Date: 2023-02-24 14:46:53.188897\n+\n+\"\"\"\n+from alembic import op\n+import sqlalchemy as sa\n+\n+\n+# revision identifiers, used by Alembic.\n+revision = '777bef049c09'\n+down_revision = 'adbde2b3d192'\n+branch_labels = None\n+depends_on = None\n+\n+\n+def upgrade():\n+    # ### commands auto generated by Alembic - please adjust! ###\n+    op.add_column('lov_list_of_value', sa.Column('synonyms', sa.Text(), nullable=True))\n+    # ### end Alembic commands ###\n+\n+\n+def downgrade():\n+    # ### commands auto generated by Alembic - please adjust! ###\n+    op.drop_column('lov_list_of_value', 'synonyms')\n+    # ### end Alembic commands ###", "code_change_description": "A new column 'synonyms' has been added to the 'lov_list_of_value' table in the database. This column will store synonyms for the list of values.", "code_smell_rating": 2, "github_labels": ["database", "migration"]}, {"sha": "4994085d16fc640f5c9ca92408e5f2640a67c32f", "message": "fd", "code_changes": "@@ -0,0 +1,28 @@\n+\"\"\"empty message\n+\n+Revision ID: 777bef049c09\n+Revises: adbde2b3d192\n+Create Date: 2023-02-24 14:46:53.188897\n+\n+\"\"\"\n+from alembic import op\n+import sqlalchemy as sa\n+\n+\n+# revision identifiers, used by Alembic.\n+revision = '777bef049c09'\n+down_revision = 'adbde2b3d192'\n+branch_labels = None\n+depends_on = None\n+\n+\n+def upgrade():\n+    # ### commands auto generated by Alembic - please adjust! ###\n+    op.add_column('lov_list_of_value', sa.Column('synonyms', sa.Text(), nullable=True))\n+    # ### end Alembic commands ###\n+\n+\n+def downgrade():\n+    # ### commands auto generated by Alembic - please adjust! ###\n+    op.drop_column('lov_list_of_value', 'synonyms')\n+    # ### end Alembic commands ###", "code_change_description": "A new column 'synonyms' has been added to the 'lov_list_of_value' table in the database. This column will store synonyms for the list of values.", "code_smell_rating": 2, "github_labels": ["database", "migration"]}, {"sha": "84822d911e9695137d1584912f4f012fb4f2e9c0", "message": "Merge pull request #780 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -6,11 +6,10 @@\n \n import numpy as np\n import pandas as pd\n+\n from fellow2kv.extension import storage_manager_doc2\n-from helper.form_extractor.proximity import (\n-    get_proximity_keywords,\n-    get_proximity_keywords_for_image,\n-)\n+from helper.form_extractor.proximity import (get_proximity_keywords,\n+                                             get_proximity_keywords_for_image)\n from helper.util import transform_from_normalized_coords_object\n \n \n@@ -270,7 +269,7 @@ def get_adjusted_points_v2(page_proximity_data, field_point1, field_point2):\n         layout_ref_tokens,\n         field_point1,\n         number_of_points=number_of_points,\n-        token_extremes=page_data[\"token_extremes\"],\n+        token_extremes=page_data.get(\"token_extremes\", None),\n     )\n     if not closest_refs:\n         return (field_point1[0], field_point1[1]), (field_point2[0], field_point2[1])\n@@ -495,14 +494,14 @@ def get_closest_references(\n \n             if (\n                 token_extremes\n-                and abs(new_from_point[0] - ref_point[0])\n+                and (abs(new_from_point[0] - ref_point[0])\n                 > (token_extremes[\"right\"] - token_extremes[\"left\"])\n                 * width\n                 / dimensions_divisor\n                 or abs(new_from_point[1] - ref_point[1])\n                 > (token_extremes[\"bottom\"] - token_extremes[\"top\"])\n                 * height\n-                / dimensions_divisor\n+                / dimensions_divisor)\n             ):\n                 continue\n             distance = calculate_distance(", "code_change_description": "The code has been refactored to improve readability and maintainability. The import statements have been reorganized, and the code has been formatted to conform to PEP 8 guidelines. The function arguments have been reordered to improve consistency and readability. The `token_extremes` parameter has been made optional with a default value of `None`.", "code_smell_rating": 3, "github_labels": ["refactor"]}, {"sha": "61fb73b17bd73b959a9a86bc066c7106dbccb134", "message": "Merge pull request #779 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -6,11 +6,10 @@\n \n import numpy as np\n import pandas as pd\n+\n from fellow2kv.extension import storage_manager_doc2\n-from helper.form_extractor.proximity import (\n-    get_proximity_keywords,\n-    get_proximity_keywords_for_image,\n-)\n+from helper.form_extractor.proximity import (get_proximity_keywords,\n+                                             get_proximity_keywords_for_image)\n from helper.util import transform_from_normalized_coords_object\n \n \n@@ -270,7 +269,7 @@ def get_adjusted_points_v2(page_proximity_data, field_point1, field_point2):\n         layout_ref_tokens,\n         field_point1,\n         number_of_points=number_of_points,\n-        token_extremes=page_data[\"token_extremes\"],\n+        token_extremes=page_data.get(\"token_extremes\", None),\n     )\n     if not closest_refs:\n         return (field_point1[0], field_point1[1]), (field_point2[0], field_point2[1])\n@@ -495,14 +494,14 @@ def get_closest_references(\n \n             if (\n                 token_extremes\n-                and abs(new_from_point[0] - ref_point[0])\n+                and (abs(new_from_point[0] - ref_point[0])\n                 > (token_extremes[\"right\"] - token_extremes[\"left\"])\n                 * width\n                 / dimensions_divisor\n                 or abs(new_from_point[1] - ref_point[1])\n                 > (token_extremes[\"bottom\"] - token_extremes[\"top\"])\n                 * height\n-                / dimensions_divisor\n+                / dimensions_divisor)\n             ):\n                 continue\n             distance = calculate_distance(", "code_change_description": "The code has been refactored to improve readability and maintainability. The import statements have been reorganized, and the code has been formatted to conform to PEP 8 guidelines. The function arguments have been reordered to improve consistency and readability. The `token_extremes` parameter has been made optional with a default value of `None`.", "code_smell_rating": 3, "github_labels": ["refactor", "readability", "maintainability", "PEP8", "consistency"]}, {"sha": "46f4bdf5ad1d7a88c77549e7216c98c10a6e3305", "message": "fd", "code_changes": "@@ -20,12 +20,13 @@\n \n import pandas as pd\n import texthero as hero\n-from fellow2kv.extension import db\n-from models import GenericDataVault, TfidfDocs\n from sklearn.feature_extraction.text import TfidfVectorizer\n from sklearn.metrics.pairwise import linear_kernel\n from sqlalchemy import and_, desc, or_\n \n+from fellow2kv.extension import db\n+from models import GenericDataVault, TfidfDocs\n+\n # logger = get_logger(\"tf_idf_helper\")\n logger = get_logger()\n \n@@ -442,60 +443,82 @@ def handle_tfidf_v4(document, auto_types):  # , auto_types=[]\n                 classify_rec = parent_record\n                 weight = float(record.weight)\n \n-        resp_json[\"temp_tfidf_id\"] = record.id\n-        resp_json[\"tfidf_id\"] = classify_rec.id\n-        resp_json[\"tfidf_doc_id\"] = classify_rec.doc_id\n-        resp_json[\"tfidf_weight\"] = weight\n-        resp_json[\"tfidf_doc_type\"] = classify_rec.docType\n-        resp_json[\"tfidf_locale\"] = classify_rec.doc_locale\n-        resp_json[\"tfidf_force_ocr\"] = classify_rec.force_ocr\n-\n-    else:\n-        # Creating tf-idf record and checking for similar document.\n-        # record = (\n-        #     db.session.query(TfidfDocs)\n-        #     .filter(\n-        #         or_(\n-        #             TfidfDocs.doc_id == document.get(\"doc_id\", \"no_id\"),\n-        #             TfidfDocs.doc_text_hash == doc_text_hash,\n-        #         )\n-        #     )\n-        #     .first()\n-        # )\n-        # if not record:\n-        record = TfidfDocs()\n-        record.id = str(uuid.uuid4())\n-        record.doc_id = document.get(\"doc_id\", None)\n-        record.org_id = document[\"org_id\"]\n-        # record.org_id = document.get(\"org_id\",None)\n-        # record.docType = document.get(\"doc_type\",\"\")\n-        # record.doc_origin = document.get(\"doc_origin\",\"\")\n-        # record.doc_locale = document.get(\"doc_locale\",\"\")\n-        record.doc_text = doc_text\n-\n-        record.doc_text_hash = doc_text_hash\n-        record.is_deleted = False\n-        db.session.add(record)\n-        db.session.commit()\n-        db.session.refresh(record)  # to refresh db record.\n+                resp_json[\"temp_tfidf_id\"] = record.id\n+                resp_json[\"tfidf_id\"] = classify_rec.id\n+                resp_json[\"tfidf_doc_id\"] = classify_rec.doc_id\n+                resp_json[\"tfidf_weight\"] = weight\n+                resp_json[\"tfidf_doc_type\"] = classify_rec.docType\n+                resp_json[\"tfidf_locale\"] = classify_rec.doc_locale\n+                resp_json[\"tfidf_force_ocr\"] = classify_rec.force_ocr\n+\n+                resp_json[\"filter_values\"] = [resp_json[\"tfidf_id\"]]\n+                return resp_json\n+                # return only when parent record exists. otherwise create a new record below\n+            else:\n+                # invalid record, so orphan this record and new will be created.\n+                record.org_id = None\n+                db.session.commit()\n+                db.session.refresh(record) \n \n-        threshold_pref = (\n-            db.session.query(GenericDataVault)\n-            .filter(\n-                GenericDataVault.main_key == \"TFIDF_DISTANCE_THRESHOLD\",\n-                GenericDataVault.is_deleted == False,\n-                GenericDataVault.org_id == \"DEFAULT\",\n-            )\n-            .first()\n+        \n+        else:\n+            # if parent id is not found, then use this document as the parent.\n+            resp_json[\"temp_tfidf_id\"] = record.id\n+            resp_json[\"tfidf_id\"] = classify_rec.id\n+            resp_json[\"tfidf_doc_id\"] = classify_rec.doc_id\n+            resp_json[\"tfidf_weight\"] = weight\n+            resp_json[\"tfidf_doc_type\"] = classify_rec.docType\n+            resp_json[\"tfidf_locale\"] = classify_rec.doc_locale\n+            resp_json[\"tfidf_force_ocr\"] = classify_rec.force_ocr\n+\n+            resp_json[\"filter_values\"] = [resp_json[\"tfidf_id\"]]\n+            return resp_json\n+            \n+    # Creating tf-idf record and checking for similar document.\n+    # record = (\n+    #     db.session.query(TfidfDocs)\n+    #     .filter(\n+    #         or_(\n+    #             TfidfDocs.doc_id == document.get(\"doc_id\", \"no_id\"),\n+    #             TfidfDocs.doc_text_hash == doc_text_hash,\n+    #         )\n+    #     )\n+    #     .first()\n+    # )\n+    # if not record:\n+    record = TfidfDocs()\n+    record.id = str(uuid.uuid4())\n+    record.doc_id = document.get(\"doc_id\", None)\n+    record.org_id = document[\"org_id\"]\n+    # record.org_id = document.get(\"org_id\",None)\n+    # record.docType = document.get(\"doc_type\",\"\")\n+    # record.doc_origin = document.get(\"doc_origin\",\"\")\n+    # record.doc_locale = document.get(\"doc_locale\",\"\")\n+    record.doc_text = doc_text\n+\n+    record.doc_text_hash = doc_text_hash\n+    record.is_deleted = False\n+    db.session.add(record)\n+    db.session.commit()\n+    db.session.refresh(record)  # to refresh db record.\n+\n+    threshold_pref = (\n+        db.session.query(GenericDataVault)\n+        .filter(\n+            GenericDataVault.main_key == \"TFIDF_DISTANCE_THRESHOLD\",\n+            GenericDataVault.is_deleted == False,\n+            GenericDataVault.org_id == \"DEFAULT\",\n         )\n+        .first()\n+    )\n \n-        threshold = 0.65\n-        if threshold_pref:\n-            threshold = threshold_pref.h_float_value_1\n-        # return find_closest_matches(record.id, threshold)\n-        resp_json = get_similar_documents(\n-            threshold, record  # , auto_types_array\n-        )  # auto_types\n+    threshold = 0.65\n+    if threshold_pref:\n+        threshold = threshold_pref.h_float_value_1\n+    # return find_closest_matches(record.id, threshold)\n+    resp_json = get_similar_documents(\n+        threshold, record  # , auto_types_array\n+    )  # auto_types\n \n     resp_json[\"filter_values\"] = [resp_json[\"tfidf_id\"]]\n     return resp_json"}, {"sha": "08df9b7893cfc7388e0d1787e172d3ed95b14023", "message": "fd", "code_changes": "@@ -10,11 +10,9 @@\n from helper.extract_util import Extractor\n from helper.field_extractors.adjusted_coordinates import get_adjusted_coords\n from helper.form_extractor.fill_ratio import (\n-    get_fill_percentage_from_image_url,\n-    strip_box,\n-    strip_box_special,\n-)\n-from helper.util import transform_from_normalized_coords_object, transform_to_normalized\n+    get_fill_percentage_from_image_url, strip_box, strip_box_special)\n+from helper.util import (transform_from_normalized_coords_object,\n+                         transform_to_normalized)\n from logger.logger import get_logger\n \n logger = get_logger(\"fellowkv-deh\")\n@@ -55,7 +53,6 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=1):\n     page_number = start_page\n     ai_extractor = Extractor(document, \"\", 0)\n-    checkbox_fields = [df for df in checkbox_fields if df[\"field_type\"] == \"BOOLEAN\"]\n     if not checkbox_fields:\n         return []\n ", "code_change_description": "Removed unused import and simplified import statements in extract.py file", "code_smell_rating": 2, "github_labels": ["unused_imports", "simplification"]}, {"sha": "a0480fcd5f59b77d1f4856c4499bf6fae000c478", "message": "fd", "code_changes": "@@ -6,11 +6,10 @@\n \n import numpy as np\n import pandas as pd\n+\n from fellow2kv.extension import storage_manager_doc2\n-from helper.form_extractor.proximity import (\n-    get_proximity_keywords,\n-    get_proximity_keywords_for_image,\n-)\n+from helper.form_extractor.proximity import (get_proximity_keywords,\n+                                             get_proximity_keywords_for_image)\n from helper.util import transform_from_normalized_coords_object\n \n \n@@ -270,7 +269,7 @@ def get_adjusted_points_v2(page_proximity_data, field_point1, field_point2):\n         layout_ref_tokens,\n         field_point1,\n         number_of_points=number_of_points,\n-        token_extremes=page_data[\"token_extremes\"],\n+        token_extremes=page_data.get(\"token_extremes\", None),\n     )\n     if not closest_refs:\n         return (field_point1[0], field_point1[1]), (field_point2[0], field_point2[1])\n@@ -495,14 +494,14 @@ def get_closest_references(\n \n             if (\n                 token_extremes\n-                and abs(new_from_point[0] - ref_point[0])\n+                and (abs(new_from_point[0] - ref_point[0])\n                 > (token_extremes[\"right\"] - token_extremes[\"left\"])\n                 * width\n                 / dimensions_divisor\n                 or abs(new_from_point[1] - ref_point[1])\n                 > (token_extremes[\"bottom\"] - token_extremes[\"top\"])\n                 * height\n-                / dimensions_divisor\n+                / dimensions_divisor)\n             ):\n                 continue\n             distance = calculate_distance(", "code_change_description": "The code has been refactored to improve readability and maintainability. The import statements have been reorganized, and the code has been formatted to conform to PEP 8 guidelines. The function arguments have been reordered to improve consistency and readability. The `token_extremes` parameter has been made optional with a default value of `None`.", "code_smell_rating": 3, "github_labels": ["refactor"]}, {"sha": "d663d139f35f3440ef1e8664f68cb5f5cd8ca2dc", "message": "Merge pull request #776 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -29,7 +29,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n         document_first_page = classification_result.get(\"classification_page\", 1)\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n-    fields_result = extract_checkbox_fields(\n+    checkbox_fields_result = extract_checkbox_fields(\n         user, document, layout, checkbox_fields, document_first_page\n     )\n \n@@ -42,8 +42,9 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n     non_coords_fields_result = extract_non_coords_fields(non_coords_fields)\n \n     populate_tr_ocr_info(document, text_fields_result)\n+    populate_tr_ocr_info(document, checkbox_fields_result)\n     # check_for_trocr(user, document, text_fields_result)\n-    fields_result = fields_result + text_fields_result + non_coords_fields_result\n+    fields_result = checkbox_fields_result + text_fields_result + non_coords_fields_result\n \n     # TODO: Remove overlapping text fields\n     return fields_result\n@@ -362,7 +363,7 @@ def populate_tr_ocr_info(document, field_results):\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n \n-            is_checkbox_field = field.get(\"field_type\", None) == \"BOOLEAN\"\n+            is_checkbox_field = field.get(\"type\", None) == \"BOOLEAN\"\n             adjusted_coords = get_trocr_adjusted_coords(\n                 field, page_image, is_checkbox_field\n             )", "code_change_description": "The code has been modified to correctly populate the OCR information for checkbox fields. The `populate_tr_ocr_info` function now also populates the OCR information for checkbox fields. The `is_checkbox_field` variable is now determined based on the `type` key in the field dictionary instead of the `field_type` key.", "code_smell_rating": 2, "github_labels": ["bug"]}, {"sha": "b9b423616e01184935b3df6a036b67cd9d5cc36f", "message": "Merge pull request #775 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -29,7 +29,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n         document_first_page = classification_result.get(\"classification_page\", 1)\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n-    fields_result = extract_checkbox_fields(\n+    checkbox_fields_result = extract_checkbox_fields(\n         user, document, layout, checkbox_fields, document_first_page\n     )\n \n@@ -42,8 +42,9 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n     non_coords_fields_result = extract_non_coords_fields(non_coords_fields)\n \n     populate_tr_ocr_info(document, text_fields_result)\n+    populate_tr_ocr_info(document, checkbox_fields_result)\n     # check_for_trocr(user, document, text_fields_result)\n-    fields_result = fields_result + text_fields_result + non_coords_fields_result\n+    fields_result = checkbox_fields_result + text_fields_result + non_coords_fields_result\n \n     # TODO: Remove overlapping text fields\n     return fields_result\n@@ -362,7 +363,7 @@ def populate_tr_ocr_info(document, field_results):\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n \n-            is_checkbox_field = field.get(\"field_type\", None) == \"BOOLEAN\"\n+            is_checkbox_field = field.get(\"type\", None) == \"BOOLEAN\"\n             adjusted_coords = get_trocr_adjusted_coords(\n                 field, page_image, is_checkbox_field\n             )", "code_change_description": "The code has been modified to correctly populate the OCR information for checkbox fields. The `populate_tr_ocr_info` function now also populates the OCR information for checkbox fields. The `is_checkbox_field` variable is now determined based on the `type` key in the field dictionary instead of the `field_type` key.", "code_smell_rating": 2, "github_labels": ["bug"]}, {"sha": "2f8a782528222f64f6274cba6326bcb212ed4a49", "message": "fd", "code_changes": "@@ -27,7 +27,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n         document_first_page = classification_result.get(\"classification_page\", 1)\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n-    fields_result = extract_checkbox_fields(\n+    checkbox_fields_result = extract_checkbox_fields(\n         user, document, layout, checkbox_fields, document_first_page\n     )\n \n@@ -40,8 +40,9 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n     non_coords_fields_result = extract_non_coords_fields(non_coords_fields)\n \n     populate_tr_ocr_info(document, text_fields_result)\n+    populate_tr_ocr_info(document, checkbox_fields_result)\n     # check_for_trocr(user, document, text_fields_result)\n-    fields_result = fields_result + text_fields_result + non_coords_fields_result\n+    fields_result = checkbox_fields_result + text_fields_result + non_coords_fields_result\n \n     # TODO: Remove overlapping text fields\n     return fields_result\n@@ -360,7 +361,7 @@ def populate_tr_ocr_info(document, field_results):\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n \n-            is_checkbox_field = field.get(\"field_type\", None) == \"BOOLEAN\"\n+            is_checkbox_field = field.get(\"type\", None) == \"BOOLEAN\"\n             adjusted_coords = get_trocr_adjusted_coords(\n                 field, page_image, is_checkbox_field\n             )", "code_change_description": "The code has been modified to correctly populate the OCR information for checkbox fields. The checkbox fields are now included in the OCR information and the adjusted coordinates are calculated accordingly.", "code_smell_rating": 3, "github_labels": ["bug"]}, {"sha": "4d46a9f6434c7bb364629ff4da0137a733695871", "message": "Update constants.py", "code_changes": "@@ -27,6 +27,7 @@ class AI_REQUEST_TYPE:\n ]\n \n \n+\n AMOUNT_STANDARD_FIELDS = [\n     \"NET_AMOUNT\",\n     \"TAX_AMOUNT\",", "code_change_description": "A new constant list AMOUNT_STANDARD_FIELDS was added to the AI_REQUEST_TYPE class.", "code_smell_rating": 2, "github_labels": ["enhancement"]}, {"sha": "9e118a679fd47d6b1c7c516c5370420dcef756cb", "message": "fd", "code_changes": "@@ -4,12 +4,13 @@\n from datetime import date\n \n from dateutil.relativedelta import relativedelta\n-from fellow2kv.extension import api, db, multi_auth\n from flask import request\n from flask_restx import Namespace, Resource\n-from logger import get_logger\n from sqlalchemy.sql.expression import text\n \n+from fellow2kv.extension import api, db, multi_auth\n+from logger import get_logger\n+\n namespace = Namespace(\"Cache\", description=\"Cache\")\n \n parser = api.parser()\n@@ -41,7 +42,7 @@ def post(self):\n             return {\"success\": False, \"message\": \"Some unknown error has occurred\"}\n \n \n-tables_to_sync = [\"document_type\", \"sub_document_type\"]\n+tables_to_sync = [\"document_type\", \"sub_document_type\", \"lov_list_of_value\"]\n \n \n class UUIDEncoder(json.JSONEncoder):", "code_change_description": "The code has been modified to add a new table 'lov_list_of_value' to the list of tables to sync in the Cache namespace. Additionally, some import statements have been reorganized.", "code_smell_rating": 2, "github_labels": ["refactoring"]}, {"sha": "4015c05b8f18d94ad034f5788006b4622b8a505d", "message": "Merge pull request #774 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -12,8 +12,11 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (common_table_helper, doc2_table_helper,\n-                                     table_draft_helper)\n+from helper.table_extractors import (\n+    common_table_helper,\n+    doc2_table_helper,\n+    table_draft_helper,\n+)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -96,9 +99,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                     \"is_table_field\": True,\n                     \"table_field_name\": layout_field.get(\"table_field_name\", None),\n                     \"table_field_index\": layout_field.get(\"table_field_index\", None),\n-                    \"list_of_values\": layout_field.get(\n-                        \"list_of_values\", None\n-                    ),\n+                    \"list_of_values\": layout_field.get(\"list_of_values\", None),\n                 }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n             if not doc_field and not layout_field.get(\"is_table_field\", False):\n@@ -109,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                 ]\n                 doc_field[\"tr_ocr_model_id\"] = layout_field.get(\"tr_ocr_model_id\", None)\n                 doc_field[\"field_group\"] = layout_field.get(\"field_group\", None)\n+                doc_field[\"checkbox_group\"] = layout_field.get(\"checkbox_group\", None)\n                 doc_field[\"field_threshold\"] = layout_field.get(\"field_threshold\", None)\n                 doc_field[\"list_of_values\"] = layout_field.get(\"list_of_values\", None)\n                 layout_doc_fields.append(doc_field)\n@@ -306,6 +308,9 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n                                     \"is_table_field\": True,\n                                     \"table_field_name\": table_column[\"name\"],\n                                     \"table_field_index\": index,\n+                                    \"checkbox_group\": table_column.get(\n+                                        \"checkbox_group\", None\n+                                    ),\n                                 }\n                             )\n             elif not field_type == \"TableOfCheckboxes\":", "code_change_description": "The code has been modified to add the 'checkbox_group' attribute to the extracted document fields from the layout JSON.", "code_smell_rating": 3, "github_labels": ["enhancement"]}, {"sha": "54ff63472f88f8e87729b87482a0e747d3401f4e", "message": "Merge pull request #773 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                 ]\n                 doc_field[\"tr_ocr_model_id\"] = layout_field.get(\"tr_ocr_model_id\", None)\n                 doc_field[\"field_group\"] = layout_field.get(\"field_group\", None)\n+                doc_field[\"checkbox_group\"] = layout_field.get(\"checkbox_group\", None)\n                 doc_field[\"field_threshold\"] = layout_field.get(\"field_threshold\", None)\n                 doc_field[\"list_of_values\"] = layout_field.get(\"list_of_values\", None)\n                 layout_doc_fields.append(doc_field)\n@@ -307,6 +308,9 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n                                     \"is_table_field\": True,\n                                     \"table_field_name\": table_column[\"name\"],\n                                     \"table_field_index\": index,\n+                                    \"checkbox_group\": table_column.get(\n+                                        \"checkbox_group\", None\n+                                    ),\n                                 }\n                             )\n             elif not field_type == \"TableOfCheckboxes\":", "code_change_description": "In this code change, a new key 'checkbox_group' has been added to the 'doc_field' dictionary in the 'extract_document_fields' function and to the 'field' dictionary in the 'get_layout_fields_from_layout_json' function. This key stores the checkbox group name for the respective field. This change allows for better organization and grouping of checkbox fields.", "code_smell_rating": 3, "github_labels": ["enhancement"]}, {"sha": "0053cc518e18d418b3ea54887cd142f123803ece", "message": "fd", "code_changes": "@@ -109,6 +109,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                 ]\n                 doc_field[\"tr_ocr_model_id\"] = layout_field.get(\"tr_ocr_model_id\", None)\n                 doc_field[\"field_group\"] = layout_field.get(\"field_group\", None)\n+                doc_field[\"checkbox_group\"] = layout_field.get(\"checkbox_group\", None)\n                 doc_field[\"field_threshold\"] = layout_field.get(\"field_threshold\", None)\n                 doc_field[\"list_of_values\"] = layout_field.get(\"list_of_values\", None)\n                 layout_doc_fields.append(doc_field)\n@@ -306,6 +307,9 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n                                     \"is_table_field\": True,\n                                     \"table_field_name\": table_column[\"name\"],\n                                     \"table_field_index\": index,\n+                                    \"checkbox_group\": table_column.get(\n+                                        \"checkbox_group\", None\n+                                    ),\n                                 }\n                             )\n             elif not field_type == \"TableOfCheckboxes\":", "code_change_description": "The code change added a new key-value pair 'checkbox_group' to the 'doc_field' dictionary in the 'extract_document_fields' function and 'layout_field' dictionary in the 'get_layout_fields_from_layout_json' function. This key-value pair is used to store the checkbox group name for a particular field.", "code_smell_rating": 2, "github_labels": ["enhancement"]}, {"sha": "a222c1fa066516f30542d82a7bbb1a45617793ed", "message": "Merge pull request #772 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -12,11 +12,8 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (\n-    common_table_helper,\n-    doc2_table_helper,\n-    table_draft_helper,\n-)\n+from helper.table_extractors import (common_table_helper, doc2_table_helper,\n+                                     table_draft_helper)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -99,6 +96,9 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                     \"is_table_field\": True,\n                     \"table_field_name\": layout_field.get(\"table_field_name\", None),\n                     \"table_field_index\": layout_field.get(\"table_field_index\", None),\n+                    \"list_of_values\": layout_field.get(\n+                        \"list_of_values\", None\n+                    ),\n                 }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n             if not doc_field and not layout_field.get(\"is_table_field\", False):\n@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                 doc_field[\"tr_ocr_model_id\"] = layout_field.get(\"tr_ocr_model_id\", None)\n                 doc_field[\"field_group\"] = layout_field.get(\"field_group\", None)\n                 doc_field[\"field_threshold\"] = layout_field.get(\"field_threshold\", None)\n+                doc_field[\"list_of_values\"] = layout_field.get(\"list_of_values\", None)\n                 layout_doc_fields.append(doc_field)\n             except:\n                 layout_non_coords_fields.append(doc_field)\n@@ -297,7 +298,7 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n                                     \"coords\": [column_coords[\"coord\"]],\n                                     \"tr_ocr_model_id\": table_column[\"tr_ocr_model_id\"],\n                                     \"field_type\": table_column.get(\n-                                        \"fieldType\", \"STRING\"\n+                                        \"column_type\", \"STRING\"\n                                     ),\n                                     \"list_of_values\": table_column.get(\n                                         \"list_of_values\", None", "code_change_description": "The code has been refactored to import table extractors in a single line instead of multiple lines. Additionally, the 'list_of_values' key has been added to the layout fields and table columns to store a list of possible values for a field. The 'fieldType' key has been renamed to 'column_type' in the table columns.", "code_smell_rating": 3, "github_labels": ["refactoring", "enhancement"]}, {"sha": "fae2b20eaeb97c90f3996ae7088ac7581254397b", "message": "Merge pull request #771 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -12,11 +12,8 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (\n-    common_table_helper,\n-    doc2_table_helper,\n-    table_draft_helper,\n-)\n+from helper.table_extractors import (common_table_helper, doc2_table_helper,\n+                                     table_draft_helper)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -99,6 +96,9 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                     \"is_table_field\": True,\n                     \"table_field_name\": layout_field.get(\"table_field_name\", None),\n                     \"table_field_index\": layout_field.get(\"table_field_index\", None),\n+                    \"list_of_values\": layout_field.get(\n+                        \"list_of_values\", None\n+                    ),\n                 }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n             if not doc_field and not layout_field.get(\"is_table_field\", False):\n@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                 doc_field[\"tr_ocr_model_id\"] = layout_field.get(\"tr_ocr_model_id\", None)\n                 doc_field[\"field_group\"] = layout_field.get(\"field_group\", None)\n                 doc_field[\"field_threshold\"] = layout_field.get(\"field_threshold\", None)\n+                doc_field[\"list_of_values\"] = layout_field.get(\"list_of_values\", None)\n                 layout_doc_fields.append(doc_field)\n             except:\n                 layout_non_coords_fields.append(doc_field)\n@@ -297,7 +298,7 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n                                     \"coords\": [column_coords[\"coord\"]],\n                                     \"tr_ocr_model_id\": table_column[\"tr_ocr_model_id\"],\n                                     \"field_type\": table_column.get(\n-                                        \"fieldType\", \"STRING\"\n+                                        \"column_type\", \"STRING\"\n                                     ),\n                                     \"list_of_values\": table_column.get(\n                                         \"list_of_values\", None", "code_change_description": "The code has been refactored to import table extractors in a single line instead of multiple lines. Additionally, the 'list_of_values' key has been added to the layout fields and table columns to store a list of possible values for a field. The 'fieldType' key has been renamed to 'column_type' in the table columns.", "code_smell_rating": 3, "github_labels": ["refactoring", "enhancement"]}, {"sha": "2ba5df4e7df25cb9640b86f3d946717997443347", "message": "fd", "code_changes": "@@ -12,11 +12,8 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (\n-    common_table_helper,\n-    doc2_table_helper,\n-    table_draft_helper,\n-)\n+from helper.table_extractors import (common_table_helper, doc2_table_helper,\n+                                     table_draft_helper)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -99,6 +96,9 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                     \"is_table_field\": True,\n                     \"table_field_name\": layout_field.get(\"table_field_name\", None),\n                     \"table_field_index\": layout_field.get(\"table_field_index\", None),\n+                    \"list_of_values\": layout_field.get(\n+                        \"list_of_values\", None\n+                    ),\n                 }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n             if not doc_field and not layout_field.get(\"is_table_field\", False):\n@@ -110,6 +110,7 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n                 doc_field[\"tr_ocr_model_id\"] = layout_field.get(\"tr_ocr_model_id\", None)\n                 doc_field[\"field_group\"] = layout_field.get(\"field_group\", None)\n                 doc_field[\"field_threshold\"] = layout_field.get(\"field_threshold\", None)\n+                doc_field[\"list_of_values\"] = layout_field.get(\"list_of_values\", None)\n                 layout_doc_fields.append(doc_field)\n             except:\n                 layout_non_coords_fields.append(doc_field)\n@@ -297,7 +298,7 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n                                     \"coords\": [column_coords[\"coord\"]],\n                                     \"tr_ocr_model_id\": table_column[\"tr_ocr_model_id\"],\n                                     \"field_type\": table_column.get(\n-                                        \"fieldType\", \"STRING\"\n+                                        \"column_type\", \"STRING\"\n                                     ),\n                                     \"list_of_values\": table_column.get(\n                                         \"list_of_values\", None", "code_change_description": "The code has been refactored to import table extractors in a single line instead of multiple lines. Additionally, the 'list_of_values' key has been added to the layout fields and table columns to store a list of possible values for a field. The 'fieldType' key has been renamed to 'column_type' in the table columns.", "code_smell_rating": 3, "github_labels": ["refactoring", "enhancement"]}, {"sha": "88d5938b29848c0cefddb3734cd22fa7d8bbb971", "message": "Merge pull request #770 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -146,5 +146,5 @@ build.sh\n test.py\n .vscode/*\n .DS_Store\n-debugging/field_cropped_images/*\n+debugging/*\n model_default\n\\ No newline at end of file", "code_change_description": "The code change added the 'debugging' directory to the list of files/folders to be ignored by Git. Previously, only the 'field_cropped_images' directory was being ignored.", "code_smell_rating": 3, "github_labels": ["ignore", "cleanup"]}, {"sha": "9e19582e90dd4f454fa6b7945441888ac3dda90c", "message": "Merge pull request #769 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -146,5 +146,5 @@ build.sh\n test.py\n .vscode/*\n .DS_Store\n-debugging/field_cropped_images/*\n+debugging/*\n model_default\n\\ No newline at end of file", "code_change_description": "The code change added the 'debugging' directory to the list of files/folders to be ignored by Git. Previously, only the 'field_cropped_images' directory was being ignored.", "code_smell_rating": 3, "github_labels": ["ignore", "cleanup"]}, {"sha": "bcd322a6572cb3f09eaa097b3a9d0b8ef55b021f", "message": "Merge pull request #768 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -146,5 +146,5 @@ build.sh\n test.py\n .vscode/*\n .DS_Store\n-debugging/field_cropped_images/*\n+debugging/*\n model_default\n\\ No newline at end of file", "code_change_description": "The code change added the 'debugging' directory to the list of files/folders to be ignored by Git. Previously, only the 'field_cropped_images' directory was being ignored.", "code_smell_rating": 3, "github_labels": ["ignore", "cleanup"]}, {"sha": "f81664404565e4437bac18ec20f3dd19605cc200", "message": "Merge branch 'stage' into dev", "code_changes": "@@ -111,3 +111,4 @@ jobs:\n           GHA_Meta: ${{ steps.output.outputs.new-version }}\n         env:\n           CCI_TOKEN: ${{ secrets.CCI_TOKEN }}\n+", "code_change_description": "The code change adds a new environment variable 'CCI_TOKEN' with the value of the secret 'CCI_TOKEN' to the jobs section of the YAML file. Additionally, it sets the 'GHA_Meta' variable to the new version output by the 'output' step.", "code_smell_rating": 2, "github_labels": ["enhancement"]}, {"sha": "127b4a9d4c28c028bfef551f3ef9e30fb6a17e99", "message": "fd", "code_changes": "@@ -3,29 +3,20 @@\n import uuid\n from collections import defaultdict\n \n+from sqlalchemy.sql import func\n+\n from constants import INVOICE_MAPPING\n from fellow2kv.extension import db, storagemanager\n from helpdesk import create_new_customer, create_ticket\n-from logger import get_logger\n-from models import (\n-    DocOriginRules,\n-    FellowKVRule,\n-    FellowKVRuleUser,\n-    FellowKVSourceFile,\n-    FellowKVTableColumnRule,\n-    FellowKVTableRule,\n-    TableFormattingRules,\n-    TfidfDocs,\n-)\n-from sqlalchemy.sql import func\n-\n from helper import doc2_util\n-from helper.ai.ai_ocr import generate_hard_regex_from_string, generate_regex_from_string\n-from helper.util import (\n-    get_page,\n-    transform_from_normalized,\n-    transform_from_normalized_coords_object,\n-)\n+from helper.ai.ai_ocr import (generate_hard_regex_from_string,\n+                              generate_regex_from_string)\n+from helper.util import (get_page, transform_from_normalized,\n+                         transform_from_normalized_coords_object)\n+from logger import get_logger\n+from models import (DocOriginRules, FellowKVRule, FellowKVRuleUser,\n+                    FellowKVSourceFile, FellowKVTableColumnRule,\n+                    FellowKVTableRule, TableFormattingRules, TfidfDocs)\n \n logger = get_logger(\"plugin-export-util\")\n \n@@ -1100,7 +1091,7 @@ def transform_to_rules(extractor, item):\n                 rule_increase.append({\"ruleID\": field.get(\"rule\"), \"weight\": 1})\n \n         create_new_rule = False\n-        if extraction_method == \"AI\" or field_updated or field[\"score\"] < 40:\n+        if not field.get(\"rule\", None) or field_updated or (field.get(\"score\", 40) < 40):\n             create_new_rule = True\n \n         if create_new_rule:", "code_change_description": "The code has been refactored to simplify the logic of creating new rules. The condition for creating a new rule has been updated to check if the field has a rule assigned to it or if the field score is less than 40. If either of these conditions is true, a new rule is created.", "code_smell_rating": 3, "github_labels": ["refactor"]}, {"sha": "2783718bb76f5e5edfe49315a4356d15d25bfa66", "message": "fd", "code_changes": "@@ -146,5 +146,5 @@ build.sh\n test.py\n .vscode/*\n .DS_Store\n-debugging/field_cropped_images/*\n+debugging/*\n model_default\n\\ No newline at end of file", "code_change_description": "The code change added the 'debugging' directory to the list of files/folders to be ignored by Git. Previously, only the 'field_cropped_images' directory was being ignored.", "code_smell_rating": 3, "github_labels": ["ignore", "cleanup"]}, {"sha": "5f8cbbf9320b01127135cef5210b64d76f5ccf9d", "message": "Merge pull request #767 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -12,11 +12,8 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (\n-    common_table_helper,\n-    doc2_table_helper,\n-    table_draft_helper,\n-)\n+from helper.table_extractors import (common_table_helper, doc2_table_helper,\n+                                     table_draft_helper)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -91,8 +88,18 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n         layout_doc_fields = []\n         layout_non_coords_fields = []\n         for layout_field in layout_fields:\n+            layout_field_name = layout_field[\"name\"]\n+            if layout_field.get(\"is_table_field\", False):\n+                doc_fields[layout_field_name] = {\n+                    \"field_name\": layout_field_name,\n+                    \"field_type\": layout_field[\"field_type\"],\n+                    \"is_table_field\": True,\n+                    \"table_field_name\": layout_field.get(\"table_field_name\", None),\n+                    \"table_field_index\": layout_field.get(\"table_field_index\", None),\n+\n+                }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n-            if not doc_field:\n+            if not doc_field and not layout_field.get(\"is_table_field\", False):\n                 continue\n             try:\n                 doc_field[\"coordinates\"] = [\n@@ -276,7 +283,25 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n         for layout_row in layout_group[\"rows\"]:\n             layout_fields = []\n             field_type = layout_row.get(\"fieldType\", \"\")\n-            if not field_type == \"TableOfCheckboxes\":\n+            if field_type == \"ExtractedTable\":\n+                table_columns = layout_row[\"columns\"]\n+                for table_column in table_columns:\n+                    columns_coords_array = table_column['coords']\n+                    for index, column_coords in enumerate(columns_coords_array):\n+                        if column_coords['coord']:\n+                            filtered_layout_fields.append(\n+                                {\n+                                    \"name\": f\"{table_column['name']}_{index}\",\n+                                    \"coords\": [column_coords['coord']],\n+                                    \"tr_ocr_model_id\": table_column[\"tr_ocr_model_id\"],\n+                                    \"field_type\": table_column.get(\"fieldType\", \"STRING\"),\n+                                    \"list_of_values\": table_column.get(\"list_of_values\", None),\n+                                    \"is_table_field\": True,\n+                                    \"table_field_name\": table_column['name'],\n+                                    \"table_field_index\": index,\n+                                }\n+                            )\n+            elif not field_type == \"TableOfCheckboxes\":\n                 layout_fields = [layout_row]\n             else:\n                 if type(layout_row[\"tableBodyRows\"]) is list:", "code_change_description": "The code has been modified to include support for extracting table fields from the layout template. The extracted table fields are added to the doc_fields dictionary with additional attributes such as is_table_field, table_field_name, and table_field_index.", "code_smell_rating": 3, "github_labels": ["enhancement"]}, {"sha": "8202e5f8f2e7a2f9e4cb2cc1998ca29f724dbd43", "message": "Merge branch 'sandbox' into stage", "code_changes": "@@ -111,3 +111,4 @@ jobs:\n           GHA_Meta: ${{ steps.output.outputs.new-version }}\n         env:\n           CCI_TOKEN: ${{ secrets.CCI_TOKEN }}\n+", "code_change_description": "The code change adds a new environment variable 'CCI_TOKEN' with the value of the secret 'CCI_TOKEN' to the jobs section of the YAML file. Additionally, it sets the 'GHA_Meta' variable to the new version output by the previous step.", "code_smell_rating": 2, "github_labels": ["enhancement"]}, {"sha": "c756d131475cdf3dc2321f9274ab4e7c66244fae", "message": "Merge pull request #766 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -12,11 +12,8 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (\n-    common_table_helper,\n-    doc2_table_helper,\n-    table_draft_helper,\n-)\n+from helper.table_extractors import (common_table_helper, doc2_table_helper,\n+                                     table_draft_helper)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -91,8 +88,18 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n         layout_doc_fields = []\n         layout_non_coords_fields = []\n         for layout_field in layout_fields:\n+            layout_field_name = layout_field[\"name\"]\n+            if layout_field.get(\"is_table_field\", False):\n+                doc_fields[layout_field_name] = {\n+                    \"field_name\": layout_field_name,\n+                    \"field_type\": layout_field[\"field_type\"],\n+                    \"is_table_field\": True,\n+                    \"table_field_name\": layout_field.get(\"table_field_name\", None),\n+                    \"table_field_index\": layout_field.get(\"table_field_index\", None),\n+\n+                }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n-            if not doc_field:\n+            if not doc_field and not layout_field.get(\"is_table_field\", False):\n                 continue\n             try:\n                 doc_field[\"coordinates\"] = [\n@@ -276,7 +283,25 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n         for layout_row in layout_group[\"rows\"]:\n             layout_fields = []\n             field_type = layout_row.get(\"fieldType\", \"\")\n-            if not field_type == \"TableOfCheckboxes\":\n+            if field_type == \"ExtractedTable\":\n+                table_columns = layout_row[\"columns\"]\n+                for table_column in table_columns:\n+                    columns_coords_array = table_column['coords']\n+                    for index, column_coords in enumerate(columns_coords_array):\n+                        if column_coords['coord']:\n+                            filtered_layout_fields.append(\n+                                {\n+                                    \"name\": f\"{table_column['name']}_{index}\",\n+                                    \"coords\": [column_coords['coord']],\n+                                    \"tr_ocr_model_id\": table_column[\"tr_ocr_model_id\"],\n+                                    \"field_type\": table_column.get(\"fieldType\", \"STRING\"),\n+                                    \"list_of_values\": table_column.get(\"list_of_values\", None),\n+                                    \"is_table_field\": True,\n+                                    \"table_field_name\": table_column['name'],\n+                                    \"table_field_index\": index,\n+                                }\n+                            )\n+            elif not field_type == \"TableOfCheckboxes\":\n                 layout_fields = [layout_row]\n             else:\n                 if type(layout_row[\"tableBodyRows\"]) is list:", "code_change_description": "The code has been modified to add support for extracting table fields from the layout template. The extracted table fields are added to the doc_fields dictionary with additional attributes such as is_table_field, table_field_name, and table_field_index.", "code_smell_rating": 3, "github_labels": ["enhancement"]}, {"sha": "6edb488bdad725525e4be80266725aef0837377e", "message": "Merge branch 'stage' into dev", "code_changes": "@@ -10,9 +10,11 @@\n from helper.extract_util import Extractor\n from helper.field_extractors.adjusted_coordinates import get_adjusted_coords\n from helper.form_extractor.fill_ratio import (\n-    get_fill_percentage_from_image_url, strip_box, strip_box_special)\n-from helper.util import (transform_from_normalized_coords_object,\n-                         transform_to_normalized)\n+    get_fill_percentage_from_image_url,\n+    strip_box,\n+    strip_box_special,\n+)\n+from helper.util import transform_from_normalized_coords_object, transform_to_normalized\n from logger.logger import get_logger\n \n logger = get_logger(\"fellowkv-deh\")\n@@ -28,7 +30,7 @@ def extract_form_fields(user, document, layout, fields_to_extract, non_coords_fi\n \n     checkbox_fields = [df for df in fields_to_extract if df[\"field_type\"] == \"BOOLEAN\"]\n     fields_result = extract_checkbox_fields(\n-       user, document, layout, checkbox_fields, document_first_page\n+        user, document, layout, checkbox_fields, document_first_page\n     )\n \n     text_fields = [df for df in fields_to_extract if not df[\"field_type\"] == \"BOOLEAN\"]\n@@ -127,8 +129,8 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n     for index, checkbox_field in enumerate(checkbox_fields):\n         # checkbox_field['fill_ratio'] = results[checkbox_field['field_name']]\n         field_type = checkbox_field[\"field_type\"]\n-        if not checkbox_field.get(\"tr_ocr_model_id\",None):\n-            checkbox_field[\"tr_ocr_model_id\"] = '5a3e526f-371a-470b-aacd-75460c0b8a16'\n+        if not checkbox_field.get(\"tr_ocr_model_id\", None):\n+            checkbox_field[\"tr_ocr_model_id\"] = \"5a3e526f-371a-470b-aacd-75460c0b8a16\"\n         field_name = checkbox_field[\"field_name\"]\n         adjusted_coords = checkbox_field[\"adjusted_coords\"]\n         coords = transform_to_normalized(\n@@ -159,6 +161,7 @@ def extract_checkbox_fields(user, document, layout, checkbox_fields, start_page=\n             \"is_table_field\": checkbox_field.get(\"is_table_field\", False),\n             \"table_field_name\": checkbox_field.get(\"table_field_name\", None),\n             \"table_field_index\": checkbox_field.get(\"table_field_index\", None)\n+\n         }\n         fields.append(field)\n     return fields\n@@ -358,8 +361,10 @@ def populate_tr_ocr_info(document, field_results):\n                 field, field[\"adjusted_coords\"]\n             )  # to show on UI\n \n-            is_checkbox_field = (field.get(\"field_type\",None) == \"BOOLEAN\")\n-            adjusted_coords = get_trocr_adjusted_coords(field, page_image, is_checkbox_field)\n+            is_checkbox_field = field.get(\"field_type\", None) == \"BOOLEAN\"\n+            adjusted_coords = get_trocr_adjusted_coords(\n+                field, page_image, is_checkbox_field\n+            )\n             if not adjusted_coords:\n                 field[\"adjusted_coords\"] = None\n                 field.pop(\"confidence\", None)\n@@ -386,9 +391,13 @@ def populate_tr_ocr_info(document, field_results):\n \n def get_trocr_adjusted_coords(field_data, page_image, is_checkbox_field=False):\n     if is_checkbox_field:\n-        strip_dim = 0,0,0,0\n+        strip_dim = 0, 0, 0, 0\n         return trocr_common.readjust_coordinates(\n-            page_image, field_data[\"adjusted_coords\"], strip_dim, v_padding=5, h_padding=5\n+            page_image,\n+            field_data[\"adjusted_coords\"],\n+            strip_dim,\n+            v_padding=5,\n+            h_padding=5,\n         )\n \n     field_cropped_image = trocr_common.get_image_from_coords(", "code_change_description": "Refactored the code to improve readability and maintainability. Added missing imports, formatted code, and improved variable naming. Also added missing whitespace and removed unnecessary parentheses.", "code_smell_rating": 3, "github_labels": ["refactor"]}, {"sha": "cc561d2cc4895cf79526e8ce90ae4f70eb10bf63", "message": "fd", "code_changes": "@@ -12,11 +12,8 @@\n from helper import util\n from helper.ai import ai_invoice\n from helper.layout import layout_fields_helper as lfh\n-from helper.table_extractors import (\n-    common_table_helper,\n-    doc2_table_helper,\n-    table_draft_helper,\n-)\n+from helper.table_extractors import (common_table_helper, doc2_table_helper,\n+                                     table_draft_helper)\n from logger.logger import get_logger\n from models import DocumentLayoutTemplate\n from util import sync_wrapper\n@@ -91,8 +88,18 @@ def extract_document_fields(doc_id, document, local_file_path, user):\n         layout_doc_fields = []\n         layout_non_coords_fields = []\n         for layout_field in layout_fields:\n+            layout_field_name = layout_field[\"name\"]\n+            if layout_field.get(\"is_table_field\", False):\n+                doc_fields[layout_field_name] = {\n+                    \"field_name\": layout_field_name,\n+                    \"field_type\": layout_field[\"field_type\"],\n+                    \"is_table_field\": True,\n+                    \"table_field_name\": layout_field.get(\"table_field_name\", None),\n+                    \"table_field_index\": layout_field.get(\"table_field_index\", None),\n+\n+                }\n             doc_field = doc_fields.get(layout_field[\"name\"], None)\n-            if not doc_field:\n+            if not doc_field and not layout_field.get(\"is_table_field\", False):\n                 continue\n             try:\n                 doc_field[\"coordinates\"] = [\n@@ -276,7 +283,25 @@ def get_layout_fields_from_layout_json(layout_template, field_names):\n         for layout_row in layout_group[\"rows\"]:\n             layout_fields = []\n             field_type = layout_row.get(\"fieldType\", \"\")\n-            if not field_type == \"TableOfCheckboxes\":\n+            if field_type == \"ExtractedTable\":\n+                table_columns = layout_row[\"columns\"]\n+                for table_column in table_columns:\n+                    columns_coords_array = table_column['coords']\n+                    for index, column_coords in enumerate(columns_coords_array):\n+                        if column_coords['coord']:\n+                            filtered_layout_fields.append(\n+                                {\n+                                    \"name\": f\"{table_column['name']}_{index}\",\n+                                    \"coords\": [column_coords['coord']],\n+                                    \"tr_ocr_model_id\": table_column[\"tr_ocr_model_id\"],\n+                                    \"field_type\": table_column.get(\"fieldType\", \"STRING\"),\n+                                    \"list_of_values\": table_column.get(\"list_of_values\", None),\n+                                    \"is_table_field\": True,\n+                                    \"table_field_name\": table_column['name'],\n+                                    \"table_field_index\": index,\n+                                }\n+                            )\n+            elif not field_type == \"TableOfCheckboxes\":\n                 layout_fields = [layout_row]\n             else:\n                 if type(layout_row[\"tableBodyRows\"]) is list:", "code_change_description": "The code has been modified to include support for extracting table fields from the layout template. The extracted table fields are added to the doc_fields dictionary with additional attributes such as is_table_field, table_field_name, and table_field_index.", "code_smell_rating": 3, "github_labels": ["enhancement"]}]}