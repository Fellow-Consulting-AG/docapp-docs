{"author": "Muhammad Asad Usman Khan", "week": "2023-W12", "total_commits": 14, "author_image": "https://avatars.githubusercontent.com/u/83513548?v=4", "commits": [{"sha": "155979a809f09343345634f31adb1ffb6c321397", "message": "Merge pull request #843 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -326,12 +326,13 @@ def preprocess_and_ocr_document(\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    if not disable_ocr_server:\n+    if True or not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"\n         get_ocred_document(", "code_change_description": "The code has been modified to remove the 'disable_ocr_server' flag from the 'preprocess_document' function call. Instead, the flag is now only checked in the subsequent 'if' statement to determine whether to call the 'get_ocred_document' function or not.", "code_smell_rating": 3, "github_labels": ["refactor"]}, {"sha": "32f477dcf7c17d1e4525de16ade884c49ff0def3", "message": "Merge pull request #842 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -326,14 +326,13 @@ def preprocess_and_ocr_document(\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(\n-            output_path, deskew, use_high_dpi, disable_ocr_server\n-        )\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    if not disable_ocr_server:\n+    if True or not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"\n         get_ocred_document(", "code_change_description": "The code has been modified to remove the 'disable_ocr_server' parameter from the 'pdf_helper.preprocess_document' function call. Instead, the parameter is now being checked within the function to determine whether to disable the OCR server or not.", "code_smell_rating": 3, "github_labels": ["refactor"]}, {"sha": "8742c0c132bf699571758ff6225f4f9c2c4f960a", "message": "Merge branch 'stage' into dev", "code_changes": "@@ -327,6 +327,7 @@ def preprocess_and_ocr_document(\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n         pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+\n     except Exception as ex:\n         logger.error(ex)\n         pass", "code_change_description": "An empty line was added after the try block in the preprocess_and_ocr_document function.", "code_smell_rating": 2, "github_labels": ["cosmetic"]}, {"sha": "0f63b0684371f7def90e808cab300f0d44dcaab9", "message": "fd", "code_changes": "@@ -326,7 +326,7 @@ def preprocess_and_ocr_document(\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n     disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n     except Exception as ex:\n         logger.error(ex)\n         pass", "code_change_description": "The 'use_high_dpi' parameter is no longer being used in the 'pdf_helper.preprocess_document' function call. It has been removed from the function call and is no longer a configurable option.", "code_smell_rating": 3, "github_labels": ["refactor"]}, {"sha": "3114230f0fc039f8e525029bb336447e4aee8f28", "message": "fd", "code_changes": "@@ -331,7 +331,7 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    if not disable_ocr_server:\n+    if True or not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"\n         get_ocred_document(", "code_change_description": "The code change involves commenting out a conditional statement that disables the OCR server. The OCR server will now always be used for document processing.", "code_smell_rating": 3, "github_labels": ["bug"]}, {"sha": "ceeddeeb19d02974bdcc5c2ac6b976a502d8e9fe", "message": "Merge pull request #841 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -324,13 +324,13 @@ def preprocess_and_ocr_document(\n     org_id = user.get_org_id()\n     use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     if not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"", "code_change_description": "The code has been modified to pass the 'disable_ocr_server' flag to the 'preprocess_document' function. This flag is used to determine whether to perform OCR on the document or not.", "code_smell_rating": 3, "github_labels": ["enhancement"]}, {"sha": "9323fa5cce302dd2818208035e9e301d9a1bd38a", "message": "Merge pull request #840 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -324,13 +324,13 @@ def preprocess_and_ocr_document(\n     org_id = user.get_org_id()\n     use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     if not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"", "code_change_description": "The code has been modified to pass the 'disable_ocr_server' flag to the 'preprocess_document' function. This flag is used to determine whether to perform OCR on the document or not.", "code_smell_rating": 3, "github_labels": ["enhancement"]}, {"sha": "3ef839ef7ffa612d6fe6d5a9a5fc3626fe061fce", "message": "fd", "code_changes": "@@ -324,13 +324,13 @@ def preprocess_and_ocr_document(\n     org_id = user.get_org_id()\n     use_high_dpi = gdvh.get_bool_value(db, \"CONVERT_TO_HIGHER_DPI\", org_id, False)\n     deskew = gdvh.get_bool_value(db, \"DESKEW_DOCUMENT\", org_id, False)\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     try:\n-        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi)\n+        pdf_helper.preprocess_document(output_path, deskew, use_high_dpi, disable_ocr_server)\n     except Exception as ex:\n         logger.error(ex)\n         pass\n \n-    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n     if not disable_ocr_server:\n         start_time = datetime.now()\n         flow_meta = \"ocr_by_fellow\"", "code_change_description": "The code has been modified to pass the 'disable_ocr_server' flag to the 'preprocess_document' function. This flag is used to determine whether to perform OCR on the document or not.", "code_smell_rating": 2, "github_labels": ["enhancement"]}, {"sha": "2212e03bf18617e1721e1d6ab66798e103991722", "message": "Merge pull request #839 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -330,37 +330,39 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    start_time = datetime.now()\n-    flow_meta = \"ocr_by_fellow\"\n-    get_ocred_document(\n-        user,\n-        output_path,\n-        output_path,\n-        force_ocr,\n-        improve_quality=improve_quality,\n-    )\n-    # storagemanager_doc2.save_file(output_path, doc_path, None)\n-    end_time = datetime.now()\n-    if \"time_logs\" not in resp_json:\n-        resp_json[\"time_logs\"] = {}\n-    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-        (end_time - start_time).total_seconds()\n-    )\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n+    if not disable_ocr_server:\n+        start_time = datetime.now()\n+        flow_meta = \"ocr_by_fellow\"\n+        get_ocred_document(\n+            user,\n+            output_path,\n+            output_path,\n+            force_ocr,\n+            improve_quality=improve_quality,\n+        )\n+        # storagemanager_doc2.save_file(output_path, doc_path, None)\n+        end_time = datetime.now()\n+        if \"time_logs\" not in resp_json:\n+            resp_json[\"time_logs\"] = {}\n+        resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+            (end_time - start_time).total_seconds()\n+        )\n \n-    if \"ocr_processor\" in resp_json:\n-        ocr_module = resp_json[\"ocr_processor\"]\n-    else:\n-        ocr_module = \"OCR Server\"\n-\n-    if \"flow_meta\" not in resp_json:\n-        resp_json[\"flow_meta\"] = []\n-    resp_json[\"flow_meta\"].append(\n-        {\n-            \"name\": flow_meta,\n-            \"type\": \"ocr\",\n-            \"data\": \"true\",\n-            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n-            \"module\": \"ocr\",\n-            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n-        }\n-    )\n+        if \"ocr_processor\" in resp_json:\n+            ocr_module = resp_json[\"ocr_processor\"]\n+        else:\n+            ocr_module = \"OCR Server\"\n+\n+        if \"flow_meta\" not in resp_json:\n+            resp_json[\"flow_meta\"] = []\n+        resp_json[\"flow_meta\"].append(\n+            {\n+                \"name\": flow_meta,\n+                \"type\": \"ocr\",\n+                \"data\": \"true\",\n+                \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+                \"module\": \"ocr\",\n+                \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+            }\n+        )", "code_change_description": "The code change adds a check to disable the OCR server if the DISABLE_OCR_SERVER flag is set to True. If the flag is False, the OCR server is used to perform OCR on the document. The code also adds logging information to the response JSON.", "code_smell_rating": 3, "github_labels": ["enhancement", "logging"]}, {"sha": "964409f488eb33aa5701aecdfd0ad15986006e30", "message": "Merge pull request #838 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -330,37 +330,39 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    start_time = datetime.now()\n-    flow_meta = \"ocr_by_fellow\"\n-    get_ocred_document(\n-        user,\n-        output_path,\n-        output_path,\n-        force_ocr,\n-        improve_quality=improve_quality,\n-    )\n-    # storagemanager_doc2.save_file(output_path, doc_path, None)\n-    end_time = datetime.now()\n-    if \"time_logs\" not in resp_json:\n-        resp_json[\"time_logs\"] = {}\n-    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-        (end_time - start_time).total_seconds()\n-    )\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n+    if not disable_ocr_server:\n+        start_time = datetime.now()\n+        flow_meta = \"ocr_by_fellow\"\n+        get_ocred_document(\n+            user,\n+            output_path,\n+            output_path,\n+            force_ocr,\n+            improve_quality=improve_quality,\n+        )\n+        # storagemanager_doc2.save_file(output_path, doc_path, None)\n+        end_time = datetime.now()\n+        if \"time_logs\" not in resp_json:\n+            resp_json[\"time_logs\"] = {}\n+        resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+            (end_time - start_time).total_seconds()\n+        )\n \n-    if \"ocr_processor\" in resp_json:\n-        ocr_module = resp_json[\"ocr_processor\"]\n-    else:\n-        ocr_module = \"OCR Server\"\n-\n-    if \"flow_meta\" not in resp_json:\n-        resp_json[\"flow_meta\"] = []\n-    resp_json[\"flow_meta\"].append(\n-        {\n-            \"name\": flow_meta,\n-            \"type\": \"ocr\",\n-            \"data\": \"true\",\n-            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n-            \"module\": \"ocr\",\n-            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n-        }\n-    )\n+        if \"ocr_processor\" in resp_json:\n+            ocr_module = resp_json[\"ocr_processor\"]\n+        else:\n+            ocr_module = \"OCR Server\"\n+\n+        if \"flow_meta\" not in resp_json:\n+            resp_json[\"flow_meta\"] = []\n+        resp_json[\"flow_meta\"].append(\n+            {\n+                \"name\": flow_meta,\n+                \"type\": \"ocr\",\n+                \"data\": \"true\",\n+                \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+                \"module\": \"ocr\",\n+                \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+            }\n+        )", "code_change_description": "The code change adds a check to disable the OCR server if the DISABLE_OCR_SERVER flag is set to True. If the flag is False, the OCR server is used to perform OCR on the document. The code also adds a flow_meta object to the response JSON to track the OCR process and its duration.", "code_smell_rating": 2, "github_labels": ["enhancement"]}, {"sha": "ba5088d628153f6ae1d1906256c0a0aabb872678", "message": "fd", "code_changes": "@@ -330,37 +330,39 @@ def preprocess_and_ocr_document(\n         logger.error(ex)\n         pass\n \n-    start_time = datetime.now()\n-    flow_meta = \"ocr_by_fellow\"\n-    get_ocred_document(\n-        user,\n-        output_path,\n-        output_path,\n-        force_ocr,\n-        improve_quality=improve_quality,\n-    )\n-    # storagemanager_doc2.save_file(output_path, doc_path, None)\n-    end_time = datetime.now()\n-    if \"time_logs\" not in resp_json:\n-        resp_json[\"time_logs\"] = {}\n-    resp_json[\"time_logs\"][\"ocr_document\"] = str(\n-        (end_time - start_time).total_seconds()\n-    )\n+    disable_ocr_server = gdvh.get_bool_value(db, \"DISABLE_OCR_SERVER\", org_id, False)\n+    if not disable_ocr_server:\n+        start_time = datetime.now()\n+        flow_meta = \"ocr_by_fellow\"\n+        get_ocred_document(\n+            user,\n+            output_path,\n+            output_path,\n+            force_ocr,\n+            improve_quality=improve_quality,\n+        )\n+        # storagemanager_doc2.save_file(output_path, doc_path, None)\n+        end_time = datetime.now()\n+        if \"time_logs\" not in resp_json:\n+            resp_json[\"time_logs\"] = {}\n+        resp_json[\"time_logs\"][\"ocr_document\"] = str(\n+            (end_time - start_time).total_seconds()\n+        )\n \n-    if \"ocr_processor\" in resp_json:\n-        ocr_module = resp_json[\"ocr_processor\"]\n-    else:\n-        ocr_module = \"OCR Server\"\n-\n-    if \"flow_meta\" not in resp_json:\n-        resp_json[\"flow_meta\"] = []\n-    resp_json[\"flow_meta\"].append(\n-        {\n-            \"name\": flow_meta,\n-            \"type\": \"ocr\",\n-            \"data\": \"true\",\n-            \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n-            \"module\": \"ocr\",\n-            \"message\": f\"OCR successful. Module used: {ocr_module}\",\n-        }\n-    )\n+        if \"ocr_processor\" in resp_json:\n+            ocr_module = resp_json[\"ocr_processor\"]\n+        else:\n+            ocr_module = \"OCR Server\"\n+\n+        if \"flow_meta\" not in resp_json:\n+            resp_json[\"flow_meta\"] = []\n+        resp_json[\"flow_meta\"].append(\n+            {\n+                \"name\": flow_meta,\n+                \"type\": \"ocr\",\n+                \"data\": \"true\",\n+                \"time\": f'{time.strftime(\"%M:%S\", time.gmtime(int(float(resp_json[\"time_logs\"][\"ocr_document\"]))))}',\n+                \"module\": \"ocr\",\n+                \"message\": f\"OCR successful. Module used: {ocr_module}\",\n+            }\n+        )", "code_change_description": "The code change adds a check to disable the OCR server if the DISABLE_OCR_SERVER flag is set to True. If the flag is False, the OCR server is used to perform OCR on the document. The code also adds logging information to the response JSON.", "code_smell_rating": 3, "github_labels": ["enhancement", "logging"]}, {"sha": "eb9704af01a7b3f3dd010d9826e17e6bacf99304", "message": "Merge pull request #837 from Fellow-Consulting-AG/stage\n\nStage", "code_changes": "@@ -3,13 +3,14 @@\n import time\n \n import requests\n-from authenticator import UserAuthentication\n from flask_sqlalchemy import SQLAlchemy\n+from pdf2image import convert_from_path\n+from PIL import Image\n+\n+from authenticator import UserAuthentication\n from helper.ai import ai_common\n from helper.custom_classifier_v2 import common\n from logger import get_logger\n-from pdf2image import convert_from_path\n-from PIL import Image\n \n from .iclassifier_model_processor import IClassifierModelProcessor\n \n@@ -51,7 +52,11 @@ def classify_pages(self, local_file_path, pages=None):\n                 if pages and not page in pages:\n                     continue\n \n-                label, prob = self.__classify_image(image_path)\n+                try:\n+                    label, prob = self.__classify_image(image_path)\n+                except:\n+                    label = \"ALLGEM\"\n+                    prob = 0.5\n                 page_results.append(\n                     {\n                         \"page\": page,", "code_change_description": "In this code change, the try-except block was added to handle any exceptions that may occur while classifying the image. If an exception occurs, the label is set to 'ALLGEM' and the probability is set to 0.5. This ensures that the API does not crash if an error occurs while processing an image.", "code_smell_rating": 5, "github_labels": ["error-handling"]}, {"sha": "c2f857090656c8d5a9368a8d5c800bc59219246f", "message": "Merge pull request #836 from Fellow-Consulting-AG/dev\n\nfd", "code_changes": "@@ -3,13 +3,14 @@\n import time\n \n import requests\n-from authenticator import UserAuthentication\n from flask_sqlalchemy import SQLAlchemy\n+from pdf2image import convert_from_path\n+from PIL import Image\n+\n+from authenticator import UserAuthentication\n from helper.ai import ai_common\n from helper.custom_classifier_v2 import common\n from logger import get_logger\n-from pdf2image import convert_from_path\n-from PIL import Image\n \n from .iclassifier_model_processor import IClassifierModelProcessor\n \n@@ -51,7 +52,11 @@ def classify_pages(self, local_file_path, pages=None):\n                 if pages and not page in pages:\n                     continue\n \n-                label, prob = self.__classify_image(image_path)\n+                try:\n+                    label, prob = self.__classify_image(image_path)\n+                except:\n+                    label = \"ALLGEM\"\n+                    prob = 0.5\n                 page_results.append(\n                     {\n                         \"page\": page,", "code_change_description": "In this code change, the try-except block was added to handle any exceptions that may occur while classifying the image. If an exception occurs, the label is set to 'ALLGEM' and the probability is set to 0.5. This ensures that the API does not crash if an error occurs while classifying the image.", "code_smell_rating": 4, "github_labels": ["error-handling"]}, {"sha": "48136b260111f008d5a6cfafd5971a74b686e578", "message": "fd", "code_changes": "@@ -3,13 +3,14 @@\n import time\n \n import requests\n-from authenticator import UserAuthentication\n from flask_sqlalchemy import SQLAlchemy\n+from pdf2image import convert_from_path\n+from PIL import Image\n+\n+from authenticator import UserAuthentication\n from helper.ai import ai_common\n from helper.custom_classifier_v2 import common\n from logger import get_logger\n-from pdf2image import convert_from_path\n-from PIL import Image\n \n from .iclassifier_model_processor import IClassifierModelProcessor\n \n@@ -51,7 +52,11 @@ def classify_pages(self, local_file_path, pages=None):\n                 if pages and not page in pages:\n                     continue\n \n-                label, prob = self.__classify_image(image_path)\n+                try:\n+                    label, prob = self.__classify_image(image_path)\n+                except:\n+                    label = \"ALLGEM\"\n+                    prob = 0.5\n                 page_results.append(\n                     {\n                         \"page\": page,", "code_change_description": "In this code change, the try-except block was added to handle any exceptions that may occur while classifying the image. If an exception occurs, the label is set to 'ALLGEM' and the probability is set to 0.5. This ensures that the API does not crash if an error occurs while classifying the image.", "code_smell_rating": 4, "github_labels": ["error-handling"]}]}